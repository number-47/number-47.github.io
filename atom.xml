<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Number 47</title>
  <icon>https://www.gravatar.com/avatar/fa526ab3292afa877876ffaa274810be</icon>
  <subtitle>Keep calm and carry on</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="www.number47.cn/"/>
  <updated>2019-11-23T08:15:24.459Z</updated>
  <id>www.number47.cn/</id>
  
  <author>
    <name>Number 47</name>
    <email>820368938@qq.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>专项课18 旅游场景</title>
    <link href="www.number47.cn/2019/10/24/%E4%B8%93%E9%A1%B9%E8%AF%BE18-%E6%97%85%E6%B8%B8%E5%9C%BA%E6%99%AF/"/>
    <id>www.number47.cn/2019/10/24/专项课18-旅游场景/</id>
    <published>2019-10-24T04:56:35.000Z</published>
    <updated>2019-11-23T08:15:24.459Z</updated>
    
    <content type="html"><![CDATA[<h1 id="专项课18-旅游场景"><a href="#专项课18-旅游场景" class="headerlink" title="专项课18 旅游场景"></a>专项课18 旅游场景</h1><p>I’d like a room. 我想开一个房间。</p><p>I’d like to reserve a room. 我想开一个房间。</p><p>Do you have a reservation? 你有预定吗？</p><h2 id="part1：酒店英文"><a href="#part1：酒店英文" class="headerlink" title="part1：酒店英文"></a>part1：酒店英文</h2><h3 id="out-of…表示什么没了"><a href="#out-of…表示什么没了" class="headerlink" title="out of…表示什么没了"></a>out of…表示什么没了</h3><p>eg:We’re out of <strong>shampoo</strong> and <strong>shower gel</strong>.我们没有洗发水和沐浴露了。</p><h3 id="I‘d-like-表示想要什么"><a href="#I‘d-like-表示想要什么" class="headerlink" title="I‘d like ..表示想要什么"></a>I‘d like ..表示想要什么</h3><p>And I’d like an <strong>extra blanket</strong> and <strong>towel</strong>. 我还要一条毯子和毛巾。</p><h3 id="sth-doesn’t-work-表示什么东西坏了。"><a href="#sth-doesn’t-work-表示什么东西坏了。" class="headerlink" title="sth doesn’t work 表示什么东西坏了。"></a>sth doesn’t work 表示什么东西坏了。</h3><p>eg: The AC doesn’t work.空调坏了。</p><p>The TV doesn’t work./The TV set doesn’t work.电视机坏了。</p><p>The TV: 电视机或电视机节目</p><p>The TV set: 电视机机器（更为准确）</p><p>My <strong>key card</strong> doesn’t work. 我的房卡坏了。</p><h3 id="send-someone-表示叫人-派人-送人"><a href="#send-someone-表示叫人-派人-送人" class="headerlink" title="send someone 表示叫人/派人/送人"></a>send someone 表示叫人/派人/送人</h3><p><strong>check it out</strong> 看一看，看一下 </p><p>Could you send someone to check it out? 你们能不能派个人过来看看？</p><p>Could you send someone to pick up the food tray? 能叫个人收一下餐盘吗？</p><p>Hi,I’am going out and I’ll be back in the evening,can you send someone to clean my room?</p><p>我就要出门，晚上回来，你能派人做一下房间清理吗？</p><h2 id="Part2-：交通出行"><a href="#Part2-：交通出行" class="headerlink" title="Part2 ：交通出行"></a>Part2 ：交通出行</h2><h3 id="请求酒店帮忙预定出租车"><a href="#请求酒店帮忙预定出租车" class="headerlink" title="请求酒店帮忙预定出租车"></a>请求酒店帮忙预定出租车</h3><p>Can you <strong>book</strong> a taxi for me? I’d like to go to Times Square tomorrow morning at 9.</p><p>你能帮我预定一辆出租车吗？我明天早上九点要去时代广场。</p><h3 id="自己打车，跟司机交流"><a href="#自己打车，跟司机交流" class="headerlink" title="自己打车，跟司机交流"></a>自己打车，跟司机交流</h3><p>Where are you heading to? 你去哪儿？</p><p>Where to? 去哪儿？</p><p>get in上车</p><h3 id="赶时间"><a href="#赶时间" class="headerlink" title="赶时间"></a>赶时间</h3><p>I’m really in a hurry. Is there a <strong>shortcut</strong>? 问司机有没有小路/捷径可以快点？</p><p>tap on:刷卡上车</p><p>tap off:刷卡下车</p><h2 id="Part3：求助外国人"><a href="#Part3：求助外国人" class="headerlink" title="Part3：求助外国人"></a>Part3：求助外国人</h2><h2 id="拍照时提出自己的小需求"><a href="#拍照时提出自己的小需求" class="headerlink" title="拍照时提出自己的小需求"></a>拍照时提出自己的小需求</h2><p>Excuse me, can you take a photo for us please? 不好意思，你能帮我们拍张照吗？</p><p>Can/Could you take that building in please? 你能帮我把那个建筑拍进去吗？</p><h3 id="借手机打电话"><a href="#借手机打电话" class="headerlink" title="借手机打电话"></a>借手机打电话</h3><p>Excuse me, <strong>my phone is dead</strong>, Can I use you phone for a sec. I can’t find my friend, and I need to make a call.</p><p>不好意思，我手机没电了，能借你手机打个电话吗？很快的，我找不到我朋友了，需要打个电话。</p><h3 id="找人帮忙给手机充电"><a href="#找人帮忙给手机充电" class="headerlink" title="找人帮忙给手机充电"></a>找人帮忙给手机充电</h3><p>Can you help me charge my phone? It’s dead. 你能帮我充电吗？没电了</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;专项课18-旅游场景&quot;&gt;&lt;a href=&quot;#专项课18-旅游场景&quot; class=&quot;headerlink&quot; title=&quot;专项课18 旅游场景&quot;&gt;&lt;/a&gt;专项课18 旅游场景&lt;/h1&gt;&lt;p&gt;I’d like a room. 我想开一个房间。&lt;/p&gt;
&lt;p&gt;I’d l
      
    
    </summary>
    
      <category term="流利说" scheme="www.number47.cn/categories/%E6%B5%81%E5%88%A9%E8%AF%B4/"/>
    
    
      <category term="专项课" scheme="www.number47.cn/tags/%E4%B8%93%E9%A1%B9%E8%AF%BE/"/>
    
  </entry>
  
  <entry>
    <title>spring security 学习(一)-spring boot 整合</title>
    <link href="www.number47.cn/2019/10/24/spring%20security%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%80%EF%BC%89-spring%20boot%20%E6%95%B4%E5%90%88/"/>
    <id>www.number47.cn/2019/10/24/spring security学习（一）-spring boot 整合/</id>
    <published>2019-10-24T04:56:35.000Z</published>
    <updated>2019-10-13T17:14:19.504Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Spring-Security-一-Spring-Boot-整合"><a href="#Spring-Security-一-Spring-Boot-整合" class="headerlink" title="Spring Security(一)-Spring Boot 整合"></a>Spring Security(一)-Spring Boot 整合</h1><h2 id="创建spring-boot项目，引入spring-boot-start-security"><a href="#创建spring-boot项目，引入spring-boot-start-security" class="headerlink" title="创建spring boot项目，引入spring-boot-start-security"></a>创建spring boot项目，引入spring-boot-start-security</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">          &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">          &lt;artifactId&gt;spring-boot-starter-security&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h2 id="创建-spring-security的访问接口"><a href="#创建-spring-security的访问接口" class="headerlink" title="创建/spring-security的访问接口"></a>创建/spring-security的访问接口</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoController</span> </span>&#123;</span><br><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"spring-security"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"hello spring security"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="表单认证"><a href="#表单认证" class="headerlink" title="表单认证"></a>表单认证</h2><p>创建配置类WebSecurityConfig继承<code>WebSecurityConfigurerAdapter</code>,<code>WebSecurityConfigurerAdapter</code>是由Spring Security提供的Web应用安全配置的适配器。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebSecurity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebSecurityConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">http.formLogin() <span class="comment">// 表单方式</span></span><br><span class="line">.and()</span><br><span class="line">.authorizeRequests() </span><br><span class="line">.anyRequest()  <span class="comment">// 所有请求</span></span><br><span class="line">.authenticated(); <span class="comment">// 都需要认证</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="设置启动端口"><a href="#设置启动端口" class="headerlink" title="设置启动端口"></a>设置启动端口</h2><p>application.properties</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">server.port=8081</span><br></pre></td></tr></table></figure><p>启动程序，启动时控制台Using generated security password: 9aac6105-0752-4bf1-9f54-c247e94086ab，每次都不一样，这个为用户user的密码。<br>访问<a href="http://localhost:8080/spring-security" target="_blank" rel="noopener">http://localhost:8080/spring-security</a>，页面跳转到<a href="http://localhost:8080/login" target="_blank" rel="noopener">http://localhost:8080/login</a><br><img src="http://ww1.sinaimg.cn/large/a8a26f7cgy1g7x16jb1ylj20i709tmxe.jpg" alt="image.png"><br>登录后，访问到<a href="http://localhost:8080/spring-security" target="_blank" rel="noopener">http://localhost:8080/spring-security</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Spring-Security-一-Spring-Boot-整合&quot;&gt;&lt;a href=&quot;#Spring-Security-一-Spring-Boot-整合&quot; class=&quot;headerlink&quot; title=&quot;Spring Security(一)-Spring Bo
      
    
    </summary>
    
      <category term="Spring Security" scheme="www.number47.cn/categories/Spring-Security/"/>
    
    
      <category term="Spring Security" scheme="www.number47.cn/tags/Spring-Security/"/>
    
  </entry>
  
  <entry>
    <title>spring security</title>
    <link href="www.number47.cn/2019/10/24/Spring%20Security/"/>
    <id>www.number47.cn/2019/10/24/Spring Security/</id>
    <published>2019-10-24T04:56:35.000Z</published>
    <updated>2019-10-13T16:58:11.599Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Spring-Security"><a href="#Spring-Security" class="headerlink" title="Spring Security"></a>Spring Security</h1><h2 id="核心功能"><a href="#核心功能" class="headerlink" title="核心功能"></a>核心功能</h2><ol><li>认证（你是谁）</li><li>授权（你能干什么）</li><li>攻击防护（防止伪造身份）</li></ol><h2 id="基本原理"><a href="#基本原理" class="headerlink" title="基本原理"></a>基本原理</h2><p><img src="https://ws1.sinaimg.cn/large/a8a26f7cgy1g6dlcukl6rj20yq0a777q.jpg" alt></p><h2 id="用户名-密码"><a href="#用户名-密码" class="headerlink" title="用户名+密码"></a>用户名+密码</h2><h2 id="手机号-短信认证"><a href="#手机号-短信认证" class="headerlink" title="手机号+短信认证"></a>手机号+短信认证</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Spring-Security&quot;&gt;&lt;a href=&quot;#Spring-Security&quot; class=&quot;headerlink&quot; title=&quot;Spring Security&quot;&gt;&lt;/a&gt;Spring Security&lt;/h1&gt;&lt;h2 id=&quot;核心功能&quot;&gt;&lt;a href
      
    
    </summary>
    
      <category term="Spring Security" scheme="www.number47.cn/categories/Spring-Security/"/>
    
    
      <category term="Spring Security" scheme="www.number47.cn/tags/Spring-Security/"/>
    
  </entry>
  
  <entry>
    <title>spring security 学习(二)-自定义登录页登录与退出</title>
    <link href="www.number47.cn/2019/10/24/Spring%20Security(%E4%BA%8C)-%E8%87%AA%E5%AE%9A%E4%B9%89%E7%99%BB%E5%BD%95%E9%A1%B5%E7%99%BB%E5%BD%95%E4%B8%8E%E9%80%80%E5%87%BA/"/>
    <id>www.number47.cn/2019/10/24/Spring Security(二)-自定义登录页登录与退出/</id>
    <published>2019-10-24T04:56:35.000Z</published>
    <updated>2019-10-13T18:07:30.731Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Spring-Security-二-自定义登录页登录与退出"><a href="#Spring-Security-二-自定义登录页登录与退出" class="headerlink" title="Spring Security(二)-自定义登录页登录与退出"></a>Spring Security(二)-自定义登录页登录与退出</h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Spring-Security-二-自定义登录页登录与退出&quot;&gt;&lt;a href=&quot;#Spring-Security-二-自定义登录页登录与退出&quot; class=&quot;headerlink&quot; title=&quot;Spring Security(二)-自定义登录页登录与退出&quot;&gt;&lt;/
      
    
    </summary>
    
      <category term="Spring Security" scheme="www.number47.cn/categories/Spring-Security/"/>
    
    
      <category term="Spring Security" scheme="www.number47.cn/tags/Spring-Security/"/>
    
  </entry>
  
  <entry>
    <title>Rest API的拦截</title>
    <link href="www.number47.cn/2019/08/18/Rest%20API%E7%9A%84%E6%8B%A6%E6%88%AA/"/>
    <id>www.number47.cn/2019/08/18/Rest API的拦截/</id>
    <published>2019-08-18T15:58:17.411Z</published>
    <updated>2019-10-13T17:02:34.719Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Rest-API的拦截"><a href="#Rest-API的拦截" class="headerlink" title="Rest API的拦截"></a>Rest API的拦截</h1><h2 id="拦截顺序"><a href="#拦截顺序" class="headerlink" title="拦截顺序"></a>拦截顺序</h2><p>filter-&gt;Interceptor-&gt;Aspect</p><h2 id="异常捕获顺序"><a href="#异常捕获顺序" class="headerlink" title="异常捕获顺序"></a>异常捕获顺序</h2><p>Aspect-&gt;ControllerAdvice-&gt;Inteceptor-&gt;filter</p><p><img src="https://ws1.sinaimg.cn/large/a8a26f7cgy1g64bpl7z8qj20dt0cb761.jpg" alt></p><h2 id="过滤器（Filter）"><a href="#过滤器（Filter）" class="headerlink" title="过滤器（Filter）"></a>过滤器（Filter）</h2><p>可以获取到原始http请求和响应的信息，但是取不到处理方法的信息</p><h3 id="自定义Filter-spring-boot添加-Component"><a href="#自定义Filter-spring-boot添加-Component" class="headerlink" title="自定义Filter spring boot添加@Component"></a>自定义Filter spring boot添加@Component</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.number47.com.number47.filter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> number47</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/8/18 23:44</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> Rest API filter</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TimeFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"time filter init"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"time filter start"</span>);</span><br><span class="line"><span class="keyword">long</span> start = <span class="keyword">new</span> Date().getTime();</span><br><span class="line">filterChain.doFilter(servletRequest,servletResponse);</span><br><span class="line">System.out.println(<span class="string">"time filter："</span> + (<span class="keyword">new</span> Date().getTime()-start));</span><br><span class="line">System.out.println(<span class="string">"time filter finish"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"time filter destroy"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="加入第三方Filter-spring-boot"><a href="#加入第三方Filter-spring-boot" class="headerlink" title="加入第三方Filter spring boot"></a>加入第三方Filter spring boot</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">package com.number47.com.number47.config;</span><br><span class="line"></span><br><span class="line">import com.number47.com.number47.filter.TimeFilter;</span><br><span class="line">import org.springframework.boot.web.servlet.FilterRegistrationBean;</span><br><span class="line">import org.springframework.context.annotation.Bean;</span><br><span class="line"></span><br><span class="line">import java.util.ArrayList;</span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @author number47</span><br><span class="line"> * @date 2019/8/18 23:53</span><br><span class="line"> * @description</span><br><span class="line"> */</span><br><span class="line">@Configuration</span><br><span class="line">public class WebConfig &#123;</span><br><span class="line">   </span><br><span class="line">   @Bean</span><br><span class="line">   public FilterRegistrationBean timeFilter()&#123;</span><br><span class="line">      FilterRegistrationBean registrationBean = new FilterRegistrationBean();</span><br><span class="line">      TimeFilter timeFilter = new TimeFilter();</span><br><span class="line">      registrationBean.setFilter(timeFilter);</span><br><span class="line">      List&lt;String&gt; urls = new ArrayList&lt;&gt;();</span><br><span class="line">      urls.add(&quot;/*&quot;);</span><br><span class="line">      registrationBean.setUrlPatterns(urls);</span><br><span class="line">      return registrationBean;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="拦截器-Interceptor"><a href="#拦截器-Interceptor" class="headerlink" title="拦截器(Interceptor)"></a>拦截器(Interceptor)</h1><p>可以获取到原始http请求和响应的信息，可以获取处理方法的信息，但是获取不到参数的值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.number47.com.number47.interceptor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.method.HandlerMethod;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.HandlerInterceptor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.ModelAndView;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> number47</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/8/19 00:01</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TimeInterceptor</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span> </span>&#123;</span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * controller 之前调用</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> httpServletRequest</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> httpServletResponse</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> handle</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">    * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object handle)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">      System.out.println(<span class="string">"preHandle"</span>);</span><br><span class="line">      System.out.println(((HandlerMethod)handle).getBean().getClass().getName());</span><br><span class="line">      System.out.println(((HandlerMethod)handle).getMethod().getName());</span><br><span class="line">      httpServletRequest.setAttribute(<span class="string">"startTime"</span>,<span class="keyword">new</span> Date().getTime());</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * controller 方法处理之后调用，如果controller抛出异常，这个方法不会调用</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> httpServletRequest</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> httpServletResponse</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> o</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> modelAndView</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postHandle</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object o, ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">      System.out.println(<span class="string">"postHandle"</span>);</span><br><span class="line">      Long start = (Long)httpServletRequest.getAttribute(<span class="string">"startTime"</span>);</span><br><span class="line">      System.out.println(<span class="string">"time interceptor 耗时："</span> + (<span class="keyword">new</span> Date().getTime() - start));</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * controller 无论是正常还是抛出异常都会调用</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> httpServletRequest</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> httpServletResponse</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> o</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> e</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterCompletion</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object o, Exception e)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">      System.out.println(<span class="string">"afterCompletion"</span>);</span><br><span class="line">      Long start = (Long)httpServletRequest.getAttribute(<span class="string">"startTime"</span>);</span><br><span class="line">      System.out.println(<span class="string">"time interceptor 耗时："</span> + (<span class="keyword">new</span> Date().getTime() - start));</span><br><span class="line">      System.out.println(<span class="string">"exception is "</span> + e);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.number47.com.number47.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.number47.com.number47.filter.TimeFilter;</span><br><span class="line"><span class="keyword">import</span> com.number47.com.number47.interceptor.TimeInterceptor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.web.servlet.FilterRegistrationBean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.InterceptorRegistry;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurerAdapter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> number47</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/8/18 23:53</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebConfig</span> <span class="keyword">extends</span> <span class="title">WebMvcConfigurerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Autowired</span></span><br><span class="line">   <span class="keyword">private</span> TimeInterceptor timeInterceptor;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> </span>&#123;</span><br><span class="line">      registry.addInterceptor(timeInterceptor);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="切片-Aspect"><a href="#切片-Aspect" class="headerlink" title="切片(Aspect)"></a>切片(Aspect)</h1><p>获取不到原始http请求和响应的信息，可以获取参数的值</p><h4 id="Spring-Aop简介"><a href="#Spring-Aop简介" class="headerlink" title="Spring Aop简介"></a>Spring Aop简介</h4><p><img src="https://ws1.sinaimg.cn/large/a8a26f7cgy1g64an6t14gj20pi0c7wik.jpg" alt></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">package com.number47.aspect;</span><br><span class="line"></span><br><span class="line">import org.aspectj.lang.ProceedingJoinPoint;</span><br><span class="line">import org.aspectj.lang.annotation.*;</span><br><span class="line">import org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line">import java.util.Date;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @author number47</span><br><span class="line"> * @date 2019/8/19 00:29</span><br><span class="line"> * @description</span><br><span class="line"> */</span><br><span class="line">@Aspect</span><br><span class="line">@Component</span><br><span class="line">public class TimeAspect &#123;</span><br><span class="line"></span><br><span class="line">@Before(value = &quot;execution(* com.number47.web.controller.UserController.*(..))&quot;)</span><br><span class="line">public void before()&#123;</span><br><span class="line">System.out.println(&quot;方法调用之前&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@After(value = &quot;execution(* com.number47.web.controller.UserController.*(..))&quot;)</span><br><span class="line">public void after()&#123;</span><br><span class="line">System.out.println(&quot;方法调用之后&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@AfterThrowing(value = &quot;execution(* com.number47.web.controller.UserController.*(..))&quot;)</span><br><span class="line">public void afterThrowing()&#123;</span><br><span class="line">System.out.println(&quot;方法异常调用之后&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Around(value = &quot;execution(* com.number47.web.controller.UserController.*(..))&quot;)</span><br><span class="line">public Object around(ProceedingJoinPoint proceedingJoinPoint) throws Throwable &#123;</span><br><span class="line">System.out.println(&quot;time aspect start&quot;);</span><br><span class="line">long start = new Date().getTime();</span><br><span class="line">Object object = proceedingJoinPoint.proceed();</span><br><span class="line">Object[] args = proceedingJoinPoint.getArgs();</span><br><span class="line">for (Object arg: args)&#123;</span><br><span class="line">System.out.println(&quot;arg is &quot; + arg);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(&quot;time aspect：&quot; + (new Date().getTime()-start));</span><br><span class="line">System.out.println(&quot;包含上面所有情况&quot;);</span><br><span class="line">System.out.println(&quot;time aspect end&quot;);</span><br><span class="line">return object;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Rest-API的拦截&quot;&gt;&lt;a href=&quot;#Rest-API的拦截&quot; class=&quot;headerlink&quot; title=&quot;Rest API的拦截&quot;&gt;&lt;/a&gt;Rest API的拦截&lt;/h1&gt;&lt;h2 id=&quot;拦截顺序&quot;&gt;&lt;a href=&quot;#拦截顺序&quot; class=&quot;
      
    
    </summary>
    
    
      <category term="Rest" scheme="www.number47.cn/tags/Rest/"/>
    
  </entry>
  
  <entry>
    <title>Hibernate Validator</title>
    <link href="www.number47.cn/2019/08/03/Hibernate%20Validator/"/>
    <id>www.number47.cn/2019/08/03/Hibernate Validator/</id>
    <published>2019-08-03T14:39:59.614Z</published>
    <updated>2019-10-13T17:01:07.715Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Hibernate-Validator"><a href="#Hibernate-Validator" class="headerlink" title="Hibernate Validator"></a>Hibernate Validator</h1><table><thead><tr><th>注解</th><th>作用</th></tr></thead><tbody><tr><td>@Null</td><td>值必须为空</td></tr><tr><td>@Pattern(regex=)</td><td>字符串必须匹配正则表达式</td></tr><tr><td>@Size(min=,max=)</td><td>集合的元素数量必须在min和max之间</td></tr><tr><td>@CreditCardNumber(ignoreNonDigitCharacters)</td><td>字符串必须是信用卡号（按美国的标准验证的）</td></tr><tr><td>@Email</td><td>字符串必须是Email地址</td></tr><tr><td>@Length(min=,max=)</td><td>检查字符串的长度</td></tr><tr><td>@NotBlank</td><td>字符串必须有字符</td></tr><tr><td>@NotEmpty</td><td>字符串不为null,集合有元素</td></tr><tr><td>@Range(min=,max=)</td><td>数字必须大于等于min,小于等于max</td></tr><tr><td>@SafeHtml</td><td>字符串是安全的html</td></tr><tr><td>@URL</td><td>字符串是合法的URL</td></tr><tr><td>@NotNull</td><td>值不能为空</td></tr><tr><td>@AssertFalse</td><td>值必须为false</td></tr><tr><td>@AssertTrue</td><td>值必须为true</td></tr><tr><td>@DecimalMax(value=,inclusive=)</td><td>值必须小于等于（inclusive=true）/小于（inclusive=false）value属指定的值，可以注解在字符串类型的属性上</td></tr><tr><td>@DecimalMin(value=,inclusive=)</td><td>值必须大于等于（inclusive=true）/大于（inclusive=false）value属指定的值，可以注解在字符串类型的属性上</td></tr><tr><td>@Digits(integer=,fraction=)</td><td>数字格式检查。integer指定整数部分的最大长度，fraction指定小数部分的最大长度</td></tr><tr><td>@Future</td><td>值必须是未来的日期</td></tr><tr><td>@Past</td><td>值必须是过去的日期</td></tr><tr><td>@Max(value=)</td><td>值必须小于等于value指定的值。不能注解在字符串类型的属性上。</td></tr><tr><td>@Min(value=)</td><td>值必须大于等于value指定的值。不能注解在字符串类型的属性上。</td></tr><tr><td></td><td></td></tr></tbody></table><h2 id="通过-Valid-BindingResult使用校验-JsonView指定属性的显示"><a href="#通过-Valid-BindingResult使用校验-JsonView指定属性的显示" class="headerlink" title="通过@Valid,BindingResult使用校验/@JsonView指定属性的显示"></a>通过@Valid,BindingResult使用校验/@JsonView指定属性的显示</h2><p>Public class User{</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public interface UserSimpleView&#123;&#125;;</span><br><span class="line"></span><br><span class="line">public interface UserDetailView extends UserSimpleView&#123;&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@NotBlank</span>校验不为空</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"><span class="meta">@NotBlank</span></span><br><span class="line"><span class="keyword">private</span> String password;</span><br><span class="line"><span class="keyword">private</span> String userName;</span><br><span class="line"></span><br><span class="line"><span class="meta">@JsonView</span>(UserSimpleView.class)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getUserName</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> userName;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserName</span><span class="params">(String userName)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.userName = userName;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@JsonView</span>(UserDetailView.class)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getPassword</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> password;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPassword</span><span class="params">(String password)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.password = password;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>}</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/user"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@PostMapping</span></span><br><span class="line"><span class="meta">@JsonView</span>(User.UserSimpleView.class) <span class="comment">//显示名称</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">userCreate</span><span class="params">(@Valid @RequestBody User user, BindingResult errors)</span></span>&#123;</span><br><span class="line"><span class="comment">//捕获没有通过校验的错误</span></span><br><span class="line"><span class="keyword">if</span> (errors.hasErrors())&#123;</span><br><span class="line">errors.getAllErrors().stream().forEach(error -&gt; System.out.println(error.getDefaultMessage()));</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(user.getId());</span><br><span class="line">System.out.println(user.getUserName());</span><br><span class="line">System.out.println(user.getPassword());</span><br><span class="line">System.out.println(user.getBirthDay());</span><br><span class="line">user.setId(<span class="string">"1"</span>);</span><br><span class="line"><span class="keyword">return</span> user;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> userId 通过正则表达式 只能接受数字</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/&#123;id:\\d+&#125;"</span>)</span><br><span class="line"><span class="meta">@JsonView</span>(User.UserDetailView.class) <span class="comment">//显示名称和密码</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">getInfo</span><span class="params">(@PathVariable(name = <span class="string">"id"</span>)</span> String userId)</span>&#123;</span><br><span class="line">User user = <span class="keyword">new</span> User();</span><br><span class="line">user.setUserName(<span class="string">"JOJO"</span>);</span><br><span class="line"><span class="keyword">return</span> user;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Hibernate-Validator&quot;&gt;&lt;a href=&quot;#Hibernate-Validator&quot; class=&quot;headerlink&quot; title=&quot;Hibernate Validator&quot;&gt;&lt;/a&gt;Hibernate Validator&lt;/h1&gt;&lt;tabl
      
    
    </summary>
    
      <category term="Hibernate Validator" scheme="www.number47.cn/categories/Hibernate-Validator/"/>
    
    
      <category term="Hibernate Validator" scheme="www.number47.cn/tags/Hibernate-Validator/"/>
    
  </entry>
  
  <entry>
    <title>导入import com.sun.rowset.CachedRowSetImpl，报错</title>
    <link href="www.number47.cn/2018/01/10/%E5%AF%BC%E5%85%A5CachedRowSetlmpl%E6%8A%A5%E9%94%99/"/>
    <id>www.number47.cn/2018/01/10/导入CachedRowSetlmpl报错/</id>
    <published>2018-01-10T04:56:00.000Z</published>
    <updated>2019-07-08T18:36:48.232Z</updated>
    
    <content type="html"><![CDATA[<h2 id="报错内容"><a href="#报错内容" class="headerlink" title="报错内容"></a>报错内容</h2><p>Access restriction: The type CachedRowSetImpl is not accessible due to restriction on required library C:\glassfish3\jdk7\jre\lib\rt.jar</p><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>项目右键project build path中先移除JRE System Library，再添加库JRE System Library，之后就可以了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;报错内容&quot;&gt;&lt;a href=&quot;#报错内容&quot; class=&quot;headerlink&quot; title=&quot;报错内容&quot;&gt;&lt;/a&gt;报错内容&lt;/h2&gt;&lt;p&gt;Access restriction: The type CachedRowSetImpl is not accessibl
      
    
    </summary>
    
      <category term="Java" scheme="www.number47.cn/categories/Java/"/>
    
    
      <category term="JAVA Web问题" scheme="www.number47.cn/tags/JAVA-Web%E9%97%AE%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>Servlet</title>
    <link href="www.number47.cn/2018/01/07/Servlet/"/>
    <id>www.number47.cn/2018/01/07/Servlet/</id>
    <published>2018-01-06T16:00:00.000Z</published>
    <updated>2019-05-25T05:38:39.579Z</updated>
    
    <content type="html"><![CDATA[<h2 id="doGet"><a href="#doGet" class="headerlink" title="doGet()"></a>doGet()</h2><p>当浏览器使用get方式提交数据的时候，servlet需要提供doGet()方法。<br><strong>哪些是get方式呢？</strong></p><ul><li>form默认的提交方式</li><li>如果通过一个超链访问某个地址</li><li>如果在地址栏直接输入某个地址</li><li>ajax指定使用get方式的时候<h2 id="doPost"><a href="#doPost" class="headerlink" title="doPost()"></a>doPost()</h2>当浏览器使用post方式提交数据的时候，servlet需要提供doPost()方法</li></ul><p><strong>哪些是post方式呢？</strong></p><ul><li>在form上显示设置 method=”post”的时候</li><li>ajax指定post方式的时候<h2 id="service"><a href="#service" class="headerlink" title="service()"></a>service()</h2>在执行doGet()或者doPost()之前，都会先执行service()。<br>由service()方法进行判断，到底该调用doGet()还是doPost()。<br>可以发现，service(), doGet(), doPost() 三种方式的参数列表都是一样的。<br>所以，有时候也会直接重写service()方法，在其中提供相应的服务，就不用区分到底是get还是post了。</li></ul><h2 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h2><p>一个Servlet的生命周期由 实例化，初始化，提供服务，销毁，被回收几个步骤组成。</p><h2 id="request"><a href="#request" class="headerlink" title="request"></a>request</h2><p>request对象的类是HttpServletRequest，提供了很多有实用价值的方法。</p><h3 id="request常见方法"><a href="#request常见方法" class="headerlink" title="request常见方法"></a>request常见方法</h3><p>request.getRequestURL(): 浏览器发出请求时的完整URL，包括协议 主机名 端口(如果有)”<br>request.getRequestURI(): 浏览器发出请求的资源名部分，去掉了协议和主机名” +<br>request.getQueryString(): 请求行中的参数部分，只能显示以get方式发出的参数，post方式的看不到<br>request.getRemoteAddr(): 浏览器所处于的客户机的IP地址<br>request.getRemoteHost(): 浏览器所处于的客户机的主机名<br>request.getRemotePort(): 浏览器所处于的客户机使用的网络端口<br>request.getLocalAddr(): 服务器的IP地址<br>request.getLocalName(): 服务器的主机名<br>request.getMethod(): 得到客户机请求方式一般是GET或者POST。</p><h3 id="获取参数"><a href="#获取参数" class="headerlink" title="获取参数"></a>获取参数</h3><p>request.getParameter(): 是常见的方法，用于获取单值的参数<br>request.getParameterValues(): 用于获取具有多值得参数，比如注册的时候提交的爱好，可以使多选的。<br>request.getParameterMap(): 用于遍历所有的参数，并返回Map类型。</p><h3 id="获取头信息"><a href="#获取头信息" class="headerlink" title="获取头信息"></a>获取头信息</h3><p>request.getHeader() 获取浏览器传递过来的头信息。<br>比如getHeader(“user-agent”) 可以获取浏览器的基本资料，这样就能判断是firefox、IE、chrome、或者是safari浏览器<br>request.getHeaderNames() 获取浏览器所有的头信息名称，根据头信息名称就能遍历出所有的头信息。</p><h2 id="response"><a href="#response" class="headerlink" title="response"></a>response</h2><p>response是HttpServletResponse的实例，用于提供给浏览器的响应信息。</p><h3 id="设置响应内容"><a href="#设置响应内容" class="headerlink" title="设置响应内容"></a>设置响应内容</h3><p>response.getWriter()</p><p>通过response.getWriter(); 获取一个PrintWriter 对象。<br>可以使用println(),append(),write(),format()等等方法设置返回给浏览器的html内容。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;doGet&quot;&gt;&lt;a href=&quot;#doGet&quot; class=&quot;headerlink&quot; title=&quot;doGet()&quot;&gt;&lt;/a&gt;doGet()&lt;/h2&gt;&lt;p&gt;当浏览器使用get方式提交数据的时候，servlet需要提供doGet()方法。&lt;br&gt;&lt;strong&gt;哪些
      
    
    </summary>
    
      <category term="Java_Web" scheme="www.number47.cn/categories/Java-Web/"/>
    
    
      <category term="Servlet" scheme="www.number47.cn/tags/Servlet/"/>
    
  </entry>
  
  <entry>
    <title>IO流</title>
    <link href="www.number47.cn/2018/01/02/%E7%90%86%E8%A7%A3IO%E6%B5%81/"/>
    <id>www.number47.cn/2018/01/02/理解IO流/</id>
    <published>2018-01-02T04:56:00.000Z</published>
    <updated>2019-05-25T05:38:39.584Z</updated>
    
    <content type="html"><![CDATA[<h2 id="流的分类"><a href="#流的分类" class="headerlink" title="流的分类"></a>流的分类</h2><h3 id="按流的流向"><a href="#按流的流向" class="headerlink" title="按流的流向"></a>按流的流向</h3><p>输入流：只能从中读取数据，而不能向其写入数据。</p><p>输出流：只能从中写入数据，而不能向其读取数据。</p><h3 id="按操作数据分类"><a href="#按操作数据分类" class="headerlink" title="按操作数据分类"></a>按操作数据分类</h3><p>字符流：数据单元16位的字符。Reader和Writer作为基类。</p><p>字节流：数据单元8位的字节。InputStream和OutputStream作为基类。</p><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;流的分类&quot;&gt;&lt;a href=&quot;#流的分类&quot; class=&quot;headerlink&quot; title=&quot;流的分类&quot;&gt;&lt;/a&gt;流的分类&lt;/h2&gt;&lt;h3 id=&quot;按流的流向&quot;&gt;&lt;a href=&quot;#按流的流向&quot; class=&quot;headerlink&quot; title=&quot;按流的流向&quot;&gt;&lt;/a&gt;按流的流向&lt;/h3&gt;&lt;p&gt;输入流：只能从中读取数据，而不能向其写入数据。&lt;/p&gt;
&lt;p&gt;输出流：只能从中写入数据，而不能向其读取数据。&lt;/p&gt;
&lt;h3 id=&quot;按操作数据分类&quot;&gt;&lt;a href=&quot;#按操作数据分类&quot; class=&quot;headerlink&quot; title=&quot;按操作数据分类&quot;&gt;&lt;/a&gt;按操作数据分类&lt;/h3&gt;&lt;p&gt;字符流：数据单元16位的字符。Reader和Writer作为基类。&lt;/p&gt;
&lt;p&gt;字节流：数据单元8位的字节。InputStream和OutputStream作为基类。&lt;/p&gt;
    
    </summary>
    
      <category term="Java" scheme="www.number47.cn/categories/Java/"/>
    
    
      <category term="Java基础" scheme="www.number47.cn/tags/Java%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>IO流——File类</title>
    <link href="www.number47.cn/2018/01/01/IO%E2%80%94File%E7%B1%BB/"/>
    <id>www.number47.cn/2018/01/01/IO—File类/</id>
    <published>2018-01-01T04:56:00.000Z</published>
    <updated>2019-05-25T05:38:39.533Z</updated>
    
    <content type="html"><![CDATA[<h2 id="File类"><a href="#File类" class="headerlink" title="File类"></a>File类</h2><h3 id="创建文件对象"><a href="#创建文件对象" class="headerlink" title="创建文件对象"></a>创建文件对象</h3><p><strong>注：</strong>只是创建File对象，以下程序并不会在文件系统中创建这些目录或文件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">package io;</span><br><span class="line">import java.io.File;</span><br><span class="line">public class CreateFile &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">// 绝对路径</span><br><span class="line">        File f1 = new File(&quot;d:/TestFolder&quot;);</span><br><span class="line">        System.out.println(&quot;f1的绝对路径：&quot; + f1.getAbsolutePath());</span><br><span class="line">        // 相对路径,相对于工作目录，如果在eclipse中，就是项目目录</span><br><span class="line">        File f2 = new File(&quot;text.exe&quot;);</span><br><span class="line">        System.out.println(&quot;f2的绝对路径：&quot; + f2.getAbsolutePath());</span><br><span class="line">        // 把f1作为父目录创建文件对象</span><br><span class="line">        File f3 = new File(f1, &quot;text.exe&quot;);</span><br><span class="line">        System.out.println(&quot;f3的绝对路径：&quot; + f3.getAbsolutePath());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><p>运行结果如下：</p><p><img src="/images/img-%E5%88%9B%E5%BB%BAFile%E5%AF%B9%E8%B1%A1.png" alt="img-创建File对象"></p><h2 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h2><h3 id="访问文件名相关的方法"><a href="#访问文件名相关的方法" class="headerlink" title="访问文件名相关的方法"></a>访问文件名相关的方法</h3><ul><li><p>String getName()：返回此File对象所表示的文件名或路径名（如果是路径，则返回最后一级子路径名）。</p></li><li><p>String getPath()：返回此File对象所对应的路径名。</p></li><li><p>File getAbsoluteFile()：返回此File对象的绝对路径。</p></li><li><p>String getAbsolutePath()：返回此File对象所对应的绝对路径名。</p></li><li><p>String getParent()：返回此File对象所对应目录（最后一级子目录）的父目录名。</p></li><li><p>boolean ranameTo(File newName)：重命名此File对象所对应的文件或目录。</p></li></ul><h3 id="文件检测相关的方法"><a href="#文件检测相关的方法" class="headerlink" title="文件检测相关的方法"></a>文件检测相关的方法</h3><ul><li>boolean exists()：判断File对象所对应的文件或目录是否存在。</li><li>boolean canWrite()：判断File对象所对应的文件或目录是否可写。</li><li>boolean canRead()：判断File对象所对应的文件或目录是否可读。</li><li>boolean isFile()：判断File对象所对应的是文件，而不是目录。</li><li>boolean isDirectory()：判断File对象所对应的是否是目录，而不是文件。</li></ul><h2 id="获取常规文件信息"><a href="#获取常规文件信息" class="headerlink" title="获取常规文件信息"></a>获取常规文件信息</h2><ul><li>long lastModified()：返回文件的最后修改时间。</li><li>long length()：返回文件内容的长度。</li><li>boolean setLastModified(long time)：设置文件或目录的最后修改时间。 </li></ul><h2 id="文件操作相关的方法"><a href="#文件操作相关的方法" class="headerlink" title="文件操作相关的方法"></a>文件操作相关的方法</h2><ul><li>boolean creatNewFile()：当此FIle对象所对应的文件不存在时，该方法将新建一个该File对象所指定的新文件。</li><li>boolean delete()：删除File对象所对应的文件或路径。</li></ul><p>##目录操作相关的方法</p><ul><li>boolean mkdir()：创建一个File对象所对应的目录。</li><li>boolean mkdirs()：创建此抽象路径名指定的目录，包括所有必需但不存在的父目录。</li><li>String[] list()：列出File对象的所有子文件名和路径名，返回String数组。</li><li>File[] listFiles()：列出File对象的所有子文件名和路径名，返回File数组。</li><li>static File[] listRoot()：列出系统所有根路径。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;File类&quot;&gt;&lt;a href=&quot;#File类&quot; class=&quot;headerlink&quot; title=&quot;File类&quot;&gt;&lt;/a&gt;File类&lt;/h2&gt;&lt;h3 id=&quot;创建文件对象&quot;&gt;&lt;a href=&quot;#创建文件对象&quot; class=&quot;headerlink&quot; title=&quot;创建文件对象&quot;&gt;&lt;/a&gt;创建文件对象&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;注：&lt;/strong&gt;只是创建File对象，以下程序并不会在文件系统中创建这些目录或文件。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;package io;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;import java.io.File;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;public class CreateFile &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	public static void main(String[] args) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		// 绝对路径&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        File f1 = new File(&amp;quot;d:/TestFolder&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        System.out.println(&amp;quot;f1的绝对路径：&amp;quot; + f1.getAbsolutePath());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        // 相对路径,相对于工作目录，如果在eclipse中，就是项目目录&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        File f2 = new File(&amp;quot;text.exe&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        System.out.println(&amp;quot;f2的绝对路径：&amp;quot; + f2.getAbsolutePath());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        // 把f1作为父目录创建文件对象&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        File f3 = new File(f1, &amp;quot;text.exe&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        System.out.println(&amp;quot;f3的绝对路径：&amp;quot; + f3.getAbsolutePath());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Java" scheme="www.number47.cn/categories/Java/"/>
    
    
      <category term="Java基础" scheme="www.number47.cn/tags/Java%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>SQL基本概念</title>
    <link href="www.number47.cn/2017/12/10/SQL%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/"/>
    <id>www.number47.cn/2017/12/10/SQL基本概念/</id>
    <published>2017-12-10T04:56:35.000Z</published>
    <updated>2019-05-25T05:38:39.537Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><h2 id="DBMS（数据库管理系统）"><a href="#DBMS（数据库管理系统）" class="headerlink" title="DBMS（数据库管理系统）"></a>DBMS（数据库管理系统）</h2><p><strong>数据库管理系统</strong>，数据被保存在数据库中，这种机制叫做数据库管理系统。</p><p><strong>RDBMS:</strong>关系型数据库管理系统。</p><h2 id="DBA（数据库管理员）"><a href="#DBA（数据库管理员）" class="headerlink" title="DBA（数据库管理员）"></a>DBA（数据库管理员）</h2><p><strong>数据库管理员</strong></p><h2 id="DBS-数据库系统"><a href="#DBS-数据库系统" class="headerlink" title="DBS(数据库系统)"></a>DBS(数据库系统)</h2><p>由数据库、数据库管理系统（及其应用的开发工具）、应用数据和DBA组成的存储、管理、处理和维护数据的系统。</p><h2 id="SQL"><a href="#SQL" class="headerlink" title="SQL"></a>SQL</h2><p><strong>结构化查询语句</strong>是与关系型数据库进行通信的标准语言。<a id="more"></a></p><h2 id="SQL会话"><a href="#SQL会话" class="headerlink" title="SQL会话"></a>SQL会话</h2><p>用户利用SQL命令与关系型数据库进行交互时发生的事情。当用户与数据库建立连接时，会话就被建立了。会话可以通过直接与数据库建立链接来申请，也可以通过前端程序来申请。无论何种情况，会话通常是由通过网络访问数据库的用户在终端或工作站建立的。</p><h2 id="CONNECT"><a href="#CONNECT" class="headerlink" title="CONNECT"></a>CONNECT</h2><p>命令<strong>CONNECT</strong>用于建立与数据库的连接，它可以申请连接,也可以修改连接。当用户连接到数据库时，SQL会话就被初始化了。</p><p>命令如下</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CONNECT user@database</span><br></pre></td></tr></table></figure><h2 id="DISCONNECT-NEXT"><a href="#DISCONNECT-NEXT" class="headerlink" title="DISCONNECT/NEXT"></a>DISCONNECT/NEXT</h2><p>命令<strong>DISCONNECT</strong>用于断开用户与数据库的连接。当用户连接到数据库时，SQL会话就被结束了。</p><p>当使用<strong>EXIT</strong>命令离开数据库时，SQL会话就结束了，而且用于访问数据库的软件通常会关闭。</p><h2 id="SQL命令的类型"><a href="#SQL命令的类型" class="headerlink" title="SQL命令的类型"></a>SQL命令的类型</h2><h3 id="DDL—数据库定义语言"><a href="#DDL—数据库定义语言" class="headerlink" title="DDL—数据库定义语言"></a>DDL—数据库定义语言</h3><p><strong>DDL</strong>用于创建和重构数据库对象。</p><p>基本的DDL命令：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">INDEX</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">INDEX</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">INDEX</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">VIEW</span></span><br></pre></td></tr></table></figure><h3 id="DML—数据库操作语言"><a href="#DML—数据库操作语言" class="headerlink" title="DML—数据库操作语言"></a>DML—数据库操作语言</h3><p><strong>DML</strong>用于操作关系型数据库对象内部的数据。</p><p>基本命令：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span></span><br><span class="line"><span class="keyword">UPDATE</span></span><br><span class="line"><span class="keyword">DELETE</span></span><br></pre></td></tr></table></figure><h3 id="DQL—数据查询语句"><a href="#DQL—数据查询语句" class="headerlink" title="DQL—数据查询语句"></a>DQL—数据查询语句</h3><p>基本命令<code>SELECT</code></p><h3 id="DCL—数据控制语言"><a href="#DCL—数据控制语言" class="headerlink" title="DCL—数据控制语言"></a>DCL—数据控制语言</h3><p><strong>DCL</strong>用于控制对数据库里数据的访问，通常用于创建与用户访问相关的对象，以及控制用户权限。</p><p>基本命令：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">PASSWORD</span></span><br><span class="line"><span class="keyword">GRANT</span></span><br><span class="line"><span class="keyword">REVOKE</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">SYNONYM</span></span><br></pre></td></tr></table></figure><h3 id="数据管理命令"><a href="#数据管理命令" class="headerlink" title="数据管理命令"></a>数据管理命令</h3><p>用于对数据库里的操作进行审计和分析，还有助于分析系统性能。</p><p>基本命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">START AUDIT</span><br><span class="line">STOP AUDIT</span><br></pre></td></tr></table></figure><h3 id="事务控制命令"><a href="#事务控制命令" class="headerlink" title="事务控制命令"></a>事务控制命令</h3><p>用于管理数据库事务</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">COMMIT</span> //保存数据库事务</span><br><span class="line"><span class="keyword">ROLLBACK</span> //撤销数据库事务</span><br><span class="line">SAVEPIONT //在一组事务里创建标记点以用于回退（<span class="keyword">ROLLBACK</span>）</span><br><span class="line"><span class="keyword">SET</span> <span class="keyword">TRANSACTION</span> //设置实物名称</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h2&gt;&lt;h2 id=&quot;DBMS（数据库管理系统）&quot;&gt;&lt;a href=&quot;#DBMS（数据库管理系统）&quot; class=&quot;headerlink&quot; title=&quot;DBMS（数据库管理系统）&quot;&gt;&lt;/a&gt;DBMS（数据库管理系统）&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;数据库管理系统&lt;/strong&gt;，数据被保存在数据库中，这种机制叫做数据库管理系统。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;RDBMS:&lt;/strong&gt;关系型数据库管理系统。&lt;/p&gt;
&lt;h2 id=&quot;DBA（数据库管理员）&quot;&gt;&lt;a href=&quot;#DBA（数据库管理员）&quot; class=&quot;headerlink&quot; title=&quot;DBA（数据库管理员）&quot;&gt;&lt;/a&gt;DBA（数据库管理员）&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;数据库管理员&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;DBS-数据库系统&quot;&gt;&lt;a href=&quot;#DBS-数据库系统&quot; class=&quot;headerlink&quot; title=&quot;DBS(数据库系统)&quot;&gt;&lt;/a&gt;DBS(数据库系统)&lt;/h2&gt;&lt;p&gt;由数据库、数据库管理系统（及其应用的开发工具）、应用数据和DBA组成的存储、管理、处理和维护数据的系统。&lt;/p&gt;
&lt;h2 id=&quot;SQL&quot;&gt;&lt;a href=&quot;#SQL&quot; class=&quot;headerlink&quot; title=&quot;SQL&quot;&gt;&lt;/a&gt;SQL&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;结构化查询语句&lt;/strong&gt;是与关系型数据库进行通信的标准语言。
    
    </summary>
    
      <category term="SQL" scheme="www.number47.cn/categories/SQL/"/>
    
    
      <category term="SQL入门经典" scheme="www.number47.cn/tags/SQL%E5%85%A5%E9%97%A8%E7%BB%8F%E5%85%B8/"/>
    
  </entry>
  
  <entry>
    <title>SQL数据库查询</title>
    <link href="www.number47.cn/2017/12/10/SQL%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9F%A5%E8%AF%A2/"/>
    <id>www.number47.cn/2017/12/10/SQL数据库查询/</id>
    <published>2017-12-10T04:56:35.000Z</published>
    <updated>2019-05-25T05:38:39.577Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Select语句"><a href="#Select语句" class="headerlink" title="Select语句"></a>Select语句</h2><p>数据库查询语句(DQL)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">select [* | distinct column1 , column2 ]</span><br><span class="line">from   table [,table2]</span><br><span class="line">where  [condition1 | expression1] [and | orcondition2 | expression2 ]</span><br><span class="line">order by column1 | integer [ASC升序 | DESC降序]</span><br></pre></td></tr></table></figure><p>distinct：在结果中去除重复的记录。<br>order by：输出结果以某种形式排序。默认升序asc<br><strong>order by可以使用整数代表字段</strong><a id="more"></a><br>eg:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">select *</span><br><span class="line">from products_tbl</span><br><span class="line">order by 1;</span><br><span class="line">//上面查询语句输出的会按照products_tbl的第一个字段进行升序排序。</span><br><span class="line">select *</span><br><span class="line">from products_tbl</span><br><span class="line">order by 1，2;</span><br><span class="line">//上面查询语句输出的会先对products_tbl的第一个字段进行升序排序，再对第二个字段进行升序排序。</span><br><span class="line">select *</span><br><span class="line">from products_tbl</span><br><span class="line">order by 1，2 desc;</span><br><span class="line">//上面查询语句输出的会先对products_tbl的第一个字段进行升序排序，再对第二个字段进行降序排序。</span><br></pre></td></tr></table></figure><h2 id="统计表里的记录数量COUNT"><a href="#统计表里的记录数量COUNT" class="headerlink" title="统计表里的记录数量COUNT()"></a>统计表里的记录数量COUNT()</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">select COUNT(*)</span><br><span class="line">from table_name;</span><br><span class="line">//查询table_name的表中有多少行数据</span><br><span class="line">如果统计的字段规定not null，那么统计结果和表里的数量相同</span><br><span class="line">如果统计字段规定可以null，那么就只统计有数据的数据。</span><br></pre></td></tr></table></figure><p>eg：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select COUNT(PROD_ID)</span><br><span class="line">from PRODUCTS_TBL;</span><br><span class="line">//统计PRODUCTS_TBL里字段PROD_ID的值的数量</span><br></pre></td></tr></table></figure><h2 id="使用字段别名"><a href="#使用字段别名" class="headerlink" title="使用字段别名"></a>使用字段别名</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select column_name alias_name(别名)</span><br><span class="line">from table_name</span><br></pre></td></tr></table></figure><p>eg:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select prod_desc, prod_desc product</span><br><span class="line">from products_tbl;</span><br></pre></td></tr></table></figure><p><img src="/images/img-sql%E5%AD%97%E6%AE%B5%E5%88%AB%E5%90%8D%E8%BE%93%E5%87%BA.png" alt="sql字段别名输出"></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Select语句&quot;&gt;&lt;a href=&quot;#Select语句&quot; class=&quot;headerlink&quot; title=&quot;Select语句&quot;&gt;&lt;/a&gt;Select语句&lt;/h2&gt;&lt;p&gt;数据库查询语句(DQL)&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;select [* | distinct column1 , column2 ]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;from   table [,table2]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;where  [condition1 | expression1] [and | orcondition2 | expression2 ]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;order by column1 | integer [ASC升序 | DESC降序]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;distinct：在结果中去除重复的记录。&lt;br&gt;order by：输出结果以某种形式排序。默认升序asc&lt;br&gt;&lt;strong&gt;order by可以使用整数代表字段&lt;/strong&gt;
    
    </summary>
    
      <category term="SQL" scheme="www.number47.cn/categories/SQL/"/>
    
    
      <category term="SQL入门经典" scheme="www.number47.cn/tags/SQL%E5%85%A5%E9%97%A8%E7%BB%8F%E5%85%B8/"/>
    
  </entry>
  
  <entry>
    <title>SQL管理数据库对象</title>
    <link href="www.number47.cn/2017/12/10/SQL%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AF%B9%E8%B1%A1/"/>
    <id>www.number47.cn/2017/12/10/SQL数据库对象/</id>
    <published>2017-12-10T04:56:35.000Z</published>
    <updated>2019-05-25T05:38:39.576Z</updated>
    
    <content type="html"><![CDATA[<h2 id="数据库对象"><a href="#数据库对象" class="headerlink" title="数据库对象"></a>数据库对象</h2><p>数据库里定义的、用于存储或是引用数据的对象，比如表、视图、簇、序列、索引和异名。</p><h2 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a>创建表</h2><p><strong>CREATE TABLE 命令</strong></p><p>使用方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE &lt;表名&gt;(</span><br><span class="line">&lt;列名&gt;  &lt;数据类型&gt;  [列级完整新约束],  //列级完整新约束 eg：primary key</span><br><span class="line">&lt;列名&gt;  &lt;数据类型&gt;  [列级完整新约束],  </span><br><span class="line">...</span><br><span class="line">[,&lt;表级完整性约束&gt;]</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>Eg:<a id="more"></a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE EMPLOYEE_TBL(</span><br><span class="line">EMP_ID       CHAR(9)       NOT NULL,</span><br><span class="line">EMP_NAME     VARCHAR(40)   NOT NULL,</span><br><span class="line">EMP_ST_ADDR  VARCHAR(20)   NOT NULL,</span><br><span class="line">EMP_CITY     VARCHAR(15)   NOT NULL,</span><br><span class="line">EMP_ST       CHAR(2)       NOT NULL,</span><br><span class="line">EMP_ZIP      INTEGER       NOT NULL,</span><br><span class="line">EMP_PHONE    INTEGER       NULL,</span><br><span class="line">EMP_PAGER    INTEGER       NULL</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h2 id="修改表"><a href="#修改表" class="headerlink" title="修改表"></a>修改表</h2><p><strong>ALTER TABLE 命令</strong></p><h3 id="修改表的列的属性"><a href="#修改表的列的属性" class="headerlink" title="修改表的列的属性"></a>修改表的列的属性</h3><p><strong>列的属性：</strong>数据类型、长度、有效位或标度、是否为空</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE &lt;表名&gt;</span><br><span class="line">ADD [COLUMN] &lt;新列名&gt;&lt;数据类型&gt;[完整新约束]</span><br><span class="line">ADD &lt;表级完整新约束&gt;</span><br><span class="line">DROP [COLUMN] &lt;列名&gt; [CASCADE|RESTRICT]</span><br><span class="line">DROP CONSTRAINT&lt;完整性约束名&gt; [RESTRICT|CASCADE]</span><br><span class="line">ALTER COLUMN &lt;列名&gt; &lt;数据类型&gt;</span><br></pre></td></tr></table></figure><p><strong>CASCADE：</strong>自动删除引用了该类的其他对象，如视图</p><p><strong>RESTRICT：</strong>如果该列被其他对象引用，RDBMS拒绝删除该列</p><p>Eg：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">//把EMP_ID的数据类型长度从9改为10.</span><br><span class="line">ALTER TABLE EMPLOYEE_TBL </span><br><span class="line">ALTER COLUMN EMP_ID VARCHAR(10);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//新增EMP_ENGLISH_NAME列</span><br><span class="line">ALTER TABLE EMPLOYEE_TBL</span><br><span class="line">ADD EMP_ENGLISH_NAME VARCHAR(20);</span><br><span class="line"></span><br><span class="line">//删除EMP_ENGLISH_NAME列</span><br><span class="line">ALTER TABLE EMPLOYEE_TBL</span><br><span class="line">DROP COLUMN EMP_ENGLISH_NAME;</span><br></pre></td></tr></table></figure><h4 id="添加自动增加的列"><a href="#添加自动增加的列" class="headerlink" title="添加自动增加的列"></a>添加自动增加的列</h4><p>使用IDENTITY类型</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE TEST_INCREMENT(</span><br><span class="line">  ID   INT  IDENTITY(1,1) NOT NULL, //(seed = 1,increment = 1) 從1開始,每次遞增1  </span><br><span class="line">  TEST_NAME VARCHAR(20)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>##删除表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DROP TABLE &lt;表名&gt; [CASCADE|RESTRICT];</span><br></pre></td></tr></table></figure><h2 id="完整性约束"><a href="#完整性约束" class="headerlink" title="完整性约束"></a>完整性约束</h2><h3 id="主键约束"><a href="#主键约束" class="headerlink" title="主键约束"></a>主键约束</h3><h3 id="唯一性约束"><a href="#唯一性约束" class="headerlink" title="唯一性约束"></a>唯一性约束</h3><p>###外键约束</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;数据库对象&quot;&gt;&lt;a href=&quot;#数据库对象&quot; class=&quot;headerlink&quot; title=&quot;数据库对象&quot;&gt;&lt;/a&gt;数据库对象&lt;/h2&gt;&lt;p&gt;数据库里定义的、用于存储或是引用数据的对象，比如表、视图、簇、序列、索引和异名。&lt;/p&gt;
&lt;h2 id=&quot;创建表&quot;&gt;&lt;a href=&quot;#创建表&quot; class=&quot;headerlink&quot; title=&quot;创建表&quot;&gt;&lt;/a&gt;创建表&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;CREATE TABLE 命令&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;使用方法：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;CREATE TABLE &amp;lt;表名&amp;gt;(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;lt;列名&amp;gt;  &amp;lt;数据类型&amp;gt;  [列级完整新约束],  //列级完整新约束 eg：primary key&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;lt;列名&amp;gt;  &amp;lt;数据类型&amp;gt;  [列级完整新约束],  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	[,&amp;lt;表级完整性约束&amp;gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Eg:
    
    </summary>
    
      <category term="SQL" scheme="www.number47.cn/categories/SQL/"/>
    
    
      <category term="SQL入门经典" scheme="www.number47.cn/tags/SQL%E5%85%A5%E9%97%A8%E7%BB%8F%E5%85%B8/"/>
    
  </entry>
  
  <entry>
    <title>SQL数据类型</title>
    <link href="www.number47.cn/2017/12/10/SQL%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    <id>www.number47.cn/2017/12/10/SQL数据类型/</id>
    <published>2017-12-10T04:56:35.000Z</published>
    <updated>2019-05-25T05:38:39.578Z</updated>
    
    <content type="html"><![CDATA[<h2 id="SQL数据类型"><a href="#SQL数据类型" class="headerlink" title="SQL数据类型"></a>SQL数据类型</h2><ul><li><p>CHAR(n)：定长数据类型</p></li><li><p>VARCHAR(n)：变长数据类型，n表示字段能够保存的最多字符数量</p></li><li><p>BLOB：大对象类型，二进制大对象，保存很长的二进制字符串</p></li><li><p>TEXT：长字符串类型，可以看作一个大VARCHAR字段<a id="more"></a></p></li></ul><h2 id="数值类型"><a href="#数值类型" class="headerlink" title="数值类型"></a>数值类型</h2><ul><li><p>BIT(n)</p></li><li><p>BIT VARCHAR(n)</p></li><li><p>DECIMAL(p, s)</p></li><li><p>INTEGER</p></li><li><p>SMALLINT</p></li><li><p>BIGINT</p></li><li><p>FLOAT(p, s)</p></li><li><p>DOUBLE PRECISION(p, s)</p></li><li><p>REAL(s)<br>p表示字段的最大长度<br>s表示小数点后面的位数</p></li></ul><h2 id="小数点类型"><a href="#小数点类型" class="headerlink" title="小数点类型"></a>小数点类型</h2><p>DECIMAL(p, s)</p><p>p：有效位数</p><p>s：标度</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">eg:DECIMAL(4,2)  最大值为99.99</span><br><span class="line">//有效位数是4，也就是数值总位数是4，标度是2小数点后面的位数</span><br></pre></td></tr></table></figure><p>如果实际数值的小数位数超出定义的位数，数字就会被四舍五入。</p><p>##浮点数</p><p><strong>REAL：</strong>单精度浮点数，单精度浮点数的有效位1—21（包含）</p><p><strong>DOUBLE PRECISION：</strong>双精度浮点数的有效位22—53（包含）</p><h2 id="日期和时间类型"><a href="#日期和时间类型" class="headerlink" title="日期和时间类型"></a>日期和时间类型</h2><ul><li><p>DATE</p></li><li><p>TIME</p></li><li><p>DATETIME</p></li><li><p>TIMESTAMP</p></li></ul><p>##直义字符串</p><p>  一系列字符，比如姓名或电话号码，这是有用户或程序明确指定的。</p><h2 id="自定义类型"><a href="#自定义类型" class="headerlink" title="自定义类型"></a>自定义类型</h2><p>由用户定义的类型，允许用户根据已有的数据类型来定制自己的数据类型。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">MYSQL</span><br><span class="line">//创建自定义类型</span><br><span class="line">CRATE TYPE PERSON AS OBJECT</span><br><span class="line">(NAME VARCHAR(30),</span><br><span class="line">SSN VARCHAR(9));</span><br><span class="line">//引用自定义类型</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> EMP_PAY</span><br><span class="line">(EMPLOYEE PERSON,</span><br><span class="line">SALARY <span class="built_in">DECIMAL</span>(<span class="number">10</span>,<span class="number">2</span>),</span><br><span class="line">HIRE_DATE <span class="built_in">DATE</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><h2 id="域"><a href="#域" class="headerlink" title="域"></a>域</h2><p>域是能够被使用的有效数据类型的集合。域与数据相关联，从而只接受待定的数据，在域创建之后，我们可以向域添加约束，约束与数据类型共同发挥作用，从而限制字段能够接受的数据。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">//创建域</span><br><span class="line">CREATE DOMAIN MONEY_D AS NUMBER(8,2);</span><br><span class="line">//添加约束</span><br><span class="line">ALTER DOMAIN MONEY_D</span><br><span class="line">ADD CONSTRANINT MONEY_CON1</span><br><span class="line">CHECK (VALUE &gt; 5);</span><br><span class="line">//引用域</span><br><span class="line">CREATE TABLE EMP_PAY</span><br><span class="line">(EMP_ID NUMBER(9),</span><br><span class="line">EMP_NAME VARCHAR2(30),</span><br><span class="line">PAY_RATE MONET_D</span><br><span class="line">);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;SQL数据类型&quot;&gt;&lt;a href=&quot;#SQL数据类型&quot; class=&quot;headerlink&quot; title=&quot;SQL数据类型&quot;&gt;&lt;/a&gt;SQL数据类型&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;CHAR(n)：定长数据类型&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;VARCHAR(n)：变长数据类型，n表示字段能够保存的最多字符数量&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;BLOB：大对象类型，二进制大对象，保存很长的二进制字符串&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;TEXT：长字符串类型，可以看作一个大VARCHAR字段
    
    </summary>
    
      <category term="SQL" scheme="www.number47.cn/categories/SQL/"/>
    
    
      <category term="SQL入门经典" scheme="www.number47.cn/tags/SQL%E5%85%A5%E9%97%A8%E7%BB%8F%E5%85%B8/"/>
    
  </entry>
  
  <entry>
    <title>SQL事务</title>
    <link href="www.number47.cn/2017/12/10/SQL%E4%BA%8B%E5%8A%A1/"/>
    <id>www.number47.cn/2017/12/10/SQL事务/</id>
    <published>2017-12-10T04:56:35.000Z</published>
    <updated>2019-05-25T05:38:39.536Z</updated>
    
    <content type="html"><![CDATA[<h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h2><p>事务(Transaction)是用户定义的一个数据库操作序列，这些操作要么全做，要么全不做，是一个不可分割的工作单位。</p><h2 id="控制事务"><a href="#控制事务" class="headerlink" title="控制事务"></a>控制事务</h2><p>###COMMIT命令</p><p>用于把事务所做的修改保存到数据库，把上一个COMMIT或ROLLBACK命令之后的全部事务都保存到数据库。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">begin transaction</span><br><span class="line">sql语句</span><br><span class="line">commit;</span><br></pre></td></tr></table></figure><a id="more"></a><p>###ROLLBACK命令</p><p>用于撤销还没有被保存到数据库的命令，它只能用于撤销上一个COMMIT或ROLLBACK命令之后的实物。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">begin transaction</span><br><span class="line">sql语句</span><br><span class="line">rollback;</span><br></pre></td></tr></table></figure><p>eg:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">begin transaction  </span><br><span class="line">update products_tbl</span><br><span class="line">set cost = 8</span><br><span class="line">where prod_id = &apos;11235&apos;;</span><br><span class="line">rollback;</span><br><span class="line"></span><br><span class="line">//上面语句会撤销更新的sql，不会让&apos;11235&apos;的prod_id更新为8，而是原来的值</span><br></pre></td></tr></table></figure><p>###SAVEPOINT</p><p>保存点是事务过程中的一个逻辑点，我们可以把事务回退到这个点，而步兵回退到整个实物。</p><h4 id="创建savepoint"><a href="#创建savepoint" class="headerlink" title="创建savepoint"></a>创建savepoint</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">save transaction savepoint_name</span><br></pre></td></tr></table></figure><h4 id="回退到savepoint"><a href="#回退到savepoint" class="headerlink" title="回退到savepoint"></a>回退到savepoint</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rollback transaction savepoint_name</span><br></pre></td></tr></table></figure><p>eg:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">BEGIN TRANSACTION</span><br><span class="line"></span><br><span class="line">save transaction sp1   //保存点1  更新&apos;11235&apos;的cost为80</span><br><span class="line">update products_tbl</span><br><span class="line">set cost = 80</span><br><span class="line">where prod_id = &apos;11235&apos;;</span><br><span class="line"></span><br><span class="line">save transaction sp2   //保存点2  更新&apos;11235&apos;的cost为99</span><br><span class="line">update products_tbl</span><br><span class="line">set cost = 99</span><br><span class="line">where prod_id = &apos;11235&apos;</span><br><span class="line"></span><br><span class="line">select *//查询  得到&apos;11235&apos;的cost为99</span><br><span class="line">from products_tbl;</span><br><span class="line">  </span><br><span class="line">rollback transaction sp2;  //回退到保存点2 得到&apos;11235&apos;的cost为80</span><br><span class="line"></span><br><span class="line">select *//查询  得到&apos;11235&apos;的cost为80</span><br><span class="line"></span><br><span class="line">from products_tbl;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;事务&quot;&gt;&lt;a href=&quot;#事务&quot; class=&quot;headerlink&quot; title=&quot;事务&quot;&gt;&lt;/a&gt;事务&lt;/h2&gt;&lt;p&gt;事务(Transaction)是用户定义的一个数据库操作序列，这些操作要么全做，要么全不做，是一个不可分割的工作单位。&lt;/p&gt;
&lt;h2 id=&quot;控制事务&quot;&gt;&lt;a href=&quot;#控制事务&quot; class=&quot;headerlink&quot; title=&quot;控制事务&quot;&gt;&lt;/a&gt;控制事务&lt;/h2&gt;&lt;p&gt;###COMMIT命令&lt;/p&gt;
&lt;p&gt;用于把事务所做的修改保存到数据库，把上一个COMMIT或ROLLBACK命令之后的全部事务都保存到数据库。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;begin transaction&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sql语句&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;commit;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="SQL" scheme="www.number47.cn/categories/SQL/"/>
    
    
      <category term="SQL入门经典" scheme="www.number47.cn/tags/SQL%E5%85%A5%E9%97%A8%E7%BB%8F%E5%85%B8/"/>
    
  </entry>
  
  <entry>
    <title>异常机制</title>
    <link href="www.number47.cn/2017/12/07/%E5%BC%82%E5%B8%B8%E6%9C%BA%E5%88%B6/"/>
    <id>www.number47.cn/2017/12/07/异常机制/</id>
    <published>2017-12-07T04:56:00.000Z</published>
    <updated>2019-07-09T15:31:55.771Z</updated>
    
    <content type="html"><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p><strong>异常：</strong>程序在<strong>运行时</strong>出现不正常情况。</p><p>Java将异常分为checked异常、unchecked异常</p><h3 id="unchecked异常-非受查异常"><a href="#unchecked异常-非受查异常" class="headerlink" title="unchecked异常(非受查异常)"></a>unchecked异常(非受查异常)</h3><p><strong>定义：</strong>所有派生于Error类或RuntimeException类的异常都称为unchecked异常</p><p>如果在函数内抛出异常，函数上不用声明，函数一样通过。</p><p>如果在函数上声明了该异常，调用者可以不用进行处理，编译一样通过。</p><p>之所以不用函数声明，是因为不需要让调用者处理。当该异常发生，希望程序停止。因为在运行时，出现了无法继续运算的情况，希望停止程序后，由程序员修改。</p><h3 id="Checked异常（受查异常）"><a href="#Checked异常（受查异常）" class="headerlink" title="Checked异常（受查异常）"></a>Checked异常（受查异常）</h3><p><strong>定义：</strong>不是RuntimeException类及其子类的实例都称为Checked异常。</p><p>可查异常即必须进行处理的异常，要么try catch住,要么往外抛，谁调用，谁处理，比如 FileNotFoundException<br>如果不处理，编译器，就不让你通过。</p><p>也就是说Java认为Checked异常是可以修复的异常，所以Java程序必须显式处理Checked异常，如果程序没有处理Checked异常，该程序在编译时就会发生错误，无法通过编译。</p><p><strong>运行时异常与非运行时异常的区别：</strong><br>运行时异常是不可查异常，不需要进行显式的捕捉<br>非运行时异常是可查异常，必须进行显示的捕捉，或者抛出<a id="more"></a></p><h2 id="异常处理机制"><a href="#异常处理机制" class="headerlink" title="异常处理机制"></a>异常处理机制</h2><p>当程序运行出现意外情形时，系统会自动生成一个Exception对象来通知程序，从而实现将”业务功能实现代码“和“错误处理代码”分离，提供更好的可读性。</p><p>总结：一个方法必须声明所有可能抛出的(check)受查异常，而（uncheck）非受查异常要么不可控制（Error）要么就应该避免发生（RuntimeException）。</p><p>下面为异常的处理</p><h3 id="方式一：try…catch捕获异常"><a href="#方式一：try…catch捕获异常" class="headerlink" title="方式一：try…catch捕获异常"></a>方式一：try…catch捕获异常</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">//有可能产生异常的业务实现代码</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span>(Exception e)<span class="comment">//异常对象</span></span><br><span class="line">&#123;</span><br><span class="line">  System.out.println(e.toString());<span class="comment">//异常名称：异常信息</span></span><br><span class="line">  e.printStackTrace();<span class="comment">//异常名称：异常信息,异常出现的位置</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">finally</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">//一定会执行的语句</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="方式二：使用throws声明抛出异常"><a href="#方式二：使用throws声明抛出异常" class="headerlink" title="方式二：使用throws声明抛出异常"></a>方式二：使用throws声明抛出异常</h3><p><strong>使用场景：</strong>当前方法不知道如何处理这种类型或者是可能抛出的异常，该异常应该由上一级调用者处理；如果main方法也不知道如何处理这种类型的异常，就使用throws声明抛出异常。该异常交给JVM处理，JVM对异常的处理方法是，打印异常的跟踪栈信息，并终止程序运行。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> exception;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestException</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">method1();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">          <span class="comment">//因为method2()方法声明抛出FileNotFoundException异常，所以调用该方法的代码要么放在try块中显示捕获该异常，要么放在另一个带throws声明抛出的方法中。</span></span><br><span class="line">method2();</span><br><span class="line">&#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//该方法希望它的调用者来处理异常,也就是说，调用该方法时要么放在try块中显示捕获该异常，要么放在另一个带throws声明抛出的方法中。</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method2</span><span class="params">()</span> <span class="keyword">throws</span> FileNotFoundException </span>&#123;</span><br><span class="line"></span><br><span class="line">File f = <span class="keyword">new</span> File(<span class="string">"d:/LOL.exe"</span>);</span><br><span class="line">System.out.println(<span class="string">"试图打开 d:/LOL.exe"</span>);</span><br><span class="line"><span class="keyword">new</span> FileInputStream(f);</span><br><span class="line">System.out.println(<span class="string">"成功打开"</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意：</strong>throws声明抛出异常时有限制：子类方法声明抛出的异常类型应该是父类方法声明抛出类型的子类或相同，子类方法声明抛出异常不允许比父类方法声明抛出的异常多。如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OverrideThrows</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> <span class="keyword">throws</span> IOException</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">FileInputStream fis = <span class="keyword">new</span> FileInputStream(<span class="string">"a.txt"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sub</span> <span class="keyword">extends</span> <span class="title">OverrideThrows</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="comment">// 子类方法声明抛出了比父类方法更大的异常</span></span><br><span class="line"><span class="comment">// 所以下面方法出错</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>抛出异常：</strong>代码出现异常时，系统自动生成一个异常对象，该异常对象被提交给Java环境。</p><p><strong>捕获异常：</strong>Java运行时环境收到异常对象，会寻找能处理该异常对象的catch块，如果找到合适的catch块，则把该异常对象交给catch块处理。</p><h3 id="程序自行抛出异常（throw）"><a href="#程序自行抛出异常（throw）" class="headerlink" title="程序自行抛出异常（throw）"></a>程序自行抛出异常（throw）</h3><p>throw语句抛出的不是异常类，而是一个异常实例；语法如下：</p><p>throw ExceptionInstance;</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(业务实现代码出现异常的条件)&#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"出现异常"</span>)；</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">  System.out.println(<span class="string">"异常"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="throws与throw区别"><a href="#throws与throw区别" class="headerlink" title="throws与throw区别"></a>throws与throw区别</h2><p>throws使用在函数上；throw使用在函数内。</p><p>throws后面跟的异常类，可以跟多个，用逗号隔开；throw后面跟的是异常对象。</p><h2 id="访问异常信息"><a href="#访问异常信息" class="headerlink" title="访问异常信息"></a>访问异常信息</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">getMessage():返回该异常的详细描述字符串</span><br><span class="line">printStackTrace():将该异常的跟踪栈信息输出到标准错误输出</span><br><span class="line">printStackTrace(PrintStream s):将该异常的跟踪栈信息输出到指定输出流。</span><br><span class="line">getStackTrace():返回该异常的跟踪栈信息。</span><br></pre></td></tr></table></figure><h2 id="自定义异常"><a href="#自定义异常" class="headerlink" title="自定义异常"></a>自定义异常</h2><p><strong>应用场景:</strong>项目中会出现特有问题，而这些问题并未被java所所描述并封装对象。所以对于这些特有的问题可以按照java的对问题的封装思想，将特有的问题，进行自定义的异常封装。自定义异常必须继承Exception类。</p><ol><li><p>创建自定义异常</p><p>一个英雄攻击另一个英雄的时候，如果发现另一个英雄已经挂了，就会抛出EnemyHeroIsDeadException<br>创建一个类EnemyHeroIsDeadException，并继承Exception<br>提供两个构造方法</p><ol><li><p>无参的构造方法</p></li><li><p>带参的构造方法，并调用父类的对应的构造方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">EnemyHeroIsDeadException</span> <span class="keyword">extends</span> <span class="title">Exception</span></span>&#123;</span><br><span class="line">     </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">EnemyHeroIsDeadException</span><span class="params">()</span></span>&#123;</span><br><span class="line">         </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">EnemyHeroIsDeadException</span><span class="params">(String msg)</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​</p></li></ol></li></ol><ol start="2"><li><p>抛出自定义异常</p><p>在Hero的attack方法中，当发现敌方英雄的血量为0的时候，抛出该异常</p><ol><li>创建一个EnemyHeroIsDeadException实例</li><li>通过throw 抛出该异常</li><li>当前方法通过 throws 抛出该异常</li></ol></li></ol>   <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hero</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String name; </span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">float</span> hp;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">attackHero</span><span class="params">(Hero h)</span> <span class="keyword">throws</span> EnemyHeroIsDeadException</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(h.hp == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> EnemyHeroIsDeadException(h.name + <span class="string">" 已经挂了,不许要施放技能"</span> );</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">EnemyHeroIsDeadException</span> <span class="keyword">extends</span> <span class="title">Exception</span></span>&#123;</span><br><span class="line">         </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">EnemyHeroIsDeadException</span><span class="params">()</span></span>&#123;</span><br><span class="line">             </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">EnemyHeroIsDeadException</span><span class="params">(String msg)</span></span>&#123;</span><br><span class="line">            <span class="keyword">super</span>(msg);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">      </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">         </span><br><span class="line">        Hero garen =  <span class="keyword">new</span> Hero();</span><br><span class="line">        garen.name = <span class="string">"盖伦"</span>;</span><br><span class="line">        garen.hp = <span class="number">616</span>;</span><br><span class="line"> </span><br><span class="line">        Hero teemo =  <span class="keyword">new</span> Hero();</span><br><span class="line">        teemo.name = <span class="string">"提莫"</span>;</span><br><span class="line">        teemo.hp = <span class="number">0</span>;</span><br><span class="line">         </span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            garen.attackHero(teemo);</span><br><span class="line">             </span><br><span class="line">        &#125; <span class="keyword">catch</span> (EnemyHeroIsDeadException e) &#123;</span><br><span class="line">            <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">            System.out.println(<span class="string">"异常的具体原因:"</span>+e.getMessage());</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">         </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>   ​</p><h3 id="finally"><a href="#finally" class="headerlink" title="finally"></a>finally</h3><p><strong>作用：</strong>回收try块中打开了一些物理资源（例如数据库连接、网络连接和磁盘文件等），这些资源都必须显示回收。</p><p>不管try块中的代码是否出现异常，也不管哪一个catch块被执行，<strong>甚至在try块或catch块中执行了return语句，finally总会被执行。</strong></p><h3 id="Throwable"><a href="#Throwable" class="headerlink" title="Throwable"></a>Throwable</h3><p> <img src="/images/img-Throwable.png" alt="Throwable"></p><p>Throwable是类，Exception和Error都继承了该类，所以在捕捉的时候，也可以使用Throwable进行捕捉。<br>如图： 异常分Error和Exception<br>Exception里又分运行时异常和可查异常。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestException</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">        File f = <span class="keyword">new</span> File(<span class="string">"d:/LOL.exe"</span>);</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">new</span> FileInputStream(f);</span><br><span class="line">            <span class="comment">//使用Throwable进行异常捕捉</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">            <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">            t.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;异常：&lt;/strong&gt;程序在&lt;strong&gt;运行时&lt;/strong&gt;出现不正常情况。&lt;/p&gt;
&lt;p&gt;Java将异常分为checked异常、unchecked异常&lt;/p&gt;
&lt;h3 id=&quot;unchecked异常-非受查异常&quot;&gt;&lt;a href=&quot;#unchecked异常-非受查异常&quot; class=&quot;headerlink&quot; title=&quot;unchecked异常(非受查异常)&quot;&gt;&lt;/a&gt;unchecked异常(非受查异常)&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;定义：&lt;/strong&gt;所有派生于Error类或RuntimeException类的异常都称为unchecked异常&lt;/p&gt;
&lt;p&gt;如果在函数内抛出异常，函数上不用声明，函数一样通过。&lt;/p&gt;
&lt;p&gt;如果在函数上声明了该异常，调用者可以不用进行处理，编译一样通过。&lt;/p&gt;
&lt;p&gt;之所以不用函数声明，是因为不需要让调用者处理。当该异常发生，希望程序停止。因为在运行时，出现了无法继续运算的情况，希望停止程序后，由程序员修改。&lt;/p&gt;
&lt;h3 id=&quot;Checked异常（受查异常）&quot;&gt;&lt;a href=&quot;#Checked异常（受查异常）&quot; class=&quot;headerlink&quot; title=&quot;Checked异常（受查异常）&quot;&gt;&lt;/a&gt;Checked异常（受查异常）&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;定义：&lt;/strong&gt;不是RuntimeException类及其子类的实例都称为Checked异常。&lt;/p&gt;
&lt;p&gt;可查异常即必须进行处理的异常，要么try catch住,要么往外抛，谁调用，谁处理，比如 FileNotFoundException&lt;br&gt;如果不处理，编译器，就不让你通过。&lt;/p&gt;
&lt;p&gt;也就是说Java认为Checked异常是可以修复的异常，所以Java程序必须显式处理Checked异常，如果程序没有处理Checked异常，该程序在编译时就会发生错误，无法通过编译。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;运行时异常与非运行时异常的区别：&lt;/strong&gt;&lt;br&gt;运行时异常是不可查异常，不需要进行显式的捕捉&lt;br&gt;非运行时异常是可查异常，必须进行显示的捕捉，或者抛出
    
    </summary>
    
      <category term="Java" scheme="www.number47.cn/categories/Java/"/>
    
    
      <category term="Java基础" scheme="www.number47.cn/tags/Java%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>理解面向对象</title>
    <link href="www.number47.cn/2017/12/07/%E7%90%86%E8%A7%A3%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    <id>www.number47.cn/2017/12/07/理解面向对象/</id>
    <published>2017-12-07T04:56:00.000Z</published>
    <updated>2019-07-08T18:39:17.083Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>JAVA面向对象的三大特性：<strong>封装、继承、多态</strong><br>面向对象和面向过程都是一种思考方式。<br><strong>面向过程</strong>：打开冰箱/放东西进冰箱/关闭冰箱，强调动作过程。<br><strong>面向对象：</strong>冰箱.打开/冰箱.放东西/冰箱.关闭，强调冰箱这一对象。<a id="more"></a><br>举例：向过程到面向对象是从执行者到指挥者<br>餐厅点菜：我找服务员，服务员就是对象，服务员具有点菜功能。<br>HR面试我：我就是对象，我就是对象，具备有HR需要的人的技能。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;JAVA面向对象的三大特性：&lt;strong&gt;封装、继承、多态&lt;/strong&gt;&lt;br&gt;面向对象和面向过程都是一种思考方式。&lt;br&gt;&lt;strong&gt;面向过程&lt;/strong&gt;：打开冰箱/放东西进冰箱/关闭冰箱，强调动作过程。&lt;br&gt;&lt;strong&gt;面向对象：&lt;/strong&gt;冰箱.打开/冰箱.放东西/冰箱.关闭，强调冰箱这一对象。
    
    </summary>
    
      <category term="Java" scheme="www.number47.cn/categories/Java/"/>
    
    
      <category term="Java基础" scheme="www.number47.cn/tags/Java%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>Tomcat</title>
    <link href="www.number47.cn/2017/11/27/Tomcat/"/>
    <id>www.number47.cn/2017/11/27/Tomcat/</id>
    <published>2017-11-26T16:00:00.000Z</published>
    <updated>2019-05-25T05:38:39.581Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Tomcat"><a href="#Tomcat" class="headerlink" title="Tomcat"></a>Tomcat</h2><p>  Tomcat服务器是一种Servlet/JSP容器，负责处理客户请求，把请求传送给Servlet并把结果返回给客户。</p><p>当用户访问某个Servlet时，Servlet容器将创建一个ServletRequest对象和ServletResponse对象。在ServletRequest对象中封装了客户请求信息，然后Servlet容器（Tomcat）把ServletRequest对象和ServletResponse对象传给客户所请求的Servlet。Servlet把响应结果写到ServletResponse中，然后由Servlet容器（Tomcat）把响应结果传给客户。<a id="more"></a></p><p><img src="/images/img-Servlet%E5%AE%B9%E5%99%A8%E5%93%8D%E5%BA%94%E5%AE%A2%E6%88%B7%E8%AF%B7%E6%B1%82%E8%BF%87%E7%A8%8B.png" alt="Alt text"></p><h2 id="修改端口"><a href="#修改端口" class="headerlink" title="修改端口"></a>修改端口</h2><p>安装目录为D:\Tomcat</p><p>打开D:\Tomcat\conf\server.xml，修改8080端口</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;Connector port=&quot;8080&quot; protocol=&quot;HTTP/1.1&quot;</span><br><span class="line">              connectionTimeout=&quot;20000&quot;</span><br><span class="line">              redirectPort=&quot;8443&quot; /&gt;</span><br></pre></td></tr></table></figure><h2 id="运行多个服务"><a href="#运行多个服务" class="headerlink" title="运行多个服务"></a>运行多个服务</h2><p>如果需要让Tomcat运行多个服务，只需要复制server.xml文件中的<service>元素，并修改相应的参数，便可以实现一个Tomcat运行多个服务。</service></p><h2 id="Tomcat的结构"><a href="#Tomcat的结构" class="headerlink" title="Tomcat的结构"></a>Tomcat的结构</h2><p>每个Tomcat组件在server.xml文件中对应一种配置元素。以下为Tomcat组件之间的关系。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;Server&gt;                             //顶层类元素，可以包括多个Service   </span><br><span class="line">    &lt;Service&gt;                        //顶层类元素，可包含一个Engine，多个Connecter</span><br><span class="line">        &lt;Connector&gt;                  //连接器类元素，代表通信接口</span><br><span class="line">                &lt;Engine&gt;             //容器类元素，为特定的Service组件处理客户请求，要包含多个Host</span><br><span class="line">                        &lt;Host&gt;       //容器类元素，为特定的虚拟主机组件处理客户请求，可包含多个Context</span><br><span class="line">                          &lt;Context&gt;  //容器类元素，为特定的Web应用处理所有的客户请求</span><br><span class="line">                          &lt;/Context&gt;</span><br><span class="line">                        &lt;/Host&gt;</span><br><span class="line">                &lt;/Engine&gt;</span><br><span class="line">        &lt;/Connector&gt;</span><br><span class="line">    &lt;/Service&gt;</span><br><span class="line">&lt;/Server&gt;</span><br></pre></td></tr></table></figure><ul><li><code>&lt;Server&gt;</code>元素</li></ul><p><code>&lt;Server&gt;</code>元素代表整个Servlet容器，是Tomcat实例的顶层元素。<code>&lt;Server&gt;</code>元素中包含一个或多个<code>&lt;Server&gt;</code>元素。</p><ul><li><p><code>&lt;Service&gt;</code>元素</p><p><code>&lt;Service&gt;</code>元素包含一个<code>&lt;Engine&gt;</code>元素，以及一个或多个<code>&lt;Connector&gt;</code>元素，这些<code>&lt;Connector&gt;</code>元素共享同一个&lt;Engine&gt;元素</p></li><li><p><code>&lt;Connector&gt;</code>元素</p><p><code>&lt;Connector&gt;</code>元素代表和客户程序实际交互的组件，它负责接收客户请求，以及向客户返回响应结果。</p></li><li><p><code>&lt;Engine&gt;</code>元素</p><p>每个<code>&lt;Service&gt;</code>元素只能包含<code>&lt;Engine&gt;</code>元素。<code>&lt;Engine&gt;</code>元素处理在同一个<code>&lt;Service&gt;</code>中所有<code>&lt;Connector&gt;</code>元素接收到的客户请求。</p></li><li><p><code>&lt;Host&gt;</code>元素</p><p>一个<code>&lt;Engine&gt;</code>元素可以包含多个<code>&lt;Host&gt;</code>元素。每个<code>&lt;Host&gt;</code>元素定义了一个虚拟主机，它可以包含一个或多个Web应用。</p></li><li><p><code>&lt;Context&gt;</code>元素</p><p><code>&lt;Context&gt;</code>元素是使用最频繁的元素，每个<code>&lt;Context&gt;</code>元素代表了运行在虚拟主机上的单个Web应用。一个<code>&lt;Host&gt;</code>元素中可以包含多个<code>&lt;Context&gt;</code>元素。</p><h2 id="进入控制台"><a href="#进入控制台" class="headerlink" title="进入控制台"></a>进入控制台</h2><p>Server Status控制台：监控服务器状态</p><p>Manager App控制台：部署、监控Web应用</p><p>Host Manager控制台</p><h3 id="增加控制台用户"><a href="#增加控制台用户" class="headerlink" title="增加控制台用户"></a>增加控制台用户</h3><p>打开D:\Tomcat\conf\tomcat-users.xml文件</p><p>在<code>&lt;tomcat-users&gt;</code>元素中增加用户</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;tomcat-users&gt;</span><br><span class="line">&lt;role rolename=&quot;tomcat&quot;/&gt;</span><br><span class="line">&lt;!--增加一个用户--&gt;</span><br><span class="line">&lt;user username=&apos;admin&apos; password = &apos;123456&apos; roles = &apos;manager-gui&apos;/&gt;</span><br><span class="line">&lt;/tomcat-users&gt;</span><br></pre></td></tr></table></figure><h2 id="部署Web应用"><a href="#部署Web应用" class="headerlink" title="部署Web应用"></a>部署Web应用</h2><h3 id="方式一：利用Tomact的自动部署"><a href="#方式一：利用Tomact的自动部署" class="headerlink" title="方式一：利用Tomact的自动部署"></a>方式一：利用Tomact的自动部署</h3><p>只要将一个Web应用复制到Tomcat的webapps下，系统就会把应用部署到Tomcat中。</p><h3 id="方式二：利用控制台部署"><a href="#方式二：利用控制台部署" class="headerlink" title="方式二：利用控制台部署"></a>方式二：利用控制台部署</h3><p>进入控制台，按照下图输入即可</p><p>！<img src="/images/img-Tomcat%E6%8E%A7%E5%88%B6%E5%8F%B0%E9%83%A8%E7%BD%B2web%E5%BA%94%E7%94%A8.png" alt="img-Tomcat控制台部署web应用"></p><p>将会在Tomcat的webapps目录多了一个名为tmall_ssh的文件夹，文件内容和D:\JAVA\workspace\路径tmall_ssh文件夹内容一样</p></li></ul><h2 id="Tomcat各个组件之间的嵌套关系"><a href="#Tomcat各个组件之间的嵌套关系" class="headerlink" title="Tomcat各个组件之间的嵌套关系"></a>Tomcat各个组件之间的嵌套关系</h2><p><img src="/images/img-Tomcat%E5%90%84%E4%B8%AA%E7%BB%84%E4%BB%B6%E4%B9%8B%E9%97%B4%E7%9A%84%E5%85%B3%E7%B3%BB.png" alt="img_Tomcat各个组件之间的关系"></p><h2 id="Tomcat-Server处理一个HTTP请求的过程"><a href="#Tomcat-Server处理一个HTTP请求的过程" class="headerlink" title="Tomcat Server处理一个HTTP请求的过程"></a>Tomcat Server处理一个HTTP请求的过程</h2><p>![img_Tomcat Server处理一个HTTP请求的过程](/images/img-Tomcat Server处理一个HTTP请求的过程.png)</p><ol><li>用户点击网页内容，请求被发送到本机端口8080，被在那里监听的Coyote HTTP/1.1 Connector获得。 </li><li>Connector把该请求交给它所在的Service的Engine来处理，并等待Engine的回应。 </li><li>Engine获得请求localhost/index.jsp，匹配所有的虚拟主机Host。 </li><li>Engine匹配到名为localhost的Host（即使匹配不到也把请求交给该Host处理，因为该Host被定义为该Engine的默认主机），名为localhost的Host获得请求/index.jsp，匹配它所拥有的所有的Context。Host匹配到路径为/test的Context（如果匹配不到就把该请求交给路径名为“ ”的Context去处理）。 </li><li>path=“/”的Context获得请求/index.jsp，在它的mapping table中寻找出对应的Servlet。Context匹配到URL PATTERN为*.jsp的Servlet,对应于JspServlet类。 </li><li>构造HttpServletRequest对象和HttpServletResponse对象，作为参数调用JspServlet的doGet（）或doPost（）.执行业务逻辑、数据存储等程序。 </li><li>Context把执行完之后的HttpServletResponse对象返回给Host。 </li><li>Host把HttpServletResponse对象返回给Engine。 </li><li>Engine把HttpServletResponse对象返回Connector。 </li><li>Connector把HttpServletResponse对象返回给客户Browser。</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Tomcat&quot;&gt;&lt;a href=&quot;#Tomcat&quot; class=&quot;headerlink&quot; title=&quot;Tomcat&quot;&gt;&lt;/a&gt;Tomcat&lt;/h2&gt;&lt;p&gt;  Tomcat服务器是一种Servlet/JSP容器，负责处理客户请求，把请求传送给Servlet并把结果返回给客户。&lt;/p&gt;
&lt;p&gt;当用户访问某个Servlet时，Servlet容器将创建一个ServletRequest对象和ServletResponse对象。在ServletRequest对象中封装了客户请求信息，然后Servlet容器（Tomcat）把ServletRequest对象和ServletResponse对象传给客户所请求的Servlet。Servlet把响应结果写到ServletResponse中，然后由Servlet容器（Tomcat）把响应结果传给客户。
    
    </summary>
    
      <category term="Java_Web" scheme="www.number47.cn/categories/Java-Web/"/>
    
    
      <category term="Tomcat" scheme="www.number47.cn/tags/Tomcat/"/>
    
  </entry>
  
  <entry>
    <title>Java面试题</title>
    <link href="www.number47.cn/2017/11/27/Java%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    <id>www.number47.cn/2017/11/27/Java面试题/</id>
    <published>2017-11-26T16:00:00.000Z</published>
    <updated>2019-05-25T05:38:39.535Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java面试题"><a href="#Java面试题" class="headerlink" title="Java面试题"></a>Java面试题</h1><p><a href="http://blog.csdn.net/jackfrued/article/details/44921941" target="_blank" rel="noopener">原文链接</a><br><strong>1.面向对象的理解</strong><br><strong>面向对象</strong>的本质就是将现实世界描绘成一系列完全自治、封闭的对象。我们在类中编写的方法就是对实现细节的一种封装；我们编写一个类就是对数据和数据操作的封装。可以说，封装就是隐藏一切可隐藏的东西，只向外界提供最简单的编程接口（可以想想普通洗衣机和全自动洗衣机的差别，明显全自动洗衣机封装更好因此操作起来更简单；我们现在使用的智能手机也是封装得足够好的，因为几个按键就搞定了所有的事情）。<a id="more"></a><br><strong>2. 自动装箱/拆箱机制</strong><br>如果整型字面量的值在-128到127之间，那么不会new新的Integer对象，而是直接引用常量池中的Integer对象，所以下面的面试题中<code>f1== f2</code>的结果是true，而<code>f3== f4</code>的结果是false。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">  Integer f1 = <span class="number">100</span>, f2 = <span class="number">100</span>, f3 = <span class="number">150</span>, f4 = <span class="number">150</span>;</span><br><span class="line">        System.out.println(f1 == f2);   <span class="comment">//true</span></span><br><span class="line">        System.out.println(f3 == f4);  <span class="comment">//false</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>3.栈(stack)、堆(heap)和静态区(static area)</strong><br><strong>栈：</strong>定义一个基本数据类型的变量，一个对象的引用，函数调用的现场保存；<br><strong>堆：</strong>通过new关键字和构造器创建的对象；堆是垃圾收集器管理的主要区域，由于现在的垃圾收集器都采用分代收集算法，所以堆空间还可以细分为新生代和老生代，再具体一点可以分为Eden、Survivor（又可分为From Survivor和To Survivor）、Tenured；<br><strong>静态区：</strong>程序中的字面量（literal）如直接书写的100、”hello”和常量；都是放在常量池中，常量池是方法区的一部分</p><p>栈空间操作起来最快但是栈很小。<br>通常大量的对象都是放在堆空间，理论上整个内存没有被其他进程使用的空间甚至硬盘上的虚拟内存都可以被当成堆空间来使用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String str = <span class="keyword">new</span> String(<span class="string">"Hello"</span>);</span><br></pre></td></tr></table></figure><p><strong>栈：</strong><code>str</code><br><strong>堆：</strong>用<code>new</code>创建出来的字符串对象<br><strong>静态区：</strong><code>&quot;hello&quot;</code>这个字面量<br><strong>4. Math.round(11.5) 等于多少？Math.round(-11.5)等于多少？</strong><br>答：Math.round(11.5)的返回值是12，Math.round(-11.5)的返回值是-11。四舍五入的原理是在参数上加0.5然后进行下取整。<br>*<em>5.抽象类（abstract class）和接口（interface）有什么异同？ *</em><br>答：抽象类和接口都不能够实例化，但可以定义抽象类和接口类型的引用。一个类如果继承了某个抽象类或者实现了某个接口都需要对其中的抽象方法全部进行实现，否则该类仍然需要被声明为抽象类。接口比抽象类更加抽象，因为抽象类中可以定义构造器，可以有抽象方法和具体方法，而接口中不能定义构造器而且其中的方法全部都是抽象方法。抽象类中的成员可以是private、默认、protected、public的，而接口中的成员全都是public的。抽象类中可以定义成员变量，而接口中定义的成员变量实际上都是常量。有抽象方法的类必须被声明为抽象类，而抽象类未必要有抽象方法。<br>*<em>6.String s = new String(“xyz”);创建了几个字符串对象？ *</em><br>答：两个对象，一个是静态区的”xyz”，一个是用new创建在堆上的对象。<br>*<em>7.接口是否可继承（extends）接口？抽象类是否可实现（implements）接口？抽象类是否可继承具体类（concrete class）？ *</em><br>答：接口可以继承接口，而且支持多重继承。抽象类可以实现(implements)接口，抽象类可继承具体类也可以继承抽象类。<br>*<em>8.Java 中的final关键字有哪些用法？ *</em><br>答：</p><ol><li>修饰类：表示该类不能被继承；</li><li>修饰方法：表示方法不能被重写；</li><li>修饰变量：表示变量只能一次赋值以后值不能被修改（常量）。</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Java面试题&quot;&gt;&lt;a href=&quot;#Java面试题&quot; class=&quot;headerlink&quot; title=&quot;Java面试题&quot;&gt;&lt;/a&gt;Java面试题&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;http://blog.csdn.net/jackfrued/article/details/44921941&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;原文链接&lt;/a&gt;&lt;br&gt;&lt;strong&gt;1.面向对象的理解&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;面向对象&lt;/strong&gt;的本质就是将现实世界描绘成一系列完全自治、封闭的对象。我们在类中编写的方法就是对实现细节的一种封装；我们编写一个类就是对数据和数据操作的封装。可以说，封装就是隐藏一切可隐藏的东西，只向外界提供最简单的编程接口（可以想想普通洗衣机和全自动洗衣机的差别，明显全自动洗衣机封装更好因此操作起来更简单；我们现在使用的智能手机也是封装得足够好的，因为几个按键就搞定了所有的事情）。
    
    </summary>
    
      <category term="Java" scheme="www.number47.cn/categories/Java/"/>
    
    
      <category term="Java面试" scheme="www.number47.cn/tags/Java%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>Java运行机制/JVM/JRE/JDK</title>
    <link href="www.number47.cn/2017/11/25/Java%E8%BF%90%E8%A1%8C%E6%9C%BA%E5%88%B6%E5%92%8CJVM/"/>
    <id>www.number47.cn/2017/11/25/Java运行机制和JVM/</id>
    <published>2017-11-25T04:56:00.000Z</published>
    <updated>2019-07-08T18:35:49.815Z</updated>
    
    <content type="html"><![CDATA[<h2 id="JAVA运行机制"><a href="#JAVA运行机制" class="headerlink" title="JAVA运行机制"></a>JAVA运行机制</h2><p>Java语言编写的程序需要经过编译步骤，这个编译步骤并不会生成特定平台的机器骂，而是生成一种与平台无关的字节码（也就是*.class文件），这种字节码不是可执行性的，必须使用Java解释器来解释执行。<br>Java程序的执行过程需要想编译、后解释，如下：</p><p>java源文件*.java—使用javac编译—&gt;编译生成*.class文件（字节码文件）—使用java解释执行—&gt;特定平台的机器码。<a id="more"></a></p><h2 id="JVM"><a href="#JVM" class="headerlink" title="JVM"></a>JVM</h2><p>Java语言里负责解释执行字节码文件的Java虚拟机，即JVM(Java Virtual Machine)。</p><p><strong>问：为什么Java可以跨平台？</strong></p><p>答：当使用Java编译器编译Java程序时，生成的是与平台无关的字节码，这些字节码不面向任何具体平台，只面向JVM。不同平台上的JVM都是不同的，但是它们提供了相同的接口。只要不同平台实现了相应的虚拟机，编译后的Java字节码就可以在该平台上运行。</p><h2 id="JRE"><a href="#JRE" class="headerlink" title="JRE"></a>JRE</h2><p>JRE（Java Runtime Environment，Java运行环境），包括Java虚拟机JVM和Java程序所需要的核心库等，如果要运行一个开发好的Java程序，计算机中只需要安装JRE。</p><h2 id="JDK"><a href="#JDK" class="headerlink" title="JDK"></a>JDK</h2><p>JDK（Java Development Kit，Java开发工具包），提供给Java开发人员使用的，其中包含了Java的开发工具（javac.exe 编译工具/jar.exe 打包工具），也包含了<strong>JRE</strong>。所以，安装了JDK后，不需要再单独安装JRE。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;JAVA运行机制&quot;&gt;&lt;a href=&quot;#JAVA运行机制&quot; class=&quot;headerlink&quot; title=&quot;JAVA运行机制&quot;&gt;&lt;/a&gt;JAVA运行机制&lt;/h2&gt;&lt;p&gt;Java语言编写的程序需要经过编译步骤，这个编译步骤并不会生成特定平台的机器骂，而是生成一种与平台无关的字节码（也就是*.class文件），这种字节码不是可执行性的，必须使用Java解释器来解释执行。&lt;br&gt;Java程序的执行过程需要想编译、后解释，如下：&lt;/p&gt;
&lt;p&gt;java源文件*.java—使用javac编译—&amp;gt;编译生成*.class文件（字节码文件）—使用java解释执行—&amp;gt;特定平台的机器码。
    
    </summary>
    
      <category term="Java" scheme="www.number47.cn/categories/Java/"/>
    
    
      <category term="Java基础" scheme="www.number47.cn/tags/Java%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
</feed>
