<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Number 47</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-11-27T08:36:50.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Number 47</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Java面试题</title>
    <link href="http://yoursite.com/2017/11/27/Java%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    <id>http://yoursite.com/2017/11/27/Java面试题/</id>
    <published>2017-11-26T16:00:00.000Z</published>
    <updated>2017-11-27T08:36:50.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java面试题"><a href="#Java面试题" class="headerlink" title="Java面试题"></a>Java面试题</h1><p><a href="http://blog.csdn.net/jackfrued/article/details/44921941" target="_blank" rel="external">原文链接</a><br><strong>1.面向对象的理解</strong><br><strong>面向对象</strong>的本质就是将现实世界描绘成一系列完全自治、封闭的对象。我们在类中编写的方法就是对实现细节的一种封装；我们编写一个类就是对数据和数据操作的封装。可以说，封装就是隐藏一切可隐藏的东西，只向外界提供最简单的编程接口（可以想想普通洗衣机和全自动洗衣机的差别，明显全自动洗衣机封装更好因此操作起来更简单；我们现在使用的智能手机也是封装得足够好的，因为几个按键就搞定了所有的事情）。<br><strong>2. 自动装箱/拆箱机制</strong><br>如果整型字面量的值在-128到127之间，那么不会new新的Integer对象，而是直接引用常量池中的Integer对象，所以下面的面试题中<code>f1== f2</code>的结果是true，而<code>f3== f4</code>的结果是false。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">  Integer f1 = <span class="number">100</span>, f2 = <span class="number">100</span>, f3 = <span class="number">150</span>, f4 = <span class="number">150</span>;</div><div class="line">        System.out.println(f1 == f2);   <span class="comment">//true</span></div><div class="line">        System.out.println(f3 == f4);  <span class="comment">//false</span></div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p><strong>3.栈(stack)、堆(heap)和静态区(static area)</strong><br><strong>栈：</strong>定义一个基本数据类型的变量，一个对象的引用，函数调用的现场保存；<br><strong>堆：</strong>通过new关键字和构造器创建的对象；堆是垃圾收集器管理的主要区域，由于现在的垃圾收集器都采用分代收集算法，所以堆空间还可以细分为新生代和老生代，再具体一点可以分为Eden、Survivor（又可分为From Survivor和To Survivor）、Tenured；<br><strong>静态区：</strong>程序中的字面量（literal）如直接书写的100、”hello”和常量；都是放在常量池中，常量池是方法区的一部分</p><p>栈空间操作起来最快但是栈很小。<br>通常大量的对象都是放在堆空间，理论上整个内存没有被其他进程使用的空间甚至硬盘上的虚拟内存都可以被当成堆空间来使用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">String str = <span class="keyword">new</span> String(<span class="string">"Hello"</span>);</div></pre></td></tr></table></figure><p><strong>栈：</strong><code>str</code><br><strong>堆：</strong>用<code>new</code>创建出来的字符串对象<br><strong>静态区：</strong><code>&quot;hello&quot;</code>这个字面量<br><strong>4. Math.round(11.5) 等于多少？Math.round(-11.5)等于多少？</strong><br>答：Math.round(11.5)的返回值是12，Math.round(-11.5)的返回值是-11。四舍五入的原理是在参数上加0.5然后进行下取整。<br><strong>5.抽象类（abstract class）和接口（interface）有什么异同？ </strong><br>答：抽象类和接口都不能够实例化，但可以定义抽象类和接口类型的引用。一个类如果继承了某个抽象类或者实现了某个接口都需要对其中的抽象方法全部进行实现，否则该类仍然需要被声明为抽象类。接口比抽象类更加抽象，因为抽象类中可以定义构造器，可以有抽象方法和具体方法，而接口中不能定义构造器而且其中的方法全部都是抽象方法。抽象类中的成员可以是private、默认、protected、public的，而接口中的成员全都是public的。抽象类中可以定义成员变量，而接口中定义的成员变量实际上都是常量。有抽象方法的类必须被声明为抽象类，而抽象类未必要有抽象方法。<br><strong>6.String s = new String(“xyz”);创建了几个字符串对象？ </strong><br>答：两个对象，一个是静态区的”xyz”，一个是用new创建在堆上的对象。<br><strong>7.接口是否可继承（extends）接口？抽象类是否可实现（implements）接口？抽象类是否可继承具体类（concrete class）？ </strong><br>答：接口可以继承接口，而且支持多重继承。抽象类可以实现(implements)接口，抽象类可继承具体类也可以继承抽象类。<br><strong>8.Java 中的final关键字有哪些用法？ </strong><br>答：</p><ol><li>修饰类：表示该类不能被继承；</li><li>修饰方法：表示方法不能被重写；</li><li>修饰变量：表示变量只能一次赋值以后值不能被修改（常量）。<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./1511771264783.png" alt="Alt text" title="">                </div>                <div class="image-caption">Alt text</div>            </figure></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Java面试题&quot;&gt;&lt;a href=&quot;#Java面试题&quot; class=&quot;headerlink&quot; title=&quot;Java面试题&quot;&gt;&lt;/a&gt;Java面试题&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;http://blog.csdn.net/jackfrued/article/de
      
    
    </summary>
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
    
      <category term="Java面试" scheme="http://yoursite.com/tags/Java%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>Java运行机制和JVM</title>
    <link href="http://yoursite.com/2017/11/25/Java%E8%BF%90%E8%A1%8C%E6%9C%BA%E5%88%B6%E5%92%8CJVM/"/>
    <id>http://yoursite.com/2017/11/25/Java运行机制和JVM/</id>
    <published>2017-11-25T04:56:35.000Z</published>
    <updated>2017-11-27T08:38:39.011Z</updated>
    
    <content type="html"><![CDATA[<h2 id="JAVA运行机制"><a href="#JAVA运行机制" class="headerlink" title="JAVA运行机制"></a>JAVA运行机制</h2><p>Java语言编写的程序需要经过编译步骤，这个编译步骤并不会生成特定平台的机器骂，而是生成一种与平台无关的字节码（也就是*.class文件），这种字节码不是可执行性的，必须使用Java解释器来解释执行。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;JAVA运行机制&quot;&gt;&lt;a href=&quot;#JAVA运行机制&quot; class=&quot;headerlink&quot; title=&quot;JAVA运行机制&quot;&gt;&lt;/a&gt;JAVA运行机制&lt;/h2&gt;&lt;p&gt;Java语言编写的程序需要经过编译步骤，这个编译步骤并不会生成特定平台的机器骂，而是生成一种
      
    
    </summary>
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
    
      <category term="JAVA基础" scheme="http://yoursite.com/tags/JAVA%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>Activity的四种启动模式</title>
    <link href="http://yoursite.com/2017/09/17/Andeoid%E7%96%AF%E7%8B%82%E8%AE%B2%E4%B9%89/"/>
    <id>http://yoursite.com/2017/09/17/Andeoid疯狂讲义/</id>
    <published>2017-09-17T04:56:35.000Z</published>
    <updated>2017-11-08T16:02:06.605Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-Android是如何管理Activity"><a href="#1-Android是如何管理Activity" class="headerlink" title="1.Android是如何管理Activity?"></a>1.Android是如何管理Activity?</h2><p>Android采用Task管理多个Activity,当我们启动一个应用时，Android会为之创建一个Task，然后启动这个应用的入口（即<intent-filter>）</intent-filter></p><h3 id="1-2方"><a href="#1-2方" class="headerlink" title="1.2方"></a>1.2方</h3><p>2222222222222222</p><h2 id="1-2-GGGG"><a href="#1-2-GGGG" class="headerlink" title="1.2 GGGG"></a>1.2 GGGG</h2><a id="more"></a><p>```bash<br>![]</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-Android是如何管理Activity&quot;&gt;&lt;a href=&quot;#1-Android是如何管理Activity&quot; class=&quot;headerlink&quot; title=&quot;1.Android是如何管理Activity?&quot;&gt;&lt;/a&gt;1.Android是如何管理Activity?&lt;/h2&gt;&lt;p&gt;Android采用Task管理多个Activity,当我们启动一个应用时，Android会为之创建一个Task，然后启动这个应用的入口（即&lt;intent-filter&gt;）&lt;/intent-filter&gt;&lt;/p&gt;
&lt;h3 id=&quot;1-2方&quot;&gt;&lt;a href=&quot;#1-2方&quot; class=&quot;headerlink&quot; title=&quot;1.2方&quot;&gt;&lt;/a&gt;1.2方&lt;/h3&gt;&lt;p&gt;2222222222222222&lt;/p&gt;
&lt;h2 id=&quot;1-2-GGGG&quot;&gt;&lt;a href=&quot;#1-2-GGGG&quot; class=&quot;headerlink&quot; title=&quot;1.2 GGGG&quot;&gt;&lt;/a&gt;1.2 GGGG&lt;/h2&gt;
    
    </summary>
    
      <category term="Android" scheme="http://yoursite.com/categories/Android/"/>
    
    
      <category term="Android四大组件之Activity" scheme="http://yoursite.com/tags/Android%E5%9B%9B%E5%A4%A7%E7%BB%84%E4%BB%B6%E4%B9%8BActivity/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2017/09/17/hello-world/"/>
    <id>http://yoursite.com/2017/09/17/hello-world/</id>
    <published>2017-09-17T01:15:34.489Z</published>
    <updated>2017-09-17T01:15:34.497Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
