<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Number 47</title>
  <icon>https://www.gravatar.com/avatar/fa526ab3292afa877876ffaa274810be</icon>
  <subtitle>Keep calm and carry on</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="www.number47.cn/"/>
  <updated>2020-06-12T17:15:24.682Z</updated>
  <id>www.number47.cn/</id>
  
  <author>
    <name>Number 47</name>
    <email>820368938@qq.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Spring Security（四）Spring Social</title>
    <link href="www.number47.cn/posts/1444918557/"/>
    <id>www.number47.cn/posts/1444918557/</id>
    <published>2020-06-10T04:56:35.000Z</published>
    <updated>2020-06-12T17:15:24.682Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Spring-Security（四）Spring-Social"><a href="#Spring-Security（四）Spring-Social" class="headerlink" title="Spring Security（四）Spring Social"></a>Spring Security（四）Spring Social</h1><h2 id="1-OAuth流程"><a href="#1-OAuth流程" class="headerlink" title="1. OAuth流程"></a>1. OAuth流程</h2><ol start="0"><li><p>资源所有者访问第三方应用</p></li><li><p>第三方应用请求授权</p></li><li><p>资源所有者同意授权</p></li><li><p>第三方应用去认证服务器申请令牌</p></li><li><p>认证服务器验证用户是否授权给第三方，发放令牌</p></li><li><p>第三方通过令牌，请求资源服务器</p></li><li><p>资源服务器通过令牌去认证服务器判断是否有用，开放资源</p></li></ol><p><img src="https://raw.githubusercontent.com/number-47/image-store/master/img/20200611012029.png" alt></p><h2 id="2-OAuth的授权模式"><a href="#2-OAuth的授权模式" class="headerlink" title="2. OAuth的授权模式"></a>2. OAuth的授权模式</h2><ol><li>授权码模式</li><li>密码模式</li><li>客户端模式</li><li>简化模式</li></ol><h2 id="3-授权码模式"><a href="#3-授权码模式" class="headerlink" title="3. 授权码模式"></a>3. 授权码模式</h2><p>用户同意授权是在认证服务器进行的。</p><p><img src="https://raw.githubusercontent.com/number-47/image-store/master/img/20200611012846.png" alt></p><h2 id="4-Spring-Social基本原理"><a href="#4-Spring-Social基本原理" class="headerlink" title="4.Spring Social基本原理"></a>4.Spring Social基本原理</h2><p>第三方登录</p><p>通过授权码模式获取用户基本信息，第三方通过用户信息构建<code>Authentication</code>并放入<code>SecurityContext</code>中,从而实现登录。</p><p><img src="https://raw.githubusercontent.com/number-47/image-store/master/img/20200611014057.png" alt></p><ol><li><p>1-5是标准流程</p></li><li><p>6每个服务商提供的个人信息不一样</p></li><li><p>服务提供商 <code>ServiceProvider(AbstractOAuth2ServiceProvider)</code></p></li><li><p>实现了服务提供商1-5的流程<code>Oauth2Operation(OAutheTemplate)</code></p></li><li><p>封装6 <code>Api(AbstractOauthApiBinding)</code></p></li><li><p>与7相关的：<code>Connection(Oauth2Connection)</code>由<code>ConnectionFactory(OAuth2ConnectionFactory)</code>创建的，<code>ConnectionFactory(OAuth2ConnectionFactory)</code>里面包含了<code>ServiceProvider</code>实例的，使用这个<code>ServiceProvider</code>走1-6流程，<code>ApiAdapter</code>将每个服务商不同的数据结构转化为<code>Connection(Oauth2Connection)</code>。</p></li><li><p>服务商的用户信息如何与我们的业务的用户信息关联？</p><p>通过数据库<code>DB UserConnection</code>的表服务商的用户信息与业务的用户信息的对应关系，通过<code>UsersConnectionRepository(JdbcUsersConnectionRepository)</code>操作这个表。</p><p><img src="https://raw.githubusercontent.com/number-47/image-store/master/img/20200613011253.png" alt></p></li></ol><h3 id="4-1-Spring-Social实现QQ登录"><a href="#4-1-Spring-Social实现QQ登录" class="headerlink" title="4.1. Spring Social实现QQ登录"></a>4.1. Spring Social实现QQ登录</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Spring-Security（四）Spring-Social&quot;&gt;&lt;a href=&quot;#Spring-Security（四）Spring-Social&quot; class=&quot;headerlink&quot; title=&quot;Spring Security（四）Spring Socia
      
    
    </summary>
    
      <category term="Spring Security" scheme="www.number47.cn/categories/Spring-Security/"/>
    
    
      <category term="Spring Security" scheme="www.number47.cn/tags/Spring-Security/"/>
    
  </entry>
  
  <entry>
    <title>Spring Security（二）记住我</title>
    <link href="www.number47.cn/posts/1444918557/"/>
    <id>www.number47.cn/posts/1444918557/</id>
    <published>2020-06-10T04:56:35.000Z</published>
    <updated>2020-06-10T10:08:26.261Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Spring-Security（二）记住我"><a href="#Spring-Security（二）记住我" class="headerlink" title="Spring Security（二）记住我"></a>Spring Security（二）记住我</h1><h2 id="1-记住我基本原理"><a href="#1-记住我基本原理" class="headerlink" title="1.记住我基本原理"></a>1.记住我基本原理</h2><p><img src="https://raw.githubusercontent.com/number-47/image-store/master/img/image-20200610100325244.png" alt></p><h2 id="2-实现"><a href="#2-实现" class="headerlink" title="2. 实现"></a>2. 实现</h2><h3 id="2-1-修改登录页"><a href="#2-1-修改登录页" class="headerlink" title="2.1 修改登录页"></a>2.1 修改登录页</h3><p>增加记住我的checkbox，name值固定为remember-me</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;tr&gt;</span><br><span class="line">    &lt;td colspan=&quot;2&quot;&gt;记住我：</span><br><span class="line">    &lt;input type=&quot;checkbox&quot; name=&quot;remember-me&quot; value=&quot;true&quot;&gt;&lt;/td&gt;</span><br><span class="line">&lt;/tr&gt;</span><br></pre></td></tr></table></figure><h3 id="2-2-增加remember的spring-security的配置"><a href="#2-2-增加remember的spring-security的配置" class="headerlink" title="2.2. 增加remember的spring security的配置"></a>2.2. 增加remember的spring security的配置</h3><p>创建<code>PersistentTokenRepository</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@Bean</span><br><span class="line">   public PersistentTokenRepository persistentTokenRepository()&#123;</span><br><span class="line">      JdbcTokenRepositoryImpl tokenRepository = new JdbcTokenRepositoryImpl();</span><br><span class="line">      tokenRepository.setDataSource(dataSource);</span><br><span class="line">//    tokenRepository.setCreateTableOnStartup(true); 自动建表，建好后注释掉</span><br><span class="line">      return tokenRepository;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">protected void configure(HttpSecurity http) throws Exception &#123;</span><br><span class="line">   http.apply(validateCodeSecurityConfig)</span><br><span class="line">         .and()</span><br><span class="line">         .formLogin() //表单验证</span><br><span class="line">            .loginPage(&quot;/authentication/require&quot;)</span><br><span class="line">            .loginProcessingUrl(&quot;/authentication/form&quot;)</span><br><span class="line">            .successHandler(number47AuthenticationSuccessHandler)</span><br><span class="line">            .failureHandler(number47AuthenticationFailureHandler)</span><br><span class="line">            .and()</span><br><span class="line">         //记住我</span><br><span class="line">         .rememberMe()</span><br><span class="line">            .tokenRepository(persistentTokenRepository())</span><br><span class="line">            //过期时间</span><br><span class="line">            .tokenValiditySeconds(securityProperties.getBrowser().getRememberMeSeconds())</span><br><span class="line">            .userDetailsService(userDetailsService)</span><br><span class="line">            .and()</span><br><span class="line">         .authorizeRequests() //对请求进行授权</span><br><span class="line">         //不需要认证的请求</span><br><span class="line">         .antMatchers(&quot;/authentication/require&quot;,</span><br><span class="line">               &quot;/code/image&quot;,</span><br><span class="line">               securityProperties.getBrowser().getLoginPage())</span><br><span class="line">         .permitAll()</span><br><span class="line">         .anyRequest()       //任何请求</span><br><span class="line">         .authenticated()//身份认证</span><br><span class="line">         .and()</span><br><span class="line">         .csrf().disable(); //跨站伪造请求关闭</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-解析"><a href="#3-解析" class="headerlink" title="3. 解析"></a>3. 解析</h2><p>Spring Security登录成功之后到<code>AbstractAuthenticationProcessingFilter</code>的<code>successfulAuthentication</code>的方法中</p><p><code>AbstractAuthenticationProcessingFilter</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * Default behaviour for successful authentication.</span><br><span class="line"> * &lt;ol&gt;</span><br><span class="line"> * &lt;li&gt;Sets the successful &lt;tt&gt;Authentication&lt;/tt&gt; object on the</span><br><span class="line"> * &#123;@link SecurityContextHolder&#125;&lt;/li&gt;</span><br><span class="line"> * &lt;li&gt;Informs the configured &lt;tt&gt;RememberMeServices&lt;/tt&gt; of the successful login&lt;/li&gt;</span><br><span class="line"> * &lt;li&gt;Fires an &#123;@link InteractiveAuthenticationSuccessEvent&#125; via the configured</span><br><span class="line"> * &lt;tt&gt;ApplicationEventPublisher&lt;/tt&gt;&lt;/li&gt;</span><br><span class="line"> * &lt;li&gt;Delegates additional behaviour to the &#123;@link AuthenticationSuccessHandler&#125;.&lt;/li&gt;</span><br><span class="line"> * &lt;/ol&gt;</span><br><span class="line"> *</span><br><span class="line"> * Subclasses can override this method to continue the &#123;@link FilterChain&#125; after</span><br><span class="line"> * successful authentication.</span><br><span class="line"> * @param request</span><br><span class="line"> * @param response</span><br><span class="line"> * @param chain</span><br><span class="line"> * @param authResult the object returned from the &lt;tt&gt;attemptAuthentication&lt;/tt&gt;</span><br><span class="line"> * method.</span><br><span class="line"> * @throws IOException</span><br><span class="line"> * @throws ServletException</span><br><span class="line"> */</span><br><span class="line">protected void successfulAuthentication(HttpServletRequest request,</span><br><span class="line">      HttpServletResponse response, FilterChain chain, Authentication authResult)</span><br><span class="line">      throws IOException, ServletException &#123;</span><br><span class="line"></span><br><span class="line">   if (logger.isDebugEnabled()) &#123;</span><br><span class="line">      logger.debug(&quot;Authentication success. Updating SecurityContextHolder to contain: &quot;</span><br><span class="line">            + authResult);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   SecurityContextHolder.getContext().setAuthentication(authResult);</span><br><span class="line">//记住我</span><br><span class="line">   rememberMeServices.loginSuccess(request, response, authResult);</span><br><span class="line"></span><br><span class="line">   // Fire event</span><br><span class="line">   if (this.eventPublisher != null) &#123;</span><br><span class="line">      eventPublisher.publishEvent(new InteractiveAuthenticationSuccessEvent(</span><br><span class="line">            authResult, this.getClass()));</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   successHandler.onAuthenticationSuccess(request, response, authResult);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>PersistentTokenBasedRememberMeServices</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * Creates a new persistent login token with a new series number, stores the data in</span><br><span class="line"> * the persistent token repository and adds the corresponding cookie to the response.</span><br><span class="line"> *</span><br><span class="line"> */</span><br><span class="line">protected void onLoginSuccess(HttpServletRequest request,</span><br><span class="line">      HttpServletResponse response, Authentication successfulAuthentication) &#123;</span><br><span class="line">   String username = successfulAuthentication.getName();</span><br><span class="line"></span><br><span class="line">   logger.debug(&quot;Creating new persistent login for user &quot; + username);</span><br><span class="line"></span><br><span class="line">   PersistentRememberMeToken persistentToken = new PersistentRememberMeToken(</span><br><span class="line">         username, generateSeriesData(), generateTokenData(), new Date());</span><br><span class="line">   try &#123;</span><br><span class="line">     //创建token，保存到数据库</span><br><span class="line">      tokenRepository.createNewToken(persistentToken);</span><br><span class="line">      //token写到浏览器</span><br><span class="line">      addCookie(persistentToken, request, response);</span><br><span class="line">   &#125;</span><br><span class="line">   catch (Exception e) &#123;</span><br><span class="line">      logger.error(&quot;Failed to save persistent token &quot;, e);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重启应用，直接访问服务的时候，进入到<code>RememberMeAuthenticationFilter</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line">public void doFilter(ServletRequest req, ServletResponse res, FilterChain chain)</span><br><span class="line">      throws IOException, ServletException &#123;</span><br><span class="line">   HttpServletRequest request = (HttpServletRequest) req;</span><br><span class="line">   HttpServletResponse response = (HttpServletResponse) res;</span><br><span class="line"></span><br><span class="line">   if (SecurityContextHolder.getContext().getAuthentication() == null) &#123;</span><br><span class="line">   //调用AbstractRememberMeServices的autoLogin</span><br><span class="line">      Authentication rememberMeAuth = rememberMeServices.autoLogin(request,</span><br><span class="line">            response);</span><br><span class="line"></span><br><span class="line">      if (rememberMeAuth != null) &#123;</span><br><span class="line">         // Attempt authenticaton via AuthenticationManager</span><br><span class="line">         try &#123;</span><br><span class="line">            rememberMeAuth = authenticationManager.authenticate(rememberMeAuth);</span><br><span class="line"></span><br><span class="line">            // Store to SecurityContextHolder</span><br><span class="line">            SecurityContextHolder.getContext().setAuthentication(rememberMeAuth);</span><br><span class="line"></span><br><span class="line">            onSuccessfulAuthentication(request, response, rememberMeAuth);</span><br><span class="line"></span><br><span class="line">            if (logger.isDebugEnabled()) &#123;</span><br><span class="line">               logger.debug(&quot;SecurityContextHolder populated with remember-me token: &apos;&quot;</span><br><span class="line">                     + SecurityContextHolder.getContext().getAuthentication()</span><br><span class="line">                     + &quot;&apos;&quot;);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            // Fire event</span><br><span class="line">            if (this.eventPublisher != null) &#123;</span><br><span class="line">               eventPublisher</span><br><span class="line">                     .publishEvent(new InteractiveAuthenticationSuccessEvent(</span><br><span class="line">                           SecurityContextHolder.getContext()</span><br><span class="line">                                 .getAuthentication(), this.getClass()));</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            if (successHandler != null) &#123;</span><br><span class="line">               successHandler.onAuthenticationSuccess(request, response,</span><br><span class="line">                     rememberMeAuth);</span><br><span class="line"></span><br><span class="line">               return;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">         &#125;</span><br><span class="line">         catch (AuthenticationException authenticationException) &#123;</span><br><span class="line">            if (logger.isDebugEnabled()) &#123;</span><br><span class="line">               logger.debug(</span><br><span class="line">                     &quot;SecurityContextHolder not populated with remember-me token, as &quot;</span><br><span class="line">                           + &quot;AuthenticationManager rejected Authentication returned by RememberMeServices: &apos;&quot;</span><br><span class="line">                           + rememberMeAuth</span><br><span class="line">                           + &quot;&apos;; invalidating remember-me token&quot;,</span><br><span class="line">                     authenticationException);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            rememberMeServices.loginFail(request, response);</span><br><span class="line"></span><br><span class="line">            onUnsuccessfulAuthentication(request, response,</span><br><span class="line">                  authenticationException);</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      chain.doFilter(request, response);</span><br><span class="line">   &#125;</span><br><span class="line">   else &#123;</span><br><span class="line">      if (logger.isDebugEnabled()) &#123;</span><br><span class="line">         logger.debug(&quot;SecurityContextHolder not populated with remember-me token, as it already contained: &apos;&quot;</span><br><span class="line">               + SecurityContextHolder.getContext().getAuthentication() + &quot;&apos;&quot;);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      chain.doFilter(request, response);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>AbstractRememberMeServices</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * Template implementation which locates the Spring Security cookie, decodes it into a</span><br><span class="line"> * delimited array of tokens and submits it to subclasses for processing via the</span><br><span class="line"> * &lt;tt&gt;processAutoLoginCookie&lt;/tt&gt; method.</span><br><span class="line"> * &lt;p&gt;</span><br><span class="line"> * The returned username is then used to load the UserDetails object for the user,</span><br><span class="line"> * which in turn is used to create a valid authentication token.</span><br><span class="line"> */</span><br><span class="line">@Override</span><br><span class="line">public final Authentication autoLogin(HttpServletRequest request,</span><br><span class="line">      HttpServletResponse response) &#123;</span><br><span class="line">   String rememberMeCookie = extractRememberMeCookie(request);</span><br><span class="line"></span><br><span class="line">   if (rememberMeCookie == null) &#123;</span><br><span class="line">      return null;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   logger.debug(&quot;Remember-me cookie detected&quot;);</span><br><span class="line"></span><br><span class="line">   if (rememberMeCookie.length() == 0) &#123;</span><br><span class="line">      logger.debug(&quot;Cookie was empty&quot;);</span><br><span class="line">      cancelCookie(request, response);</span><br><span class="line">      return null;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   UserDetails user = null;</span><br><span class="line"></span><br><span class="line">   try &#123;</span><br><span class="line">      String[] cookieTokens = decodeCookie(rememberMeCookie);</span><br><span class="line">      //调用PersistentTokenBasedRememberMeServices的processAutoLoginCookie</span><br><span class="line">      user = processAutoLoginCookie(cookieTokens, request, response);</span><br><span class="line">      userDetailsChecker.check(user);</span><br><span class="line"></span><br><span class="line">      logger.debug(&quot;Remember-me cookie accepted&quot;);</span><br><span class="line"></span><br><span class="line">      return createSuccessfulAuthentication(request, user);</span><br><span class="line">   &#125;</span><br><span class="line">   catch (CookieTheftException cte) &#123;</span><br><span class="line">      cancelCookie(request, response);</span><br><span class="line">      throw cte;</span><br><span class="line">   &#125;</span><br><span class="line">   catch (UsernameNotFoundException noUser) &#123;</span><br><span class="line">      logger.debug(&quot;Remember-me login was valid but corresponding user not found.&quot;,</span><br><span class="line">            noUser);</span><br><span class="line">   &#125;</span><br><span class="line">   catch (InvalidCookieException invalidCookie) &#123;</span><br><span class="line">      logger.debug(&quot;Invalid remember-me cookie: &quot; + invalidCookie.getMessage());</span><br><span class="line">   &#125;</span><br><span class="line">   catch (AccountStatusException statusInvalid) &#123;</span><br><span class="line">      logger.debug(&quot;Invalid UserDetails: &quot; + statusInvalid.getMessage());</span><br><span class="line">   &#125;</span><br><span class="line">   catch (RememberMeAuthenticationException e) &#123;</span><br><span class="line">      logger.debug(e.getMessage());</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   cancelCookie(request, response);</span><br><span class="line">   return null;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>PersistentTokenBasedRememberMeServices</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * Locates the presented cookie data in the token repository, using the series id. If</span><br><span class="line"> * the data compares successfully with that in the persistent store, a new token is</span><br><span class="line"> * generated and stored with the same series. The corresponding cookie value is set on</span><br><span class="line"> * the response.</span><br><span class="line"> *</span><br><span class="line"> * @param cookieTokens the series and token values</span><br><span class="line"> *</span><br><span class="line"> * @throws RememberMeAuthenticationException if there is no stored token corresponding</span><br><span class="line"> * to the submitted cookie, or if the token in the persistent store has expired.</span><br><span class="line"> * @throws InvalidCookieException if the cookie doesn&apos;t have two tokens as expected.</span><br><span class="line"> * @throws CookieTheftException if a presented series value is found, but the stored</span><br><span class="line"> * token is different from the one presented.</span><br><span class="line"> */</span><br><span class="line">protected UserDetails processAutoLoginCookie(String[] cookieTokens,</span><br><span class="line">      HttpServletRequest request, HttpServletResponse response) &#123;</span><br><span class="line"></span><br><span class="line">   if (cookieTokens.length != 2) &#123;</span><br><span class="line">      throw new InvalidCookieException(&quot;Cookie token did not contain &quot; + 2</span><br><span class="line">            + &quot; tokens, but contained &apos;&quot; + Arrays.asList(cookieTokens) + &quot;&apos;&quot;);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   final String presentedSeries = cookieTokens[0];</span><br><span class="line">   final String presentedToken = cookieTokens[1];</span><br><span class="line">//通过series去数据库查找token</span><br><span class="line">   PersistentRememberMeToken token = tokenRepository</span><br><span class="line">         .getTokenForSeries(presentedSeries);</span><br><span class="line"></span><br><span class="line">   if (token == null) &#123;</span><br><span class="line">      // No series match, so we can&apos;t authenticate using this cookie</span><br><span class="line">      throw new RememberMeAuthenticationException(</span><br><span class="line">            &quot;No persistent token found for series id: &quot; + presentedSeries);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   // We have a match for this user/series combination</span><br><span class="line">   if (!presentedToken.equals(token.getTokenValue())) &#123;</span><br><span class="line">      // Token doesn&apos;t match series value. Delete all logins for this user and throw</span><br><span class="line">      // an exception to warn them.</span><br><span class="line">      tokenRepository.removeUserTokens(token.getUsername());</span><br><span class="line"></span><br><span class="line">      throw new CookieTheftException(</span><br><span class="line">            messages.getMessage(</span><br><span class="line">                  &quot;PersistentTokenBasedRememberMeServices.cookieStolen&quot;,</span><br><span class="line">                  &quot;Invalid remember-me token (Series/token) mismatch. Implies previous cookie theft attack.&quot;));</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   if (token.getDate().getTime() + getTokenValiditySeconds() * 1000L &lt; System</span><br><span class="line">         .currentTimeMillis()) &#123;</span><br><span class="line">      throw new RememberMeAuthenticationException(&quot;Remember-me login has expired&quot;);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   // Token also matches, so login is valid. Update the token value, keeping the</span><br><span class="line">   // *same* series number.</span><br><span class="line">   if (logger.isDebugEnabled()) &#123;</span><br><span class="line">      logger.debug(&quot;Refreshing persistent login token for user &apos;&quot;</span><br><span class="line">            + token.getUsername() + &quot;&apos;, series &apos;&quot; + token.getSeries() + &quot;&apos;&quot;);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   PersistentRememberMeToken newToken = new PersistentRememberMeToken(</span><br><span class="line">         token.getUsername(), token.getSeries(), generateTokenData(), new Date());</span><br><span class="line"></span><br><span class="line">   try &#123;</span><br><span class="line">      tokenRepository.updateToken(newToken.getSeries(), newToken.getTokenValue(),</span><br><span class="line">            newToken.getDate());</span><br><span class="line">      addCookie(newToken, request, response);</span><br><span class="line">   &#125;</span><br><span class="line">   catch (Exception e) &#123;</span><br><span class="line">      logger.error(&quot;Failed to update token: &quot;, e);</span><br><span class="line">      throw new RememberMeAuthenticationException(</span><br><span class="line">            &quot;Autologin failed due to data access problem&quot;);</span><br><span class="line">   &#125;</span><br><span class="line">//调用UserDetailsService的loadUserByUsername</span><br><span class="line">   return getUserDetailsService().loadUserByUsername(token.getUsername());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Spring-Security（二）记住我&quot;&gt;&lt;a href=&quot;#Spring-Security（二）记住我&quot; class=&quot;headerlink&quot; title=&quot;Spring Security（二）记住我&quot;&gt;&lt;/a&gt;Spring Security（二）记住我&lt;/
      
    
    </summary>
    
      <category term="Spring Security" scheme="www.number47.cn/categories/Spring-Security/"/>
    
    
      <category term="Spring Security" scheme="www.number47.cn/tags/Spring-Security/"/>
    
  </entry>
  
  <entry>
    <title>Spring Security（三）短信验证码登录</title>
    <link href="www.number47.cn/posts/1444918557/"/>
    <id>www.number47.cn/posts/1444918557/</id>
    <published>2020-06-10T04:56:35.000Z</published>
    <updated>2020-06-10T12:22:37.620Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Spring-Security（三）短信验证码登录"><a href="#Spring-Security（三）短信验证码登录" class="headerlink" title="Spring Security（三）短信验证码登录"></a>Spring Security（三）短信验证码登录</h1><h2 id="1-验证码生成"><a href="#1-验证码生成" class="headerlink" title="1. 验证码生成"></a>1. 验证码生成</h2><p>验证码处理流程<code>ValidateCodeProcessor</code></p><p>生成相同的实现在<code>AbstractValidateCodeProcessor</code>,不同的对应不同的实现类</p><p><img src="https://raw.githubusercontent.com/number-47/image-store/master/img/20200610173753.png" alt></p><h2 id="2-短信登录"><a href="#2-短信登录" class="headerlink" title="2. 短信登录"></a>2. 短信登录</h2><p><img src="https://raw.githubusercontent.com/number-47/image-store/master/img/20200610182112.png" alt></p><h3 id="2-1-代码实现"><a href="#2-1-代码实现" class="headerlink" title="2.1. 代码实现"></a>2.1. 代码实现</h3><h4 id="2-1-1-SmsAuthenticationToken的实现"><a href="#2-1-1-SmsAuthenticationToken的实现" class="headerlink" title="2.1.1. SmsAuthenticationToken的实现"></a>2.1.1. <code>SmsAuthenticationToken</code>的实现</h4><p>参考<code>UsernamePasswordAuthenticationToken</code>的实现</p><h4 id="2-1-2-SmsAuthenticationProvider的实现"><a href="#2-1-2-SmsAuthenticationProvider的实现" class="headerlink" title="2.1.2. SmsAuthenticationProvider的实现"></a>2.1.2. <code>SmsAuthenticationProvider</code>的实现</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">public class SmsCodeAuthenticationProvider implements AuthenticationProvider &#123;</span><br><span class="line"></span><br><span class="line">   private UserDetailsService userDetailsService;</span><br><span class="line"></span><br><span class="line">   /*</span><br><span class="line">    * (non-Javadoc)</span><br><span class="line">    *</span><br><span class="line">    * @see org.springframework.security.authentication.AuthenticationProvider#</span><br><span class="line">    * authenticate(org.springframework.security.core.Authentication)</span><br><span class="line">    */</span><br><span class="line">   @Override</span><br><span class="line">   public Authentication authenticate(Authentication authentication) throws AuthenticationException &#123;</span><br><span class="line"></span><br><span class="line">      SmsCodeAuthenticationToken authenticationToken = (SmsCodeAuthenticationToken) authentication;</span><br><span class="line">      //通过手机号读用户信息</span><br><span class="line">      UserDetails user = userDetailsService.loadUserByUsername((String) authenticationToken.getPrincipal());</span><br><span class="line"></span><br><span class="line">      if (user == null) &#123;</span><br><span class="line">         throw new InternalAuthenticationServiceException(&quot;无法获取用户信息&quot;);</span><br><span class="line">      &#125;</span><br><span class="line">      //重新构造SmsCodeAuthenticationToken，设置setAuthenticated为true,user.getAuthorities()为用户的权限</span><br><span class="line">      SmsCodeAuthenticationToken authenticationResult = new SmsCodeAuthenticationToken(user, user.getAuthorities());</span><br><span class="line">      //将未认证SmsCodeAuthenticationToken的details放入到已认证的SmsCodeAuthenticationToken的details</span><br><span class="line">      authenticationResult.setDetails(authenticationToken.getDetails());</span><br><span class="line"></span><br><span class="line">      return authenticationResult;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   /*</span><br><span class="line">    * (non-Javadoc)</span><br><span class="line">    * AuthenticationManager通过这个处理SmsCodeAuthenticationToken</span><br><span class="line">    * @see org.springframework.security.authentication.AuthenticationProvider#</span><br><span class="line">    * supports(java.lang.Class)</span><br><span class="line">    */</span><br><span class="line">   @Override</span><br><span class="line">   public boolean supports(Class&lt;?&gt; authentication) &#123;</span><br><span class="line">      //判断传进来的authentication是不是SmsCodeAuthenticationToken</span><br><span class="line">      return SmsCodeAuthenticationToken.class.isAssignableFrom(authentication);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   public UserDetailsService getUserDetailsService() &#123;</span><br><span class="line">      return userDetailsService;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   public void setUserDetailsService(UserDetailsService userDetailsService) &#123;</span><br><span class="line">      this.userDetailsService = userDetailsService;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2-3-SmsCodeAuthenticationFilter的实现"><a href="#2-2-3-SmsCodeAuthenticationFilter的实现" class="headerlink" title="2.2.3. SmsCodeAuthenticationFilter的实现"></a>2.2.3. <code>SmsCodeAuthenticationFilter</code>的实现</h3><p>参考<code>UsernamePasswordAuthenticationFilter</code>的代码</p><h3 id="2-2-4-增加短信登录的配置"><a href="#2-2-4-增加短信登录的配置" class="headerlink" title="2.2.4.  增加短信登录的配置"></a>2.2.4.  增加短信登录的配置</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public void configure(HttpSecurity http) throws Exception &#123;</span><br><span class="line"></span><br><span class="line">   SmsCodeAuthenticationFilter smsCodeAuthenticationFilter = new SmsCodeAuthenticationFilter();</span><br><span class="line">//设置AuthenticationManager   smsCodeAuthenticationFilter.setAuthenticationManager(http.getSharedObject(AuthenticationManager.class));</span><br><span class="line"> //设置成功处理器 smsCodeAuthenticationFilter.setAuthenticationSuccessHandler(number47AuthenticationSuccessHandler);</span><br><span class="line">   //设置失败处理器smsCodeAuthenticationFilter.setAuthenticationFailureHandler(number47AuthenticationFailureHandler);</span><br><span class="line"></span><br><span class="line">   SmsCodeAuthenticationProvider smsCodeAuthenticationProvider = new SmsCodeAuthenticationProvider();</span><br><span class="line">   //设置userDetails</span><br><span class="line">   smsCodeAuthenticationProvider.setUserDetailsService(userDetailsService);</span><br><span class="line">//设置短信的provider和过滤器</span><br><span class="line">   http.authenticationProvider(smsCodeAuthenticationProvider)</span><br><span class="line">         .addFilterAfter(smsCodeAuthenticationFilter, UsernamePasswordAuthenticationFilter.class);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Spring-Security（三）短信验证码登录&quot;&gt;&lt;a href=&quot;#Spring-Security（三）短信验证码登录&quot; class=&quot;headerlink&quot; title=&quot;Spring Security（三）短信验证码登录&quot;&gt;&lt;/a&gt;Spring Secu
      
    
    </summary>
    
      <category term="Spring Security" scheme="www.number47.cn/categories/Spring-Security/"/>
    
    
      <category term="Spring Security" scheme="www.number47.cn/tags/Spring-Security/"/>
    
  </entry>
  
  <entry>
    <title>WireMock伪造REST服务</title>
    <link href="www.number47.cn/posts/2041720639/"/>
    <id>www.number47.cn/posts/2041720639/</id>
    <published>2020-06-09T04:56:35.000Z</published>
    <updated>2020-06-08T16:51:14.698Z</updated>
    
    <content type="html"><![CDATA[<h1 id="WireMock伪造REST服务"><a href="#WireMock伪造REST服务" class="headerlink" title="WireMock伪造REST服务"></a>WireMock伪造REST服务</h1><h2 id="1-下载WireMock的jar包"><a href="#1-下载WireMock的jar包" class="headerlink" title="1. 下载WireMock的jar包"></a>1. 下载WireMock的jar包</h2><p>官网：<a href="http://wiremock.org/docs/running-standalone/" target="_blank" rel="noopener">http://wiremock.org/docs/running-standalone/</a></p><p><img src="https://raw.githubusercontent.com/number-47/image-store/master/img/20200608232913.png" alt="下载"></p><h2 id="2-运行下载的jar"><a href="#2-运行下载的jar" class="headerlink" title="2. 运行下载的jar"></a>2. 运行下载的jar</h2><p>指定运行端口为8062</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar wiremock-standalone-2.26.3.jar --port 8062</span><br></pre></td></tr></table></figure><h2 id="3-代码实现WireMock接收请求后返回的什么请求"><a href="#3-代码实现WireMock接收请求后返回的什么请求" class="headerlink" title="3. 代码实现WireMock接收请求后返回的什么请求"></a>3. 代码实现WireMock接收请求后返回的什么请求</h2><h3 id="3-1-导入wirmock的依赖"><a href="#3-1-导入wirmock的依赖" class="headerlink" title="3.1. 导入wirmock的依赖"></a>3.1. 导入wirmock的依赖</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.github.tomakehurst&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;wiremock&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.26.3&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.apache.httpcomponents&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;httpclient&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;4.5.12&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h3 id="3-2-写对应的接口地址和响应"><a href="#3-2-写对应的接口地址和响应" class="headerlink" title="3.2. 写对应的接口地址和响应"></a>3.2. 写对应的接口地址和响应</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">package com.number47.wiremock;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import org.apache.commons.io.FileUtils;</span><br><span class="line">import org.apache.commons.lang3.StringUtils;</span><br><span class="line">import org.springframework.core.io.ClassPathResource;</span><br><span class="line"></span><br><span class="line">import java.io.IOException;</span><br><span class="line"></span><br><span class="line">import static com.github.tomakehurst.wiremock.client.WireMock.*;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @author number47</span><br><span class="line"> * @date 2020/6/8 23:58</span><br><span class="line"> * @description</span><br><span class="line"> */</span><br><span class="line">public class MockServer &#123;</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) throws IOException &#123;</span><br><span class="line">configureFor(8062);</span><br><span class="line">//清除以前的配置</span><br><span class="line">removeAllMappings();</span><br><span class="line">//伪造一个测试桩</span><br><span class="line">//请求接口，返回对应json,读取01.txt的文件</span><br><span class="line">mock(&quot;/order/1&quot;, &quot;01&quot;);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public static void mock(String url, String fileName) throws IOException &#123;</span><br><span class="line">ClassPathResource resource = new ClassPathResource(&quot;mock/response/&quot; + fileName + &quot;.txt&quot;);</span><br><span class="line">String content = StringUtils.join(FileUtils.readLines(resource.getFile(), &quot;UTF-8&quot;).toArray(), &quot;\n&quot;);</span><br><span class="line">stubFor(get(urlPathEqualTo(url))</span><br><span class="line">.willReturn(aResponse()</span><br><span class="line">.withBody(content)</span><br><span class="line">.withStatus(200)));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;WireMock伪造REST服务&quot;&gt;&lt;a href=&quot;#WireMock伪造REST服务&quot; class=&quot;headerlink&quot; title=&quot;WireMock伪造REST服务&quot;&gt;&lt;/a&gt;WireMock伪造REST服务&lt;/h1&gt;&lt;h2 id=&quot;1-下载WireM
      
    
    </summary>
    
      <category term="REST" scheme="www.number47.cn/categories/REST/"/>
    
    
      <category term="REST" scheme="www.number47.cn/tags/REST/"/>
    
  </entry>
  
  <entry>
    <title>Java设计模式-单例模式</title>
    <link href="www.number47.cn/posts/1262053707/"/>
    <id>www.number47.cn/posts/1262053707/</id>
    <published>2020-06-01T04:56:00.000Z</published>
    <updated>2020-06-22T16:14:29.038Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Java设计模式-单例模式"><a href="#Java设计模式-单例模式" class="headerlink" title="Java设计模式-单例模式"></a>Java设计模式-单例模式</h2><h2 id="1-单例模式"><a href="#1-单例模式" class="headerlink" title="1. 单例模式"></a>1. 单例模式</h2><p>这种模式涉及到一个单一的类，该类负责创建自己的对象，同时确保只有单个对象被创建。这个类提供了一种访问其唯一的对象的方式，可以直接访问，不需要实例化该类的对象。</p><h3 id="1-1-例子"><a href="#1-1-例子" class="headerlink" title="1.1. 例子"></a>1.1. 例子</h3><p>有自己要创建单例的静态对象</p><p>构造函数为私有</p><p>对外提供获取唯一可用的对象的方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">public class SingleObject &#123;</span><br><span class="line"> </span><br><span class="line">   //创建 SingleObject 的一个对象</span><br><span class="line">   private static SingleObject instance = new SingleObject();</span><br><span class="line"> </span><br><span class="line">   //让构造函数为 private，这样该类就不会被实例化</span><br><span class="line">   private SingleObject()&#123;&#125;</span><br><span class="line"> </span><br><span class="line">   //获取唯一可用的对象</span><br><span class="line">   public static SingleObject getInstance()&#123;</span><br><span class="line">      return instance;</span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   public void showMessage()&#123;</span><br><span class="line">      System.out.println(&quot;Hello World!&quot;);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">public class SingletonPatternDemo &#123;</span><br><span class="line">   public static void main(String[] args) &#123;</span><br><span class="line"> </span><br><span class="line">      //不合法的构造函数</span><br><span class="line">      //编译时错误：构造函数 SingleObject() 是不可见的</span><br><span class="line">      //SingleObject object = new SingleObject();</span><br><span class="line"> </span><br><span class="line">      //获取唯一可用的对象</span><br><span class="line">      SingleObject object = SingleObject.getInstance();</span><br><span class="line"> </span><br><span class="line">      //显示消息</span><br><span class="line">      object.showMessage();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-实现方式"><a href="#2-实现方式" class="headerlink" title="2. 实现方式"></a>2. 实现方式</h2><h3 id="2-1-懒汉式，线程不安全"><a href="#2-1-懒汉式，线程不安全" class="headerlink" title="2.1. 懒汉式，线程不安全"></a>2.1. 懒汉式，线程不安全</h3><p><strong>是否 Lazy 初始化：</strong>是</p><p><strong>是否多线程安全：</strong>否</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">public class Singleton &#123;  </span><br><span class="line">    private static Singleton instance;  </span><br><span class="line">    private Singleton ()&#123;&#125;  </span><br><span class="line">  </span><br><span class="line">    public static Singleton getInstance() &#123;  </span><br><span class="line">        if (instance == null) &#123;  </span><br><span class="line">            instance = new Singleton();  </span><br><span class="line">        &#125;  </span><br><span class="line">        return instance;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2-懒汉式，线程安全"><a href="#2-2-懒汉式，线程安全" class="headerlink" title="2.2. 懒汉式，线程安全"></a>2.2. 懒汉式，线程安全</h3><p><strong>是否 Lazy 初始化：</strong>是</p><p><strong>是否多线程安全：</strong>是</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public class Singleton &#123;  </span><br><span class="line">    private static Singleton instance;  </span><br><span class="line">    private Singleton ()&#123;&#125;  </span><br><span class="line">    public static synchronized Singleton getInstance() &#123;  </span><br><span class="line">        if (instance == null) &#123;  </span><br><span class="line">            instance = new Singleton();  </span><br><span class="line">        &#125;  </span><br><span class="line">        return instance;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-3-饿汉式，线程安全"><a href="#2-3-饿汉式，线程安全" class="headerlink" title="2.3. 饿汉式，线程安全"></a>2.3. 饿汉式，线程安全</h3><p><strong>是否 Lazy 初始化：</strong>否</p><p><strong>是否多线程安全：</strong>是</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public class Singleton &#123;  </span><br><span class="line">    private static Singleton instance = new Singleton();  </span><br><span class="line">    private Singleton ()&#123;&#125;  </span><br><span class="line">    public static Singleton getInstance() &#123;  </span><br><span class="line">    return instance;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-4-双检锁-双重校验锁（DCL，即-double-checked-locking）"><a href="#2-4-双检锁-双重校验锁（DCL，即-double-checked-locking）" class="headerlink" title="2.4. 双检锁/双重校验锁（DCL，即 double-checked locking）"></a>2.4. 双检锁/双重校验锁（DCL，即 double-checked locking）</h3><p><strong>是否 Lazy 初始化：</strong>是</p><p><strong>是否多线程安全：</strong>是</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">public class Singleton &#123;  </span><br><span class="line">    private volatile static Singleton singleton;  </span><br><span class="line">    private Singleton ()&#123;&#125;  </span><br><span class="line">    public static Singleton getSingleton() &#123;  </span><br><span class="line">    if (singleton == null) &#123;  </span><br><span class="line">        synchronized (Singleton.class) &#123;  </span><br><span class="line">        if (singleton == null) &#123;  </span><br><span class="line">            singleton = new Singleton();  </span><br><span class="line">        &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">    return singleton;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-5-登记式-静态内部类"><a href="#2-5-登记式-静态内部类" class="headerlink" title="2.5. 登记式/静态内部类"></a>2.5. 登记式/静态内部类</h3><p><strong>是否 Lazy 初始化：</strong>是</p><p><strong>是否多线程安全：</strong>是</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">public class Singleton &#123;  </span><br><span class="line">    private static class SingletonHolder &#123;  </span><br><span class="line">    private static final Singleton INSTANCE = new Singleton();  </span><br><span class="line">    &#125;  </span><br><span class="line">    private Singleton ()&#123;&#125;  </span><br><span class="line">    public static final Singleton getInstance() &#123;  </span><br><span class="line">   return SingletonHolder.INSTANCE;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-6-枚举"><a href="#2-6-枚举" class="headerlink" title="2.6. 枚举"></a>2.6. 枚举</h3><p><strong>是否 Lazy 初始化：</strong>否</p><p><strong>是否多线程安全：</strong>是</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public enum Singleton &#123;  </span><br><span class="line">    INSTANCE;  </span><br><span class="line">    public void whateverMethod() &#123;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>建议：</strong>不建议使用第 1 种和第 2 种懒汉方式，建议使用第 3 种饿汉方式。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Java设计模式-单例模式&quot;&gt;&lt;a href=&quot;#Java设计模式-单例模式&quot; class=&quot;headerlink&quot; title=&quot;Java设计模式-单例模式&quot;&gt;&lt;/a&gt;Java设计模式-单例模式&lt;/h2&gt;&lt;h2 id=&quot;1-单例模式&quot;&gt;&lt;a href=&quot;#1-单
      
    
    </summary>
    
      <category term="设计模式" scheme="www.number47.cn/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="www.number47.cn/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Lesson22-Unit3 Part3(2)</title>
    <link href="www.number47.cn/posts/2431835038/"/>
    <id>www.number47.cn/posts/2431835038/</id>
    <published>2019-11-29T04:56:35.000Z</published>
    <updated>2019-11-28T18:17:54.744Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Vocabulary"><a href="#Vocabulary" class="headerlink" title="Vocabulary"></a>Vocabulary</h1><h2 id="Source-of-Energy-能源"><a href="#Source-of-Energy-能源" class="headerlink" title="Source of Energy 能源"></a>Source of Energy 能源</h2><h3 id="solar-energy-solar-power-太阳能"><a href="#solar-energy-solar-power-太阳能" class="headerlink" title="solar energy/solar power 太阳能"></a>solar energy/solar power 太阳能</h3><p>solar adj.太阳的</p><p>clean 干净的 -&gt; cleanest 最干净的</p><p>plentiful 充足的 -&gt; most plentiful 最充足的</p><p><strong>one of + the形容词最高级+名词复数   最….的之一</strong></p><p>e.g. Tony Stark is one of the richest people in the world.</p><p>Solar power depends on sunlight, so in cloudy weather and at night, no power is generated.</p><h3 id="wind-energy-风能"><a href="#wind-energy-风能" class="headerlink" title="wind energy 风能"></a>wind energy 风能</h3><p>non-: 表示否定的前缀</p><p>non-polluting 无污染的</p><p>non-alcoholoic 不含酒精的</p><p>non-traditional 非传统的</p><p>non-smoking 无烟的</p><p>Wind turbines convert the kinetic energy of the wind into mechanical power.</p><p>wind turbine 风力涡轮机  </p><p>mechanical power 机械能</p><p>kinetic energy 动能</p><p>convert A into B 把A转化为B</p><h3 id="nuclear-energy-核能"><a href="#nuclear-energy-核能" class="headerlink" title="nuclear energy 核能"></a>nuclear energy 核能</h3><p>efficient 高效的</p><p>carbon gas 含碳气体</p><p>waste product 废弃物</p><p>Chernobyl 切尔诺贝利</p><p>deadly adj.致命的，致死的</p><p>a deadly virus 致命的病毒</p><p>a deadly weapon 致命的武器</p><p>deadly radioactive waste products 致命的放射性废弃物</p><h3 id="fossil-fuel-化石燃料"><a href="#fossil-fuel-化石燃料" class="headerlink" title="fossil fuel 化石燃料"></a>fossil fuel 化石燃料</h3><p>A major source of energy comes from the buring of fossil fuels, such as coal and oil.</p><p>the buring of fossil fuels 化石燃料的燃烧</p><p>coal 煤</p><p>oil 石油</p><p>CO2= carbon dioxide 二氧化碳</p><p>When we burn fossil fuels, waste gases, such as CO2 are produced.</p><p>当我们燃烧化石燃料时，废弃的气体就产生了，比如二氧化碳。</p><p>remain v.保持不变，仍然是</p><p>remain + n. </p><p>e.g. It remains a secret.</p><p>remain + adj.</p><p>e.g. You have the right to remain silent. 你有权保持沉默。</p><h3 id="hydropower-水力发电"><a href="#hydropower-水力发电" class="headerlink" title="hydropower 水力发电"></a>hydropower 水力发电</h3><p>the kinetic energy of falling water</p><p>高处落下的睡产生的动能</p><p>Output is reliable and can be regulated to meet the demand, except during periods of drought.</p><p>水力发电的能量稳定，可以调控以满足需求，除了干旱时期之外。</p><p>reliable  adj.可靠的，可信赖的</p><p>output  n. 输出，产出</p><p>input  n. 输入，投入</p><p>regulate  v.控制调节</p><p>e.g. My monther regulates how much TV I can watch.</p><p><strong>to meet the demand 为了满足需求（动词不定式表示目的）</strong></p><p>meet v. 满足</p><p><strong>meet the needs/requirements</strong></p><p>except 除…之外</p><p>drought  n.干旱</p><h2 id="Types-of-Words"><a href="#Types-of-Words" class="headerlink" title="Types of Words"></a>Types of Words</h2><h3 id="noun-名词-n-amp-pronoun代词-pron"><a href="#noun-名词-n-amp-pronoun代词-pron" class="headerlink" title="noun 名词 n.&amp; pronoun代词 pron."></a>noun 名词 n.&amp; pronoun代词 pron.</h3><p>represent object</p><p>a person,  an animal,  a thing, including an idea</p><h3 id="verb动词-v"><a href="#verb动词-v" class="headerlink" title="verb动词 v."></a>verb动词 v.</h3><p>express actions: sit down , stand up</p><p>express relationships:  to love someone , to own something</p><h3 id="adjective-形容词-adj"><a href="#adjective-形容词-adj" class="headerlink" title="adjective 形容词 adj."></a>adjective 形容词 adj.</h3><p>describe objects: a tall building</p><h3 id="adverb-副词-adv"><a href="#adverb-副词-adv" class="headerlink" title="adverb 副词 adv."></a>adverb 副词 adv.</h3><p>describe actions: run fast,walk slowly, quickly, loudly, quietly, well</p><p>Adverbs express the quality of an action, such as how well or poorly something is done.</p><h3 id="conjunction-连接词-conj"><a href="#conjunction-连接词-conj" class="headerlink" title="conjunction 连接词 conj."></a>conjunction 连接词 conj.</h3><p>connect thing or actions : to read and write</p><h1 id="Dialogue"><a href="#Dialogue" class="headerlink" title="Dialogue"></a>Dialogue</h1><p><strong>将来时的结构之一：will do</strong></p><p><strong>将来时的结构之二：现在进行时表将来</strong></p><p>We are moving to a new office. 我们要搬去新的办公室了.</p><p>move, go, come, leave 等转移动词</p><p>e.g. I’m coming.</p><p>​       She’s leaving for Beijing.</p><p>When is this going to happen?</p><p><strong>将来时的结构之三：be going to + do</strong>  意愿（打算在将来做某事）</p><p>e.g. We are going to move to a new office. 我们要搬去新的办公室了.</p><p><strong>be supposed to do sth 应当做某事</strong></p><p><strong>How far away..?有多远</strong></p><p>How far away is the new office?</p><p><strong>How far away … from ..? 从哪到哪距离多远</strong></p><p>How far away is the Sun from Earth?</p><p>We’re not sure yet, but it will mean a longer commute of most of us.</p><p>yet 用于否定句和疑问句，谈论尚未发生的事</p><p><strong>commute</strong></p><p>n. 通勤 a longer commute</p><p>v. 通勤 I commute by subway</p><p><strong>In other words 也就是说，换句话说</strong></p><p>That depends on your point of view.</p><p>point of view 观点，看法</p><p><strong>From my point of view …./ In my opinion…. 在我看来..</strong></p><p><strong>depend on 取决于</strong></p><p>plan to do sth 打算做某事</p><p>不定代词+形容词</p><p>somthing hot and spicy</p><p><strong>on one’s own 靠自己</strong></p><p><strong>now that 既然，由于</strong></p><p>e.g. I‘m going to relax now that the school year is over. 既然一个学年结束了，我想放松下</p><p><strong>in favor of sth 支持，赞同某事</strong></p><p><strong>be against sth 反对某事</strong></p><p><strong>at first 一开始，最开始</strong></p><p><strong>be serious about sth. 对某事认真严肃</strong></p><p>take a risk/take risks 冒险</p><p><strong>be tired of doing sth 厌倦做某事</strong></p><p><strong>come as a surprise to sb 让某人出乎意料，感到突然</strong></p><p><strong>come as no surprise 不出意外</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Vocabulary&quot;&gt;&lt;a href=&quot;#Vocabulary&quot; class=&quot;headerlink&quot; title=&quot;Vocabulary&quot;&gt;&lt;/a&gt;Vocabulary&lt;/h1&gt;&lt;h2 id=&quot;Source-of-Energy-能源&quot;&gt;&lt;a href=&quot;#So
      
    
    </summary>
    
      <category term="English" scheme="www.number47.cn/categories/English/"/>
    
      <category term="教学课" scheme="www.number47.cn/categories/English/%E6%95%99%E5%AD%A6%E8%AF%BE/"/>
    
    
      <category term="English" scheme="www.number47.cn/tags/English/"/>
    
      <category term="教学课" scheme="www.number47.cn/tags/%E6%95%99%E5%AD%A6%E8%AF%BE/"/>
    
  </entry>
  
  <entry>
    <title>Spring Security（一）认证流程</title>
    <link href="www.number47.cn/posts/1444918557/"/>
    <id>www.number47.cn/posts/1444918557/</id>
    <published>2019-10-24T04:56:35.000Z</published>
    <updated>2020-06-08T19:46:21.197Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Spring-Security（一）认证流程"><a href="#Spring-Security（一）认证流程" class="headerlink" title="Spring Security（一）认证流程"></a>Spring Security（一）认证流程</h1><h2 id="1-核心功能"><a href="#1-核心功能" class="headerlink" title="1. 核心功能"></a>1. 核心功能</h2><ol><li>认证（你是谁）</li><li>授权（你能干什么）</li><li>攻击防护（防止伪造身份）</li></ol><h2 id="2-基本原理"><a href="#2-基本原理" class="headerlink" title="2. 基本原理"></a>2. 基本原理</h2><p>绿色的可以通过配置控制</p><p><img src="https://raw.githubusercontent.com/number-47/image-store/master/img/20200609011104.png" alt></p><h2 id="3-自定义用户认证逻辑"><a href="#3-自定义用户认证逻辑" class="headerlink" title="3. 自定义用户认证逻辑"></a>3. 自定义用户认证逻辑</h2><h3 id="3-1-处理用户信息获取逻辑"><a href="#3-1-处理用户信息获取逻辑" class="headerlink" title="3.1. 处理用户信息获取逻辑"></a>3.1. 处理用户信息获取逻辑</h3><h4 id="Spring-Security的用户获取封装在UserDetailsService"><a href="#Spring-Security的用户获取封装在UserDetailsService" class="headerlink" title="Spring Security的用户获取封装在UserDetailsService"></a>Spring Security的用户获取封装在UserDetailsService</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">UserDetails <span class="title">loadUserByUsername</span><span class="params">(String username)</span> <span class="keyword">throws</span> UsernameNotFoundException</span>;</span><br></pre></td></tr></table></figure><h4 id="实现自定义的UserDetailsService"><a href="#实现自定义的UserDetailsService" class="headerlink" title="实现自定义的UserDetailsService"></a>实现自定义的UserDetailsService</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">package com.number47.security.browser;</span><br><span class="line"></span><br><span class="line">import org.slf4j.Logger;</span><br><span class="line">import org.slf4j.LoggerFactory;</span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.security.core.authority.AuthorityUtils;</span><br><span class="line">import org.springframework.security.core.userdetails.User;</span><br><span class="line">import org.springframework.security.core.userdetails.UserDetails;</span><br><span class="line">import org.springframework.security.core.userdetails.UserDetailsService;</span><br><span class="line">import org.springframework.security.core.userdetails.UsernameNotFoundException;</span><br><span class="line">import org.springframework.security.crypto.password.PasswordEncoder;</span><br><span class="line">import org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @author number47</span><br><span class="line"> * @date 2019/9/2 22:26</span><br><span class="line"> * @description</span><br><span class="line"> */</span><br><span class="line">@Component</span><br><span class="line">public class MyUserDetailService implements UserDetailsService &#123;</span><br><span class="line"></span><br><span class="line">   private Logger logger = LoggerFactory.getLogger(getClass());</span><br><span class="line"></span><br><span class="line">   @Autowired</span><br><span class="line">   private PasswordEncoder passwordEncoder;</span><br><span class="line"></span><br><span class="line">   @Override</span><br><span class="line">   public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException &#123;</span><br><span class="line">      logger.info(&quot;登录用户名：&quot;+ username);</span><br><span class="line">      //根据用户名查找信息</span><br><span class="line">      //根据查找到的用户信息判断是否被冻结</span><br><span class="line">      //User用的是Spring Security的User,已经实现了UserDetails了</span><br><span class="line">      return new User(username,</span><br><span class="line">            passwordEncoder.encode(&quot;123456&quot;),</span><br><span class="line">            true, </span><br><span class="line">            true,</span><br><span class="line">            true,</span><br><span class="line">            true, </span><br><span class="line">            AuthorityUtils.commaSeparatedStringToAuthorityList(&quot;admin&quot;));</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-2-处理用户校验逻辑"><a href="#3-2-处理用户校验逻辑" class="headerlink" title="3.2. 处理用户校验逻辑"></a>3.2. 处理用户校验逻辑</h3><p>实现自己的User对象，实现UserDetails，实现对应的方法</p><h3 id="3-3-处理密码加密解密"><a href="#3-3-处理密码加密解密" class="headerlink" title="3.3. 处理密码加密解密"></a>3.3. 处理密码加密解密</h3><p>使用<code>PasswordEncoder</code></p><h3 id="3-4-处理不同类型的请求"><a href="#3-4-处理不同类型的请求" class="headerlink" title="3.4. 处理不同类型的请求"></a>3.4. 处理不同类型的请求</h3><p>请求成功后是重定向到页面还是返回json</p><p><img src="https://raw.githubusercontent.com/number-47/image-store/master/img/20200609020604.png" alt></p><h2 id="4-认证处理说明"><a href="#4-认证处理说明" class="headerlink" title="4. 认证处理说明"></a>4. 认证处理说明</h2><h4 id="4-1-认证处理流程"><a href="#4-1-认证处理流程" class="headerlink" title="4.1. 认证处理流程"></a>4.1. 认证处理流程</h4><p><img src="https://raw.githubusercontent.com/number-47/image-store/master/img/20200609023905.png" alt></p><p><code>UsernamePasswordAuthenticationFilter</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">UsernamePasswordAuthenticationToken authRequest = new UsernamePasswordAuthenticationToken(</span><br><span class="line">      username, password);</span><br><span class="line"></span><br><span class="line">// Allow subclasses to set the &quot;details&quot; property</span><br><span class="line">setDetails(request, authRequest);</span><br><span class="line">//传递UsernamePasswordAuthenticationToken给ProviderManager的authenticate()</span><br><span class="line">return this.getAuthenticationManager().authenticate(authRequest);</span><br></pre></td></tr></table></figure><p><code>ProviderManager</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line">ProviderManager是AuthenticationManager的实现类</span><br><span class="line"></span><br><span class="line">public Authentication authenticate(Authentication authentication)</span><br><span class="line">throws AuthenticationException &#123;</span><br><span class="line">Class&lt;? extends Authentication&gt; toTest = authentication.getClass();</span><br><span class="line">AuthenticationException lastException = null;</span><br><span class="line">Authentication result = null;</span><br><span class="line">boolean debug = logger.isDebugEnabled();</span><br><span class="line">//不同的provider所支持的authentication是不一样的,UsernamePasswordAuthenticationFilter传递的是UsernamePasswordAuthenticationToken</span><br><span class="line">for (AuthenticationProvider provider : getProviders()) &#123;</span><br><span class="line">if (!provider.supports(toTest)) &#123;</span><br><span class="line">continue;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if (debug) &#123;</span><br><span class="line">logger.debug(&quot;Authentication attempt using &quot;</span><br><span class="line">+ provider.getClass().getName());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">try &#123;</span><br><span class="line">result = provider.authenticate(authentication);</span><br><span class="line"></span><br><span class="line">if (result != null) &#123;</span><br><span class="line">copyDetails(authentication, result);</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">catch (AccountStatusException e) &#123;</span><br><span class="line">prepareException(e, authentication);</span><br><span class="line">// SEC-546: Avoid polling additional providers if auth failure is due to</span><br><span class="line">// invalid account status</span><br><span class="line">throw e;</span><br><span class="line">&#125;</span><br><span class="line">catch (InternalAuthenticationServiceException e) &#123;</span><br><span class="line">prepareException(e, authentication);</span><br><span class="line">throw e;</span><br><span class="line">&#125;</span><br><span class="line">catch (AuthenticationException e) &#123;</span><br><span class="line">lastException = e;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if (result == null &amp;&amp; parent != null) &#123;</span><br><span class="line">// Allow the parent to try.</span><br><span class="line">try &#123;</span><br><span class="line">result = parent.authenticate(authentication);</span><br><span class="line">&#125;</span><br><span class="line">catch (ProviderNotFoundException e) &#123;</span><br><span class="line">// ignore as we will throw below if no other exception occurred prior to</span><br><span class="line">// calling parent and the parent</span><br><span class="line">// may throw ProviderNotFound even though a provider in the child already</span><br><span class="line">// handled the request</span><br><span class="line">&#125;</span><br><span class="line">catch (AuthenticationException e) &#123;</span><br><span class="line">lastException = e;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if (result != null) &#123;</span><br><span class="line">if (eraseCredentialsAfterAuthentication</span><br><span class="line">&amp;&amp; (result instanceof CredentialsContainer)) &#123;</span><br><span class="line">// Authentication is complete. Remove credentials and other secret data</span><br><span class="line">// from authentication</span><br><span class="line">((CredentialsContainer) result).eraseCredentials();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">eventPublisher.publishAuthenticationSuccess(result);</span><br><span class="line">return result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// Parent was null, or didn&apos;t authenticate (or throw an exception).</span><br><span class="line"></span><br><span class="line">if (lastException == null) &#123;</span><br><span class="line">lastException = new ProviderNotFoundException(messages.getMessage(</span><br><span class="line">&quot;ProviderManager.providerNotFound&quot;,</span><br><span class="line">new Object[] &#123; toTest.getName() &#125;,</span><br><span class="line">&quot;No AuthenticationProvider found for &#123;0&#125;&quot;));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">prepareException(lastException, authentication);</span><br><span class="line"></span><br><span class="line">throw lastException;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>DaoAuthenticationProvider</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">protected final UserDetails retrieveUser(String username,</span><br><span class="line">      UsernamePasswordAuthenticationToken authentication)</span><br><span class="line">      throws AuthenticationException &#123;</span><br><span class="line">   UserDetails loadedUser;</span><br><span class="line"></span><br><span class="line">   try &#123;</span><br><span class="line">   //调用了loadUserByUsername</span><br><span class="line">      loadedUser = this.getUserDetailsService().loadUserByUsername(username);</span><br><span class="line">   &#125;</span><br><span class="line">   catch (UsernameNotFoundException notFound) &#123;</span><br><span class="line">      if (authentication.getCredentials() != null) &#123;</span><br><span class="line">         String presentedPassword = authentication.getCredentials().toString();</span><br><span class="line">         passwordEncoder.isPasswordValid(userNotFoundEncodedPassword,</span><br><span class="line">               presentedPassword, null);</span><br><span class="line">      &#125;</span><br><span class="line">      throw notFound;</span><br><span class="line">   &#125;</span><br><span class="line">   catch (Exception repositoryProblem) &#123;</span><br><span class="line">      throw new InternalAuthenticationServiceException(</span><br><span class="line">            repositoryProblem.getMessage(), repositoryProblem);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   if (loadedUser == null) &#123;</span><br><span class="line">      throw new InternalAuthenticationServiceException(</span><br><span class="line">            &quot;UserDetailsService returned null, which is an interface contract violation&quot;);</span><br><span class="line">   &#125;</span><br><span class="line">   return loadedUser;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>DaoAuthenticationProvider</code>的一些实现写在<code>AbstractUserDetailsAuthenticationProvider</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line">public Authentication authenticate(Authentication authentication)</span><br><span class="line">      throws AuthenticationException &#123;</span><br><span class="line">   Assert.isInstanceOf(UsernamePasswordAuthenticationToken.class, authentication,</span><br><span class="line">         messages.getMessage(</span><br><span class="line">               &quot;AbstractUserDetailsAuthenticationProvider.onlySupports&quot;,</span><br><span class="line">               &quot;Only UsernamePasswordAuthenticationToken is supported&quot;));</span><br><span class="line"></span><br><span class="line">   // Determine username</span><br><span class="line">   String username = (authentication.getPrincipal() == null) ? &quot;NONE_PROVIDED&quot;</span><br><span class="line">         : authentication.getName();</span><br><span class="line"></span><br><span class="line">   boolean cacheWasUsed = true;</span><br><span class="line">   UserDetails user = this.userCache.getUserFromCache(username);</span><br><span class="line"></span><br><span class="line">   if (user == null) &#123;</span><br><span class="line">      cacheWasUsed = false;</span><br><span class="line"></span><br><span class="line">      try &#123;</span><br><span class="line">         user = retrieveUser(username,</span><br><span class="line">               (UsernamePasswordAuthenticationToken) authentication);</span><br><span class="line">      &#125;</span><br><span class="line">      catch (UsernameNotFoundException notFound) &#123;</span><br><span class="line">         logger.debug(&quot;User &apos;&quot; + username + &quot;&apos; not found&quot;);</span><br><span class="line"></span><br><span class="line">         if (hideUserNotFoundExceptions) &#123;</span><br><span class="line">            throw new BadCredentialsException(messages.getMessage(</span><br><span class="line">                  &quot;AbstractUserDetailsAuthenticationProvider.badCredentials&quot;,</span><br><span class="line">                  &quot;Bad credentials&quot;));</span><br><span class="line">         &#125;</span><br><span class="line">         else &#123;</span><br><span class="line">            throw notFound;</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      Assert.notNull(user,</span><br><span class="line">            &quot;retrieveUser returned null - a violation of the interface contract&quot;);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   try &#123;</span><br><span class="line">      preAuthenticationChecks.check(user);</span><br><span class="line">      additionalAuthenticationChecks(user,</span><br><span class="line">            (UsernamePasswordAuthenticationToken) authentication);</span><br><span class="line">   &#125;</span><br><span class="line">   catch (AuthenticationException exception) &#123;</span><br><span class="line">      if (cacheWasUsed) &#123;</span><br><span class="line">         // There was a problem, so try again after checking</span><br><span class="line">         // we&apos;re using latest data (i.e. not from the cache)</span><br><span class="line">         cacheWasUsed = false;</span><br><span class="line">         user = retrieveUser(username,</span><br><span class="line">               (UsernamePasswordAuthenticationToken) authentication);</span><br><span class="line">         preAuthenticationChecks.check(user);</span><br><span class="line">         additionalAuthenticationChecks(user,</span><br><span class="line">               (UsernamePasswordAuthenticationToken) authentication);</span><br><span class="line">      &#125;</span><br><span class="line">      else &#123;</span><br><span class="line">         throw exception;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   postAuthenticationChecks.check(user);</span><br><span class="line"></span><br><span class="line">   if (!cacheWasUsed) &#123;</span><br><span class="line">      this.userCache.putUserInCache(user);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   Object principalToReturn = user;</span><br><span class="line"></span><br><span class="line">   if (forcePrincipalAsString) &#123;</span><br><span class="line">      principalToReturn = user.getUsername();</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   return createSuccessAuthentication(principalToReturn, authentication, user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>AbstractAuthenticationProcessingFilter</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">public void doFilter(ServletRequest req, ServletResponse res, FilterChain chain)</span><br><span class="line">      throws IOException, ServletException &#123;</span><br><span class="line"></span><br><span class="line">   HttpServletRequest request = (HttpServletRequest) req;</span><br><span class="line">   HttpServletResponse response = (HttpServletResponse) res;</span><br><span class="line"></span><br><span class="line">   if (!requiresAuthentication(request, response)) &#123;</span><br><span class="line">      chain.doFilter(request, response);</span><br><span class="line"></span><br><span class="line">      return;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   if (logger.isDebugEnabled()) &#123;</span><br><span class="line">      logger.debug(&quot;Request is to process authentication&quot;);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   Authentication authResult;</span><br><span class="line"></span><br><span class="line">   try &#123;</span><br><span class="line">      //调用</span><br><span class="line">      authResult = attemptAuthentication(request, response);</span><br><span class="line">      if (authResult == null) &#123;</span><br><span class="line">         // return immediately as subclass has indicated that it hasn&apos;t completed</span><br><span class="line">         // authentication</span><br><span class="line">         return;</span><br><span class="line">      &#125;</span><br><span class="line">      sessionStrategy.onAuthentication(authResult, request, response);</span><br><span class="line">   &#125;</span><br><span class="line">   catch (InternalAuthenticationServiceException failed) &#123;</span><br><span class="line">      logger.error(</span><br><span class="line">            &quot;An internal error occurred while trying to authenticate the user.&quot;,</span><br><span class="line">            failed);</span><br><span class="line">            //认证失败</span><br><span class="line">      unsuccessfulAuthentication(request, response, failed);</span><br><span class="line"></span><br><span class="line">      return;</span><br><span class="line">   &#125;</span><br><span class="line">   catch (AuthenticationException failed) &#123;</span><br><span class="line">      // Authentication failed</span><br><span class="line">      unsuccessfulAuthentication(request, response, failed);</span><br><span class="line"></span><br><span class="line">      return;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   // Authentication success</span><br><span class="line">   if (continueChainBeforeSuccessfulAuthentication) &#123;</span><br><span class="line">      chain.doFilter(request, response);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   successfulAuthentication(request, response, chain, authResult);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-2-认证结果如何在多个请求之间共享"><a href="#4-2-认证结果如何在多个请求之间共享" class="headerlink" title="4.2. 认证结果如何在多个请求之间共享"></a>4.2. 认证结果如何在多个请求之间共享</h4><p>放在session,什么时候放入session,放入了什么，什么时候读出</p><p><img src="https://raw.githubusercontent.com/number-47/image-store/master/img/20200609031841.png" alt></p><p><code>AbstractAuthenticationProcessingFilter</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">protected void successfulAuthentication(HttpServletRequest request,</span><br><span class="line">      HttpServletResponse response, FilterChain chain, Authentication authResult)</span><br><span class="line">      throws IOException, ServletException &#123;</span><br><span class="line"></span><br><span class="line">   if (logger.isDebugEnabled()) &#123;</span><br><span class="line">      logger.debug(&quot;Authentication success. Updating SecurityContextHolder to contain: &quot;</span><br><span class="line">            + authResult);</span><br><span class="line">   &#125;</span><br><span class="line">//认证成功后将结果放入到SecurityContext里</span><br><span class="line">   SecurityContextHolder.getContext().setAuthentication(authResult);</span><br><span class="line"></span><br><span class="line">   rememberMeServices.loginSuccess(request, response, authResult);</span><br><span class="line"></span><br><span class="line">   // Fire event</span><br><span class="line">   if (this.eventPublisher != null) &#123;</span><br><span class="line">      eventPublisher.publishEvent(new InteractiveAuthenticationSuccessEvent(</span><br><span class="line">            authResult, this.getClass()));</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   successHandler.onAuthenticationSuccess(request, response, authResult);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>SecurityContextImpl</code>是<code>SecurityContext</code>的实现类</p><p>包装了Authentication，重写了equals和hashCode，保证唯一性</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line">/*</span><br><span class="line"> * Copyright 2004, 2005, 2006 Acegi Technology Pty Limited</span><br><span class="line"> *</span><br><span class="line"> * Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);</span><br><span class="line"> * you may not use this file except in compliance with the License.</span><br><span class="line"> * You may obtain a copy of the License at</span><br><span class="line"> *</span><br><span class="line"> *      http://www.apache.org/licenses/LICENSE-2.0</span><br><span class="line"> *</span><br><span class="line"> * Unless required by applicable law or agreed to in writing, software</span><br><span class="line"> * distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span><br><span class="line"> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span><br><span class="line"> * See the License for the specific language governing permissions and</span><br><span class="line"> * limitations under the License.</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">package org.springframework.security.core.context;</span><br><span class="line"></span><br><span class="line">import org.springframework.security.core.Authentication;</span><br><span class="line">import org.springframework.security.core.SpringSecurityCoreVersion;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * Base implementation of &#123;@link SecurityContext&#125;.</span><br><span class="line"> * &lt;p&gt;</span><br><span class="line"> * Used by default by &#123;@link SecurityContextHolder&#125; strategies.</span><br><span class="line"> *</span><br><span class="line"> * @author Ben Alex</span><br><span class="line"> */</span><br><span class="line">public class SecurityContextImpl implements SecurityContext &#123;</span><br><span class="line"></span><br><span class="line">   private static final long serialVersionUID = SpringSecurityCoreVersion.SERIAL_VERSION_UID;</span><br><span class="line"></span><br><span class="line">   // ~ Instance fields</span><br><span class="line">   // ================================================================================================</span><br><span class="line"></span><br><span class="line">   private Authentication authentication;</span><br><span class="line"></span><br><span class="line">   // ~ Methods</span><br><span class="line">   // ========================================================================================================</span><br><span class="line"></span><br><span class="line">   public boolean equals(Object obj) &#123;</span><br><span class="line">      if (obj instanceof SecurityContextImpl) &#123;</span><br><span class="line">         SecurityContextImpl test = (SecurityContextImpl) obj;</span><br><span class="line"></span><br><span class="line">         if ((this.getAuthentication() == null) &amp;&amp; (test.getAuthentication() == null)) &#123;</span><br><span class="line">            return true;</span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">         if ((this.getAuthentication() != null) &amp;&amp; (test.getAuthentication() != null)</span><br><span class="line">               &amp;&amp; this.getAuthentication().equals(test.getAuthentication())) &#123;</span><br><span class="line">            return true;</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      return false;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   public Authentication getAuthentication() &#123;</span><br><span class="line">      return authentication;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   public int hashCode() &#123;</span><br><span class="line">      if (this.authentication == null) &#123;</span><br><span class="line">         return -1;</span><br><span class="line">      &#125;</span><br><span class="line">      else &#123;</span><br><span class="line">         return this.authentication.hashCode();</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   public void setAuthentication(Authentication authentication) &#123;</span><br><span class="line">      this.authentication = authentication;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   public String toString() &#123;</span><br><span class="line">      StringBuilder sb = new StringBuilder();</span><br><span class="line">      sb.append(super.toString());</span><br><span class="line"></span><br><span class="line">      if (this.authentication == null) &#123;</span><br><span class="line">         sb.append(&quot;: Null authentication&quot;);</span><br><span class="line">      &#125;</span><br><span class="line">      else &#123;</span><br><span class="line">         sb.append(&quot;: Authentication: &quot;).append(this.authentication);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      return sb.toString();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>SecurityContextHolder</code>是什么？</p><p><code>SecurityContextHolder</code>是<code>ThreadLocal</code>的封装,<code>ThreadLocal</code>是跟线程绑定的map,在同一个线程里，在这个方法往<code>ThreadLocal</code>放入的东西，在另外一个方法是可以读出来的，可以理解为线程级的程序变量。</p><p>一般请求和响应是在同一个线程进行的。</p><p>通过<code>SecurityContextPersistenceFilter</code>检查线程，如果请求进来的时候如果有认证信息放入到session,响应的时候有认证信息放入到session里。</p><h4 id="4-3-获取认证用户信息"><a href="#4-3-获取认证用户信息" class="headerlink" title="4.3. 获取认证用户信息"></a>4.3. 获取认证用户信息</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 获取个人信息方式1</span><br><span class="line"> * @return</span><br><span class="line"> */</span><br><span class="line">@GetMapping(&quot;/me&quot;)</span><br><span class="line">public Object getCurrentUser()&#123;</span><br><span class="line">   return SecurityContextHolder.getContext().getAuthentication();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 获取个人信息方式2</span><br><span class="line"> * @return</span><br><span class="line"> */</span><br><span class="line">@GetMapping(&quot;/me2&quot;)</span><br><span class="line">public Object getCurrentUser(Authentication authentication)&#123;</span><br><span class="line">   return authentication;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 获取Authentication的Principal</span><br><span class="line"> * @return</span><br><span class="line"> */</span><br><span class="line">@GetMapping(&quot;/me3&quot;)</span><br><span class="line">public Object getCurrentUser(@AuthenticationPrincipal UserDetails user)&#123;</span><br><span class="line">   return user;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Spring-Security（一）认证流程&quot;&gt;&lt;a href=&quot;#Spring-Security（一）认证流程&quot; class=&quot;headerlink&quot; title=&quot;Spring Security（一）认证流程&quot;&gt;&lt;/a&gt;Spring Security（一）认证
      
    
    </summary>
    
      <category term="Spring Security" scheme="www.number47.cn/categories/Spring-Security/"/>
    
    
      <category term="Spring Security" scheme="www.number47.cn/tags/Spring-Security/"/>
    
  </entry>
  
  <entry>
    <title>专项课18 旅游场景</title>
    <link href="www.number47.cn/posts/3125715510/"/>
    <id>www.number47.cn/posts/3125715510/</id>
    <published>2019-10-24T04:56:35.000Z</published>
    <updated>2019-11-28T18:19:28.948Z</updated>
    
    <content type="html"><![CDATA[<h1 id="专项课18-旅游场景"><a href="#专项课18-旅游场景" class="headerlink" title="专项课18 旅游场景"></a>专项课18 旅游场景</h1><p>I’d like a room. 我想开一个房间。</p><p>I’d like to reserve a room. 我想开一个房间。</p><p>Do you have a reservation? 你有预定吗？</p><h2 id="part1：酒店英文"><a href="#part1：酒店英文" class="headerlink" title="part1：酒店英文"></a>part1：酒店英文</h2><h3 id="out-of…表示什么没了"><a href="#out-of…表示什么没了" class="headerlink" title="out of…表示什么没了"></a>out of…表示什么没了</h3><p>eg:We’re out of <strong>shampoo</strong> and <strong>shower gel</strong>.我们没有洗发水和沐浴露了。</p><h3 id="I‘d-like-表示想要什么"><a href="#I‘d-like-表示想要什么" class="headerlink" title="I‘d like ..表示想要什么"></a>I‘d like ..表示想要什么</h3><p>And I’d like an <strong>extra blanket</strong> and <strong>towel</strong>. 我还要一条毯子和毛巾。</p><h3 id="sth-doesn’t-work-表示什么东西坏了。"><a href="#sth-doesn’t-work-表示什么东西坏了。" class="headerlink" title="sth doesn’t work 表示什么东西坏了。"></a>sth doesn’t work 表示什么东西坏了。</h3><p>eg: The AC doesn’t work.空调坏了。</p><p>The TV doesn’t work./The TV set doesn’t work.电视机坏了。</p><p>The TV: 电视机或电视机节目</p><p>The TV set: 电视机机器（更为准确）</p><p>My <strong>key card</strong> doesn’t work. 我的房卡坏了。</p><h3 id="send-someone-表示叫人-派人-送人"><a href="#send-someone-表示叫人-派人-送人" class="headerlink" title="send someone 表示叫人/派人/送人"></a>send someone 表示叫人/派人/送人</h3><p><strong>check it out</strong> 看一看，看一下 </p><p>Could you send someone to check it out? 你们能不能派个人过来看看？</p><p>Could you send someone to pick up the food tray? 能叫个人收一下餐盘吗？</p><p>Hi,I’am going out and I’ll be back in the evening,can you send someone to clean my room?</p><p>我就要出门，晚上回来，你能派人做一下房间清理吗？</p><h2 id="Part2-：交通出行"><a href="#Part2-：交通出行" class="headerlink" title="Part2 ：交通出行"></a>Part2 ：交通出行</h2><h3 id="请求酒店帮忙预定出租车"><a href="#请求酒店帮忙预定出租车" class="headerlink" title="请求酒店帮忙预定出租车"></a>请求酒店帮忙预定出租车</h3><p>Can you <strong>book</strong> a taxi for me? I’d like to go to Times Square tomorrow morning at 9.</p><p>你能帮我预定一辆出租车吗？我明天早上九点要去时代广场。</p><h3 id="自己打车，跟司机交流"><a href="#自己打车，跟司机交流" class="headerlink" title="自己打车，跟司机交流"></a>自己打车，跟司机交流</h3><p>Where are you heading to? 你去哪儿？</p><p>Where to? 去哪儿？</p><p>get in上车</p><h3 id="赶时间"><a href="#赶时间" class="headerlink" title="赶时间"></a>赶时间</h3><p>I’m really in a hurry. Is there a <strong>shortcut</strong>? 问司机有没有小路/捷径可以快点？</p><p>tap on:刷卡上车</p><p>tap off:刷卡下车</p><h2 id="Part3：求助外国人"><a href="#Part3：求助外国人" class="headerlink" title="Part3：求助外国人"></a>Part3：求助外国人</h2><h2 id="拍照时提出自己的小需求"><a href="#拍照时提出自己的小需求" class="headerlink" title="拍照时提出自己的小需求"></a>拍照时提出自己的小需求</h2><p>Excuse me, can you take a photo for us please? 不好意思，你能帮我们拍张照吗？</p><p>Can/Could you take that building in please? 你能帮我把那个建筑拍进去吗？</p><h3 id="借手机打电话"><a href="#借手机打电话" class="headerlink" title="借手机打电话"></a>借手机打电话</h3><p>Excuse me, <strong>my phone is dead</strong>, Can I use you phone for a sec. I can’t find my friend, and I need to make a call.</p><p>不好意思，我手机没电了，能借你手机打个电话吗？很快的，我找不到我朋友了，需要打个电话。</p><h3 id="找人帮忙给手机充电"><a href="#找人帮忙给手机充电" class="headerlink" title="找人帮忙给手机充电"></a>找人帮忙给手机充电</h3><p>Can you help me charge my phone? It’s dead. 你能帮我充电吗？没电了</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;专项课18-旅游场景&quot;&gt;&lt;a href=&quot;#专项课18-旅游场景&quot; class=&quot;headerlink&quot; title=&quot;专项课18 旅游场景&quot;&gt;&lt;/a&gt;专项课18 旅游场景&lt;/h1&gt;&lt;p&gt;I’d like a room. 我想开一个房间。&lt;/p&gt;
&lt;p&gt;I’d l
      
    
    </summary>
    
      <category term="English" scheme="www.number47.cn/categories/English/"/>
    
      <category term="专项课" scheme="www.number47.cn/categories/English/%E4%B8%93%E9%A1%B9%E8%AF%BE/"/>
    
    
      <category term="English" scheme="www.number47.cn/tags/English/"/>
    
      <category term="专项课" scheme="www.number47.cn/tags/%E4%B8%93%E9%A1%B9%E8%AF%BE/"/>
    
  </entry>
  
  <entry>
    <title>spring security 学习(一)-spring boot 整合</title>
    <link href="www.number47.cn/posts/2041720639/"/>
    <id>www.number47.cn/posts/2041720639/</id>
    <published>2019-10-24T04:56:35.000Z</published>
    <updated>2019-11-27T19:32:11.079Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Spring-Security-一-Spring-Boot-整合"><a href="#Spring-Security-一-Spring-Boot-整合" class="headerlink" title="Spring Security(一)-Spring Boot 整合"></a>Spring Security(一)-Spring Boot 整合</h1><h2 id="创建spring-boot项目，引入spring-boot-start-security"><a href="#创建spring-boot项目，引入spring-boot-start-security" class="headerlink" title="创建spring boot项目，引入spring-boot-start-security"></a>创建spring boot项目，引入spring-boot-start-security</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">          &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">          &lt;artifactId&gt;spring-boot-starter-security&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h2 id="创建-spring-security的访问接口"><a href="#创建-spring-security的访问接口" class="headerlink" title="创建/spring-security的访问接口"></a>创建/spring-security的访问接口</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoController</span> </span>&#123;</span><br><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"spring-security"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"hello spring security"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="表单认证"><a href="#表单认证" class="headerlink" title="表单认证"></a>表单认证</h2><p>创建配置类WebSecurityConfig继承<code>WebSecurityConfigurerAdapter</code>,<code>WebSecurityConfigurerAdapter</code>是由Spring Security提供的Web应用安全配置的适配器。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebSecurity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebSecurityConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">http.formLogin() <span class="comment">// 表单方式</span></span><br><span class="line">.and()</span><br><span class="line">.authorizeRequests() </span><br><span class="line">.anyRequest()  <span class="comment">// 所有请求</span></span><br><span class="line">.authenticated(); <span class="comment">// 都需要认证</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="设置启动端口"><a href="#设置启动端口" class="headerlink" title="设置启动端口"></a>设置启动端口</h2><p>application.properties</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">server.port=8081</span><br></pre></td></tr></table></figure><p>启动程序，启动时控制台Using generated security password: 9aac6105-0752-4bf1-9f54-c247e94086ab，每次都不一样，这个为用户user的密码。<br>访问<a href="http://localhost:8080/spring-security" target="_blank" rel="noopener">http://localhost:8080/spring-security</a>，页面跳转到<a href="http://localhost:8080/login" target="_blank" rel="noopener">http://localhost:8080/login</a><br><img src="http://ww1.sinaimg.cn/large/a8a26f7cgy1g7x16jb1ylj20i709tmxe.jpg" alt="image.png"><br>登录后，访问到<a href="http://localhost:8080/spring-security" target="_blank" rel="noopener">http://localhost:8080/spring-security</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Spring-Security-一-Spring-Boot-整合&quot;&gt;&lt;a href=&quot;#Spring-Security-一-Spring-Boot-整合&quot; class=&quot;headerlink&quot; title=&quot;Spring Security(一)-Spring Bo
      
    
    </summary>
    
      <category term="Spring Security" scheme="www.number47.cn/categories/Spring-Security/"/>
    
    
      <category term="Spring Security" scheme="www.number47.cn/tags/Spring-Security/"/>
    
  </entry>
  
  <entry>
    <title>Rest API的拦截</title>
    <link href="www.number47.cn/posts/1757692245/"/>
    <id>www.number47.cn/posts/1757692245/</id>
    <published>2019-08-18T15:58:17.411Z</published>
    <updated>2019-11-27T19:32:11.068Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Rest-API的拦截"><a href="#Rest-API的拦截" class="headerlink" title="Rest API的拦截"></a>Rest API的拦截</h1><h2 id="拦截顺序"><a href="#拦截顺序" class="headerlink" title="拦截顺序"></a>拦截顺序</h2><p>filter-&gt;Interceptor-&gt;Aspect</p><h2 id="异常捕获顺序"><a href="#异常捕获顺序" class="headerlink" title="异常捕获顺序"></a>异常捕获顺序</h2><p>Aspect-&gt;ControllerAdvice-&gt;Inteceptor-&gt;filter</p><p><img src="https://ws1.sinaimg.cn/large/a8a26f7cgy1g64bpl7z8qj20dt0cb761.jpg" alt></p><h2 id="过滤器（Filter）"><a href="#过滤器（Filter）" class="headerlink" title="过滤器（Filter）"></a>过滤器（Filter）</h2><p>可以获取到原始http请求和响应的信息，但是取不到处理方法的信息</p><h3 id="自定义Filter-spring-boot添加-Component"><a href="#自定义Filter-spring-boot添加-Component" class="headerlink" title="自定义Filter spring boot添加@Component"></a>自定义Filter spring boot添加@Component</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.number47.com.number47.filter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> number47</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/8/18 23:44</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> Rest API filter</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TimeFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"time filter init"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"time filter start"</span>);</span><br><span class="line"><span class="keyword">long</span> start = <span class="keyword">new</span> Date().getTime();</span><br><span class="line">filterChain.doFilter(servletRequest,servletResponse);</span><br><span class="line">System.out.println(<span class="string">"time filter："</span> + (<span class="keyword">new</span> Date().getTime()-start));</span><br><span class="line">System.out.println(<span class="string">"time filter finish"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"time filter destroy"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="加入第三方Filter-spring-boot"><a href="#加入第三方Filter-spring-boot" class="headerlink" title="加入第三方Filter spring boot"></a>加入第三方Filter spring boot</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">package com.number47.com.number47.config;</span><br><span class="line"></span><br><span class="line">import com.number47.com.number47.filter.TimeFilter;</span><br><span class="line">import org.springframework.boot.web.servlet.FilterRegistrationBean;</span><br><span class="line">import org.springframework.context.annotation.Bean;</span><br><span class="line"></span><br><span class="line">import java.util.ArrayList;</span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @author number47</span><br><span class="line"> * @date 2019/8/18 23:53</span><br><span class="line"> * @description</span><br><span class="line"> */</span><br><span class="line">@Configuration</span><br><span class="line">public class WebConfig &#123;</span><br><span class="line">   </span><br><span class="line">   @Bean</span><br><span class="line">   public FilterRegistrationBean timeFilter()&#123;</span><br><span class="line">      FilterRegistrationBean registrationBean = new FilterRegistrationBean();</span><br><span class="line">      TimeFilter timeFilter = new TimeFilter();</span><br><span class="line">      registrationBean.setFilter(timeFilter);</span><br><span class="line">      List&lt;String&gt; urls = new ArrayList&lt;&gt;();</span><br><span class="line">      urls.add(&quot;/*&quot;);</span><br><span class="line">      registrationBean.setUrlPatterns(urls);</span><br><span class="line">      return registrationBean;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="拦截器-Interceptor"><a href="#拦截器-Interceptor" class="headerlink" title="拦截器(Interceptor)"></a>拦截器(Interceptor)</h1><p>可以获取到原始http请求和响应的信息，可以获取处理方法的信息，但是获取不到参数的值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.number47.com.number47.interceptor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.method.HandlerMethod;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.HandlerInterceptor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.ModelAndView;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> number47</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/8/19 00:01</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TimeInterceptor</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span> </span>&#123;</span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * controller 之前调用</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> httpServletRequest</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> httpServletResponse</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> handle</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">    * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object handle)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">      System.out.println(<span class="string">"preHandle"</span>);</span><br><span class="line">      System.out.println(((HandlerMethod)handle).getBean().getClass().getName());</span><br><span class="line">      System.out.println(((HandlerMethod)handle).getMethod().getName());</span><br><span class="line">      httpServletRequest.setAttribute(<span class="string">"startTime"</span>,<span class="keyword">new</span> Date().getTime());</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * controller 方法处理之后调用，如果controller抛出异常，这个方法不会调用</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> httpServletRequest</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> httpServletResponse</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> o</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> modelAndView</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postHandle</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object o, ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">      System.out.println(<span class="string">"postHandle"</span>);</span><br><span class="line">      Long start = (Long)httpServletRequest.getAttribute(<span class="string">"startTime"</span>);</span><br><span class="line">      System.out.println(<span class="string">"time interceptor 耗时："</span> + (<span class="keyword">new</span> Date().getTime() - start));</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * controller 无论是正常还是抛出异常都会调用</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> httpServletRequest</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> httpServletResponse</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> o</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> e</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterCompletion</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object o, Exception e)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">      System.out.println(<span class="string">"afterCompletion"</span>);</span><br><span class="line">      Long start = (Long)httpServletRequest.getAttribute(<span class="string">"startTime"</span>);</span><br><span class="line">      System.out.println(<span class="string">"time interceptor 耗时："</span> + (<span class="keyword">new</span> Date().getTime() - start));</span><br><span class="line">      System.out.println(<span class="string">"exception is "</span> + e);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.number47.com.number47.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.number47.com.number47.filter.TimeFilter;</span><br><span class="line"><span class="keyword">import</span> com.number47.com.number47.interceptor.TimeInterceptor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.web.servlet.FilterRegistrationBean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.InterceptorRegistry;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurerAdapter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> number47</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/8/18 23:53</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebConfig</span> <span class="keyword">extends</span> <span class="title">WebMvcConfigurerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Autowired</span></span><br><span class="line">   <span class="keyword">private</span> TimeInterceptor timeInterceptor;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> </span>&#123;</span><br><span class="line">      registry.addInterceptor(timeInterceptor);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="切片-Aspect"><a href="#切片-Aspect" class="headerlink" title="切片(Aspect)"></a>切片(Aspect)</h1><p>获取不到原始http请求和响应的信息，可以获取参数的值</p><h4 id="Spring-Aop简介"><a href="#Spring-Aop简介" class="headerlink" title="Spring Aop简介"></a>Spring Aop简介</h4><p><img src="https://ws1.sinaimg.cn/large/a8a26f7cgy1g64an6t14gj20pi0c7wik.jpg" alt></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">package com.number47.aspect;</span><br><span class="line"></span><br><span class="line">import org.aspectj.lang.ProceedingJoinPoint;</span><br><span class="line">import org.aspectj.lang.annotation.*;</span><br><span class="line">import org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line">import java.util.Date;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @author number47</span><br><span class="line"> * @date 2019/8/19 00:29</span><br><span class="line"> * @description</span><br><span class="line"> */</span><br><span class="line">@Aspect</span><br><span class="line">@Component</span><br><span class="line">public class TimeAspect &#123;</span><br><span class="line"></span><br><span class="line">@Before(value = &quot;execution(* com.number47.web.controller.UserController.*(..))&quot;)</span><br><span class="line">public void before()&#123;</span><br><span class="line">System.out.println(&quot;方法调用之前&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@After(value = &quot;execution(* com.number47.web.controller.UserController.*(..))&quot;)</span><br><span class="line">public void after()&#123;</span><br><span class="line">System.out.println(&quot;方法调用之后&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@AfterThrowing(value = &quot;execution(* com.number47.web.controller.UserController.*(..))&quot;)</span><br><span class="line">public void afterThrowing()&#123;</span><br><span class="line">System.out.println(&quot;方法异常调用之后&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Around(value = &quot;execution(* com.number47.web.controller.UserController.*(..))&quot;)</span><br><span class="line">public Object around(ProceedingJoinPoint proceedingJoinPoint) throws Throwable &#123;</span><br><span class="line">System.out.println(&quot;time aspect start&quot;);</span><br><span class="line">long start = new Date().getTime();</span><br><span class="line">Object object = proceedingJoinPoint.proceed();</span><br><span class="line">Object[] args = proceedingJoinPoint.getArgs();</span><br><span class="line">for (Object arg: args)&#123;</span><br><span class="line">System.out.println(&quot;arg is &quot; + arg);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(&quot;time aspect：&quot; + (new Date().getTime()-start));</span><br><span class="line">System.out.println(&quot;包含上面所有情况&quot;);</span><br><span class="line">System.out.println(&quot;time aspect end&quot;);</span><br><span class="line">return object;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Rest-API的拦截&quot;&gt;&lt;a href=&quot;#Rest-API的拦截&quot; class=&quot;headerlink&quot; title=&quot;Rest API的拦截&quot;&gt;&lt;/a&gt;Rest API的拦截&lt;/h1&gt;&lt;h2 id=&quot;拦截顺序&quot;&gt;&lt;a href=&quot;#拦截顺序&quot; class=&quot;
      
    
    </summary>
    
    
      <category term="Rest" scheme="www.number47.cn/tags/Rest/"/>
    
  </entry>
  
  <entry>
    <title>Hibernate Validator</title>
    <link href="www.number47.cn/posts/2291746956/"/>
    <id>www.number47.cn/posts/2291746956/</id>
    <published>2019-08-03T14:39:59.614Z</published>
    <updated>2019-11-27T19:32:11.061Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Hibernate-Validator"><a href="#Hibernate-Validator" class="headerlink" title="Hibernate Validator"></a>Hibernate Validator</h1><table><thead><tr><th>注解</th><th>作用</th></tr></thead><tbody><tr><td>@Null</td><td>值必须为空</td></tr><tr><td>@Pattern(regex=)</td><td>字符串必须匹配正则表达式</td></tr><tr><td>@Size(min=,max=)</td><td>集合的元素数量必须在min和max之间</td></tr><tr><td>@CreditCardNumber(ignoreNonDigitCharacters)</td><td>字符串必须是信用卡号（按美国的标准验证的）</td></tr><tr><td>@Email</td><td>字符串必须是Email地址</td></tr><tr><td>@Length(min=,max=)</td><td>检查字符串的长度</td></tr><tr><td>@NotBlank</td><td>字符串必须有字符</td></tr><tr><td>@NotEmpty</td><td>字符串不为null,集合有元素</td></tr><tr><td>@Range(min=,max=)</td><td>数字必须大于等于min,小于等于max</td></tr><tr><td>@SafeHtml</td><td>字符串是安全的html</td></tr><tr><td>@URL</td><td>字符串是合法的URL</td></tr><tr><td>@NotNull</td><td>值不能为空</td></tr><tr><td>@AssertFalse</td><td>值必须为false</td></tr><tr><td>@AssertTrue</td><td>值必须为true</td></tr><tr><td>@DecimalMax(value=,inclusive=)</td><td>值必须小于等于（inclusive=true）/小于（inclusive=false）value属指定的值，可以注解在字符串类型的属性上</td></tr><tr><td>@DecimalMin(value=,inclusive=)</td><td>值必须大于等于（inclusive=true）/大于（inclusive=false）value属指定的值，可以注解在字符串类型的属性上</td></tr><tr><td>@Digits(integer=,fraction=)</td><td>数字格式检查。integer指定整数部分的最大长度，fraction指定小数部分的最大长度</td></tr><tr><td>@Future</td><td>值必须是未来的日期</td></tr><tr><td>@Past</td><td>值必须是过去的日期</td></tr><tr><td>@Max(value=)</td><td>值必须小于等于value指定的值。不能注解在字符串类型的属性上。</td></tr><tr><td>@Min(value=)</td><td>值必须大于等于value指定的值。不能注解在字符串类型的属性上。</td></tr><tr><td></td><td></td></tr></tbody></table><h2 id="通过-Valid-BindingResult使用校验-JsonView指定属性的显示"><a href="#通过-Valid-BindingResult使用校验-JsonView指定属性的显示" class="headerlink" title="通过@Valid,BindingResult使用校验/@JsonView指定属性的显示"></a>通过@Valid,BindingResult使用校验/@JsonView指定属性的显示</h2><p>Public class User{</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public interface UserSimpleView&#123;&#125;;</span><br><span class="line"></span><br><span class="line">public interface UserDetailView extends UserSimpleView&#123;&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@NotBlank</span>校验不为空</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"><span class="meta">@NotBlank</span></span><br><span class="line"><span class="keyword">private</span> String password;</span><br><span class="line"><span class="keyword">private</span> String userName;</span><br><span class="line"></span><br><span class="line"><span class="meta">@JsonView</span>(UserSimpleView.class)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getUserName</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> userName;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserName</span><span class="params">(String userName)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.userName = userName;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@JsonView</span>(UserDetailView.class)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getPassword</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> password;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPassword</span><span class="params">(String password)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.password = password;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>}</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/user"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@PostMapping</span></span><br><span class="line"><span class="meta">@JsonView</span>(User.UserSimpleView.class) <span class="comment">//显示名称</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">userCreate</span><span class="params">(@Valid @RequestBody User user, BindingResult errors)</span></span>&#123;</span><br><span class="line"><span class="comment">//捕获没有通过校验的错误</span></span><br><span class="line"><span class="keyword">if</span> (errors.hasErrors())&#123;</span><br><span class="line">errors.getAllErrors().stream().forEach(error -&gt; System.out.println(error.getDefaultMessage()));</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(user.getId());</span><br><span class="line">System.out.println(user.getUserName());</span><br><span class="line">System.out.println(user.getPassword());</span><br><span class="line">System.out.println(user.getBirthDay());</span><br><span class="line">user.setId(<span class="string">"1"</span>);</span><br><span class="line"><span class="keyword">return</span> user;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> userId 通过正则表达式 只能接受数字</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/&#123;id:\\d+&#125;"</span>)</span><br><span class="line"><span class="meta">@JsonView</span>(User.UserDetailView.class) <span class="comment">//显示名称和密码</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">getInfo</span><span class="params">(@PathVariable(name = <span class="string">"id"</span>)</span> String userId)</span>&#123;</span><br><span class="line">User user = <span class="keyword">new</span> User();</span><br><span class="line">user.setUserName(<span class="string">"JOJO"</span>);</span><br><span class="line"><span class="keyword">return</span> user;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Hibernate-Validator&quot;&gt;&lt;a href=&quot;#Hibernate-Validator&quot; class=&quot;headerlink&quot; title=&quot;Hibernate Validator&quot;&gt;&lt;/a&gt;Hibernate Validator&lt;/h1&gt;&lt;tabl
      
    
    </summary>
    
      <category term="Hibernate Validator" scheme="www.number47.cn/categories/Hibernate-Validator/"/>
    
    
      <category term="Hibernate Validator" scheme="www.number47.cn/tags/Hibernate-Validator/"/>
    
  </entry>
  
  <entry>
    <title>导入import com.sun.rowset.CachedRowSetImpl，报错</title>
    <link href="www.number47.cn/posts/3929613669/"/>
    <id>www.number47.cn/posts/3929613669/</id>
    <published>2018-01-10T04:56:00.000Z</published>
    <updated>2019-11-27T19:32:11.081Z</updated>
    
    <content type="html"><![CDATA[<h2 id="报错内容"><a href="#报错内容" class="headerlink" title="报错内容"></a>报错内容</h2><p>Access restriction: The type CachedRowSetImpl is not accessible due to restriction on required library C:\glassfish3\jdk7\jre\lib\rt.jar</p><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>项目右键project build path中先移除JRE System Library，再添加库JRE System Library，之后就可以了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;报错内容&quot;&gt;&lt;a href=&quot;#报错内容&quot; class=&quot;headerlink&quot; title=&quot;报错内容&quot;&gt;&lt;/a&gt;报错内容&lt;/h2&gt;&lt;p&gt;Access restriction: The type CachedRowSetImpl is not accessibl
      
    
    </summary>
    
      <category term="Java" scheme="www.number47.cn/categories/Java/"/>
    
    
      <category term="JAVA Web问题" scheme="www.number47.cn/tags/JAVA-Web%E9%97%AE%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>Servlet</title>
    <link href="www.number47.cn/posts/335668945/"/>
    <id>www.number47.cn/posts/335668945/</id>
    <published>2018-01-06T16:00:00.000Z</published>
    <updated>2019-11-27T19:32:11.077Z</updated>
    
    <content type="html"><![CDATA[<h2 id="doGet"><a href="#doGet" class="headerlink" title="doGet()"></a>doGet()</h2><p>当浏览器使用get方式提交数据的时候，servlet需要提供doGet()方法。<br><strong>哪些是get方式呢？</strong></p><ul><li>form默认的提交方式</li><li>如果通过一个超链访问某个地址</li><li>如果在地址栏直接输入某个地址</li><li>ajax指定使用get方式的时候<h2 id="doPost"><a href="#doPost" class="headerlink" title="doPost()"></a>doPost()</h2>当浏览器使用post方式提交数据的时候，servlet需要提供doPost()方法</li></ul><p><strong>哪些是post方式呢？</strong></p><ul><li>在form上显示设置 method=”post”的时候</li><li>ajax指定post方式的时候<h2 id="service"><a href="#service" class="headerlink" title="service()"></a>service()</h2>在执行doGet()或者doPost()之前，都会先执行service()。<br>由service()方法进行判断，到底该调用doGet()还是doPost()。<br>可以发现，service(), doGet(), doPost() 三种方式的参数列表都是一样的。<br>所以，有时候也会直接重写service()方法，在其中提供相应的服务，就不用区分到底是get还是post了。</li></ul><h2 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h2><p>一个Servlet的生命周期由 实例化，初始化，提供服务，销毁，被回收几个步骤组成。</p><h2 id="request"><a href="#request" class="headerlink" title="request"></a>request</h2><p>request对象的类是HttpServletRequest，提供了很多有实用价值的方法。</p><h3 id="request常见方法"><a href="#request常见方法" class="headerlink" title="request常见方法"></a>request常见方法</h3><p>request.getRequestURL(): 浏览器发出请求时的完整URL，包括协议 主机名 端口(如果有)”<br>request.getRequestURI(): 浏览器发出请求的资源名部分，去掉了协议和主机名” +<br>request.getQueryString(): 请求行中的参数部分，只能显示以get方式发出的参数，post方式的看不到<br>request.getRemoteAddr(): 浏览器所处于的客户机的IP地址<br>request.getRemoteHost(): 浏览器所处于的客户机的主机名<br>request.getRemotePort(): 浏览器所处于的客户机使用的网络端口<br>request.getLocalAddr(): 服务器的IP地址<br>request.getLocalName(): 服务器的主机名<br>request.getMethod(): 得到客户机请求方式一般是GET或者POST。</p><h3 id="获取参数"><a href="#获取参数" class="headerlink" title="获取参数"></a>获取参数</h3><p>request.getParameter(): 是常见的方法，用于获取单值的参数<br>request.getParameterValues(): 用于获取具有多值得参数，比如注册的时候提交的爱好，可以使多选的。<br>request.getParameterMap(): 用于遍历所有的参数，并返回Map类型。</p><h3 id="获取头信息"><a href="#获取头信息" class="headerlink" title="获取头信息"></a>获取头信息</h3><p>request.getHeader() 获取浏览器传递过来的头信息。<br>比如getHeader(“user-agent”) 可以获取浏览器的基本资料，这样就能判断是firefox、IE、chrome、或者是safari浏览器<br>request.getHeaderNames() 获取浏览器所有的头信息名称，根据头信息名称就能遍历出所有的头信息。</p><h2 id="response"><a href="#response" class="headerlink" title="response"></a>response</h2><p>response是HttpServletResponse的实例，用于提供给浏览器的响应信息。</p><h3 id="设置响应内容"><a href="#设置响应内容" class="headerlink" title="设置响应内容"></a>设置响应内容</h3><p>response.getWriter()</p><p>通过response.getWriter(); 获取一个PrintWriter 对象。<br>可以使用println(),append(),write(),format()等等方法设置返回给浏览器的html内容。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;doGet&quot;&gt;&lt;a href=&quot;#doGet&quot; class=&quot;headerlink&quot; title=&quot;doGet()&quot;&gt;&lt;/a&gt;doGet()&lt;/h2&gt;&lt;p&gt;当浏览器使用get方式提交数据的时候，servlet需要提供doGet()方法。&lt;br&gt;&lt;strong&gt;哪些
      
    
    </summary>
    
      <category term="Java_Web" scheme="www.number47.cn/categories/Java-Web/"/>
    
    
      <category term="Servlet" scheme="www.number47.cn/tags/Servlet/"/>
    
  </entry>
  
  <entry>
    <title>IO流</title>
    <link href="www.number47.cn/posts/4275355671/"/>
    <id>www.number47.cn/posts/4275355671/</id>
    <published>2018-01-02T04:56:00.000Z</published>
    <updated>2019-11-27T19:32:11.081Z</updated>
    
    <content type="html"><![CDATA[<h2 id="流的分类"><a href="#流的分类" class="headerlink" title="流的分类"></a>流的分类</h2><h3 id="按流的流向"><a href="#按流的流向" class="headerlink" title="按流的流向"></a>按流的流向</h3><p>输入流：只能从中读取数据，而不能向其写入数据。</p><p>输出流：只能从中写入数据，而不能向其读取数据。</p><h3 id="按操作数据分类"><a href="#按操作数据分类" class="headerlink" title="按操作数据分类"></a>按操作数据分类</h3><p>字符流：数据单元16位的字符。Reader和Writer作为基类。</p><p>字节流：数据单元8位的字节。InputStream和OutputStream作为基类。</p><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;流的分类&quot;&gt;&lt;a href=&quot;#流的分类&quot; class=&quot;headerlink&quot; title=&quot;流的分类&quot;&gt;&lt;/a&gt;流的分类&lt;/h2&gt;&lt;h3 id=&quot;按流的流向&quot;&gt;&lt;a href=&quot;#按流的流向&quot; class=&quot;headerlink&quot; title=&quot;按流的流向&quot;&gt;&lt;/a&gt;按流的流向&lt;/h3&gt;&lt;p&gt;输入流：只能从中读取数据，而不能向其写入数据。&lt;/p&gt;
&lt;p&gt;输出流：只能从中写入数据，而不能向其读取数据。&lt;/p&gt;
&lt;h3 id=&quot;按操作数据分类&quot;&gt;&lt;a href=&quot;#按操作数据分类&quot; class=&quot;headerlink&quot; title=&quot;按操作数据分类&quot;&gt;&lt;/a&gt;按操作数据分类&lt;/h3&gt;&lt;p&gt;字符流：数据单元16位的字符。Reader和Writer作为基类。&lt;/p&gt;
&lt;p&gt;字节流：数据单元8位的字节。InputStream和OutputStream作为基类。&lt;/p&gt;
    
    </summary>
    
      <category term="Java" scheme="www.number47.cn/categories/Java/"/>
    
    
      <category term="Java基础" scheme="www.number47.cn/tags/Java%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>Java基础-IO</title>
    <link href="www.number47.cn/posts/1262053707/"/>
    <id>www.number47.cn/posts/1262053707/</id>
    <published>2018-01-01T04:56:00.000Z</published>
    <updated>2020-06-19T16:20:06.245Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Java基础-IO"><a href="#Java基础-IO" class="headerlink" title="Java基础-IO"></a>Java基础-IO</h2><h2 id="1-Java-IO"><a href="#1-Java-IO" class="headerlink" title="1. Java IO"></a>1. Java IO</h2><p>Java输入/输出系统</p><p>区分 Java 的输入和输出：把自己当成程序， 当你从外边读数据到自己这里就用输入（<code>InputStream/Reader</code>）， 向外边写数据就用输出（<code>OutputStream/Writer</code>）。</p><p>Stream: Java 中将数据的输入输出抽象为流，流是一组有顺序的，单向的，有起点和终点的数据集合，就像水流。按照流中的最小数据单元又分为字节流和字符流。</p><p>1，字节流：以 8 位（即 1 byte，8 bit）作为一个数据单元，数据流中最小的数据单元是字节。</p><p>2，字符流：以 16 位（即 1 char，2 byte，16 bit）作为一个数据单元，数据流中最小的数据单元是字符， Java 中的字符是 Unicode 编码，一个字符占用两个字节。</p><a id="more"></a><p><img src="https://raw.githubusercontent.com/number-47/image-store/master/img/20200619225700.png" alt></p><p>Java IO常用流类</p><table><thead><tr><th>分类</th><th align="left">字节输入流</th><th>字节输出流</th><th>字符输入流</th><th>字符输出流</th></tr></thead><tbody><tr><td>抽象基类</td><td align="left">InputStream</td><td>OutputStream</td><td>Reader</td><td>Writer</td></tr><tr><td>访问文件</td><td align="left">FileInputStream</td><td>FileOutputStream</td><td>FileReader</td><td>FileWriter</td></tr><tr><td>访问数组</td><td align="left">ByteArrayInputStream</td><td>ByteArrayOutputStream</td><td>CharArrayReader</td><td>CharArrayWriter</td></tr><tr><td>访问管道</td><td align="left">PipedInputStream</td><td>PipedOutStream</td><td>PipedReader</td><td>PipedWriter</td></tr><tr><td>访问字符串</td><td align="left"></td><td></td><td>StringReader</td><td>StringWriter</td></tr><tr><td>缓冲流</td><td align="left">BufferedInputStream</td><td>BufferedOutputStream</td><td>BufferedReader</td><td>BufferedWriter</td></tr><tr><td>转化流</td><td align="left"></td><td></td><td>InputStreamReader</td><td>OutStreamWriter</td></tr><tr><td>对象流</td><td align="left">ObjectInputStream</td><td>ObjectOutputStream</td><td></td><td></td></tr><tr><td>抽象基类</td><td align="left">FilterInputStream</td><td></td><td>PushbackReader</td><td></td></tr><tr><td>打印流</td><td align="left"></td><td>PrintStream</td><td></td><td>PrintWriter</td></tr><tr><td>推回输入流</td><td align="left">PushbackInputStream</td><td></td><td>PushbackReader</td><td></td></tr><tr><td>特殊流</td><td align="left">DataInputStream</td><td>DateOutputStream</td><td></td><td></td></tr></tbody></table><h2 id="2-IO分类"><a href="#2-IO分类" class="headerlink" title="2. IO分类"></a>2. IO分类</h2><h3 id="2-1-根据流向分类"><a href="#2-1-根据流向分类" class="headerlink" title="2.1. 根据流向分类"></a>2.1. 根据流向分类</h3><p>输入流（<code>InputStream/Reader</code>）</p><p>输出流（<code>OutputStream/Writer</code>）</p><h3 id="2-2-根据数据不同的操作单元分类"><a href="#2-2-根据数据不同的操作单元分类" class="headerlink" title="2.2. 根据数据不同的操作单元分类"></a>2.2. 根据数据不同的操作单元分类</h3><p>字节流（<code>InputStream/OutputStream</code>）</p><p>字符流 (<code>Reader/Writer</code>）</p><h4 id="2-2-1-字节流"><a href="#2-2-1-字节流" class="headerlink" title="2.2.1. 字节流"></a>2.2.1. 字节流</h4><p><strong>字节输入流</strong></p><ul><li><code>InputStream</code> 是所有的输入字节流的父类，它是一个抽象类。</li><li><code>PushbackInputStream</code>、<code>DataInputStream</code> 和 <code>BufferedInputStream</code>都是处理流，他们的的父类是 <code>FilterInputStream</code>。</li><li><code>ByteArrayInputStream</code>、<code>StringBufferInputStream</code>、<code>FileInputStream</code> 是三种基本的介质流，它们分别从 Byte 数组、<code>StringBuffer</code>、和本地文件中读取数据。<code>PipedInputStream</code> 是从与其它线程共用的管道中读取数据。</li></ul><p><strong><code>InputStream</code> 中的三个基本的读方法</strong></p><ul><li><code>abstract int read()</code> ：读取一个字节数据，并返回读到的数据，如果返回 -1，表示读到了输入流的末尾。</li><li><code>int read(byte[] b)</code>：将数据读入一个字节数组，同时返回实际读取的字节数。如果返回-1，表示读到了输入流的末尾。</li><li><code>int read(byte[] b, int off, int len)</code> ：将数据读入一个字节数组，同时返回实际读取的字节数。如果返回 -1，表示读到了输入流的末尾。off 指定在数组 b 中存放数据的起始偏移位置；<code>len</code> 指定读取的最大字节数。</li></ul><p><strong>字节输出流</strong></p><ul><li><code>OutputStream</code> 是所有的输出字节流的父类，它是一个抽象类。</li><li><code>ByteArrayOutputStream</code>、<code>FileOutputStream</code> 是两种基本的介质流，它们分别向 Byte 数组、和本地文件中写入数据。</li><li><code>PipedOutputStream</code> 是向与其它线程共用的管道中写入数据。</li><li><code>BufferedOutputStream</code>、<code>DataOutputStream</code> 和 <code>PrintStream</code> 都是处理流，他们的的父类是 <code>FilterOutputStream</code>。</li></ul><p><code>OutputStream</code> 中的基本的写方法**</p><ul><li><code>abstract void write(int b)</code>：往输出流中写入一个字节。</li><li><code>void write(byte[] b)</code>：往输出流中写入数组b中的所有字节。</li><li><code>void write(byte[] b, int?off, int?len)</code> ：往输出流中写入数组 b 中从偏移量 off 开始的 <code>len</code>个字节的数据。</li><li><code>void flush()</code>：刷新输出流，强制缓冲区中的输出字节被写出。</li><li><code>void close()</code>：关闭输出流，释放和这个流相关的系统资源。</li></ul><h4 id="2-2-2-字符流"><a href="#2-2-2-字符流" class="headerlink" title="2.2.2. 字符流"></a>2.2.2. 字符流</h4><p><strong>字符输入流</strong></p><ul><li><code>Reader</code> 是所有的输入字符流的父类，它是一个抽象类。</li><li><code>CharReader</code>、<code>StringReader</code>是两种基本的介质流，它们分别将 Char 数组、String 中读取数据。<code>PipedReader</code> 是从与其它线程共用的管道中读取数据。</li><li><code>BufferedReader</code> 很明显就是一个装饰器，它和其子类负责装饰其它 Reader 对象。</li><li><code>FilterReader</code> 是所有自定义具体装饰流的父类，其子类 <code>PushbackReader</code> 对 Reader 对象进行装饰，会增加一个行号。</li><li><code>InputStreamReader</code> 是一个连接字节流和字符流的桥梁，它将字节流转变为字符流。</li></ul><p><strong><code>Reader</code> 中的三个基本的读方法</strong></p><ul><li><code>public int read() throws IOException</code>; 读取一个字符，返回值为读取的字符。</li><li><code>public int read(char cbuf[]) throws IOException</code>; 读取一系列字符到数组 cbuf[]中，返回值为实际读取的字符的数量。</li><li><code>public abstract int read(char cbuf[],int off,int len) throws IOException</code>; 读取 len 个字符，从数组 cbuf[] 的下标 off 处开始存放，返回值为实际读取的字符数量，该方法必须由子类实现。</li></ul><p><strong>字节输出流</strong></p><ul><li><code>Writer</code> 是所有的输出字符流的父类，它是一个抽象类。</li><li><code>CharArrayWriter</code>、<code>StringWriter</code> 是两种基本的介质流，它们分别向 Char 数组、String 中写入数据。<code>PipedWriter</code> 是向与其它线程共用的管道中写入数据。</li><li><code>BufferedWriter</code> 是一个装饰器为 Writer 提供缓冲功能。</li><li><code>PrintWriter</code>和 <code>PrintStream</code> 极其类似，功能和使用也非常相似。</li><li><code>OutputStreamWriter</code> 是 <code>OutputStream</code> 到 Writer 转换的桥梁，它的子类 <code>FileWriter</code>其实就是一个实现此功能的具体类。</li></ul><p><code>Writer</code> 中的写方法**</p><ul><li><code>public void write(int c) throws IOException</code>； //写单个字符</li><li><code>public void write(char cbuf[]) throws IOException；</code> //将字符数组 cbuf[] 写到输出流 。</li><li><code>public abstract void write(char cbuf[],int off,int len) throws IOException；</code> //将字符数组cbuf[]中的从索引为off的位置处开始的len个字符写入输出流 。</li><li><code>public void write(String str) throws IOException；</code> //将字符串str中的字符写入输出流 。</li><li><code>public void write(String str,int off,int len) throws IOException；</code> //将字符串 str 中从索引 off 开始处的 len 个字符写入输出流 </li></ul><h3 id="2-3-根据是否直接处理数据"><a href="#2-3-根据是否直接处理数据" class="headerlink" title="2.3. 根据是否直接处理数据"></a>2.3. 根据是否直接处理数据</h3><p>节点流：真正直接处理数据的</p><p>处理流：装饰加工节点流的</p><h4 id="2-3-1-节点流"><a href="#2-3-1-节点流" class="headerlink" title="2.3.1. 节点流"></a>2.3.1. 节点流</h4><ul><li>文件流：<code>FileInputStream</code>，<code>FileOutputStream</code>，<code>FileReader</code>，<code>FileWriter</code>，它们都会直接操作文件，直接与 OS 底层交互。因此他们被称为节点流 ，注意：使用这几个流的对象之后，需要关闭流对象，因为 java 垃圾回收器不会主动回收。不过在 Java7 之后，可以在 try() 括号中打开流，最后程序会自动关闭流对象，不再需要显示地 close。</li><li>数组流：<code>ByteArrayInputStream</code>，<code>ByteArrayOutputStream</code>，<code>CharArrayReader</code>，<code>CharArrayWriter</code>，对数组进行处理的节点流。</li><li>字符串流：<code>StringReader</code>，<code>StringWriter</code>，其中<code>StringReader</code>能从 String 中读取数据并保存到 char 数组。</li><li>管道流：<code>PipedInputStream</code>，<code>PipedOutputStream</code>，<code>PipedReader</code>，<code>PipedWrite</code>，对管道进行处理的节点流。</li></ul><h4 id="2-3-2-处理流"><a href="#2-3-2-处理流" class="headerlink" title="2.3.2. 处理流"></a>2.3.2. 处理流</h4><p>处理流是对一个已存在的流的连接和封装，通过所封装的流的功能调用实现数据读写。如 BufferedReader。</p><p>处理流的构造方法总是要带一个其他的流对象做参数。</p><p>常用处理流（通过关闭处理流里面的节点流来关闭处理流）</p><ul><li>缓冲流 ：<code>BufferedImputStream</code>，<code>BufferedOutputStream</code>，<code>BufferedReader</code> ，<code>BufferedWriter</code>，需要父类作为参数构造，增加缓冲功能，避免频繁读写硬盘，可以初始化缓冲数据的大小，由于带了缓冲功能，所以就写数据的时候需要使用 flush 方法，另外，<code>BufferedReader</code> 提供一个 <code>readLine( )</code>方法可以读取一行，而 <code>FileInputStream</code> 和 <code>FileReader</code> 只能读取一个字节或者一个字符，因此 <code>BufferedReader</code> 也被称为行读取器。</li><li>转换流：<code>InputStreamReader</code>，<code>OutputStreamWriter</code>，要 <code>inputStream</code> 或<code>OutputStream</code> 作为参数，实现<strong>从字节流到字符流的转换</strong>，我们经常在读取键盘输入（System.in）或网络通信的时候，需要使用这两个类。</li><li>数据流：<code>DataInputStream</code>，<code>DataOutputStream</code>，提供将基础数据类型写入到文件中，或者读取出来。</li></ul><h2 id="3-File"><a href="#3-File" class="headerlink" title="3. File"></a>3. File</h2><h3 id="创建文件对象"><a href="#创建文件对象" class="headerlink" title="创建文件对象"></a>创建文件对象</h3><p><strong>注：</strong>只是创建File对象，以下程序并不会在文件系统中创建这些目录或文件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">package io;</span><br><span class="line">import java.io.File;</span><br><span class="line">public class CreateFile &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">// 绝对路径</span><br><span class="line">        File f1 = new File(&quot;d:/TestFolder&quot;);</span><br><span class="line">        System.out.println(&quot;f1的绝对路径：&quot; + f1.getAbsolutePath());</span><br><span class="line">        // 相对路径,相对于工作目录，如果在eclipse中，就是项目目录</span><br><span class="line">        File f2 = new File(&quot;text.exe&quot;);</span><br><span class="line">        System.out.println(&quot;f2的绝对路径：&quot; + f2.getAbsolutePath());</span><br><span class="line">        // 把f1作为父目录创建文件对象</span><br><span class="line">        File f3 = new File(f1, &quot;text.exe&quot;);</span><br><span class="line">        System.out.println(&quot;f3的绝对路径：&quot; + f3.getAbsolutePath());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-File常用方法"><a href="#4-File常用方法" class="headerlink" title="4. File常用方法"></a>4. File常用方法</h2><h4 id="访问文件名相关的方法"><a href="#访问文件名相关的方法" class="headerlink" title="访问文件名相关的方法"></a>访问文件名相关的方法</h4><ul><li><p>String getName()：返回此File对象所表示的文件名或路径名（如果是路径，则返回最后一级子路径名）。</p></li><li><p>String getPath()：返回此File对象所对应的路径名。</p></li><li><p>File getAbsoluteFile()：返回此File对象的绝对路径。</p></li><li><p>String getAbsolutePath()：返回此File对象所对应的绝对路径名。</p></li><li><p>String getParent()：返回此File对象所对应目录（最后一级子目录）的父目录名。</p></li><li><p>boolean ranameTo(File newName)：重命名此File对象所对应的文件或目录。</p></li></ul><h4 id="文件检测相关的方法"><a href="#文件检测相关的方法" class="headerlink" title="文件检测相关的方法"></a>文件检测相关的方法</h4><ul><li>boolean exists()：判断File对象所对应的文件或目录是否存在。</li><li>boolean canWrite()：判断File对象所对应的文件或目录是否可写。</li><li>boolean canRead()：判断File对象所对应的文件或目录是否可读。</li><li>boolean isFile()：判断File对象所对应的是文件，而不是目录。</li><li>boolean isDirectory()：判断File对象所对应的是否是目录，而不是文件。</li></ul><h4 id="获取常规文件信息"><a href="#获取常规文件信息" class="headerlink" title="获取常规文件信息"></a>获取常规文件信息</h4><ul><li>long lastModified()：返回文件的最后修改时间。</li><li>long length()：返回文件内容的长度。</li><li>boolean setLastModified(long time)：设置文件或目录的最后修改时间。 </li></ul><h4 id="文件操作相关的方法"><a href="#文件操作相关的方法" class="headerlink" title="文件操作相关的方法"></a>文件操作相关的方法</h4><ul><li>boolean creatNewFile()：当此FIle对象所对应的文件不存在时，该方法将新建一个该File对象所指定的新文件。</li><li>boolean delete()：删除File对象所对应的文件或路径。</li></ul><p>##目录操作相关的方法</p><ul><li>boolean mkdir()：创建一个File对象所对应的目录。</li><li>boolean mkdirs()：创建此抽象路径名指定的目录，包括所有必需但不存在的父目录。</li><li>String[] list()：列出File对象的所有子文件名和路径名，返回String数组。</li><li>File[] listFiles()：列出File对象的所有子文件名和路径名，返回File数组。</li><li>static File[] listRoot()：列出系统所有根路径。</li></ul><h2 id="5-Java-IO-常见面试题"><a href="#5-Java-IO-常见面试题" class="headerlink" title="5. Java IO 常见面试题"></a>5. Java IO 常见面试题</h2><ol><li>字节流和字符流的区别？</li></ol><ul><li>读写单位不同：字节流以字节（8 bit）为单位，字符流以字符为单位，根据码表映射字符，一次可能读多个字节。</li><li>处理对象不同：字节流能处理所有类型的数据（如图片、avi 等），而字符流只能处理字符类型的数据。</li><li>字节流没有缓冲区，是直接输出的，而字符流是输出到缓冲区的。因此在输出时，字节流不调用 colse() 方法时，信息已经输出了，而字符流只有在调用 close() 方法关闭缓冲区时，信息才输出。要想字符流在未关闭时输出信息，则需要手动调用 flush() 方法。</li></ul><ol start="2"><li><p>什么是节点流，什么是处理流,它们各有什么用处，处理流的创建有什么特征？</p><p>见上文：节点流和处理流；</p><p>注意：处理流的构造器必须要 传入节点流的子类</p></li><li><p>什么叫对象序列化，什么是反序列化，实现对象序列化需要做哪些工作？</p></li></ol><ul><li><strong>对象序列化</strong>：Java 对象转换成与平台无关的二进制流；</li><li><strong>反序列化</strong>：将二进制流恢复成原来的 Java 对象读取；</li><li>实现 serializable 接口可以实现对象序列化，其中没有需要实现的方法，implements Serializable 只是为了标注该对象是可被序列化的。</li></ul><p>例如，在 web 开发中，如果对象被保存在了 Session 中，tomcat 在重启时要把 Session 对象序列化到硬盘，这个对象就必须实现 Serializable 接口。如果对象要经过分布式系统进行网络传输，被传输的对象就必须实现 Serializable 接口。</p><ol start="4"><li><p>什么是 Filter 流有哪些？</p><p>FilterStream 是一种 IO 流，主要作用是用来对存在的流增加一些额外的功能，像给目标文件增加源文件中不存在的行数，或者增加拷贝的性能等。在 java.io 包中主要由 4 个可用的 filter Stream。两个字节 filter stream，两个字符 filter stream.</p><p>分别是：FilterInputStream，FilterOutputStream，FilterReader and FilterWriter. 这些类是抽象类，不能被实例化的。</p><p>FilterInputStream 流的子类：</p></li></ol><ul><li><p>DataInputStream 可以把包括基本类型在内的数据和字符串按顺序从数据源读入，它有一些特殊的方法如 readInt()，readDouble() 和 readLine() 等可以读取一个 int，double 和一个 string。</p></li><li><p>BufferedInputStream 增加性能。</p></li><li><p>PushbackInputStream 推送要求的字节到系统中。</p></li><li><p>注：其它子类见 Java io 分类图。</p><p>6.说说 RandomAccessFile?</p><p>它在 java.io 包中是一个特殊的类，既不是输入流也不是输出流，它两者都可以做到。他是 Object 的直接子类。通常来说，一个流只有一个功能，要么读，要么写。但是 RandomAccessFile 既可以读文件，也可以写文件。</p><p>而且 RandomAccessFile 支持对文件的随机访问，实例可见上文：例 5，随机读写文件。</p></li></ul><p><strong>流式部分概括为：两对应一桥梁一随机。</strong></p><ol><li>字节流（Byte Stream）和字符流（Char Stream）的对应；</li><li>输入和输出的对应。</li><li>一个桥梁指：从字节流到字符流的桥梁。对应于输入和输出为InputStreamReader和OutputStreamWriter；</li><li>一个随机是：RandomAccessFile。可以随机读取文件。</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Java基础-IO&quot;&gt;&lt;a href=&quot;#Java基础-IO&quot; class=&quot;headerlink&quot; title=&quot;Java基础-IO&quot;&gt;&lt;/a&gt;Java基础-IO&lt;/h2&gt;&lt;h2 id=&quot;1-Java-IO&quot;&gt;&lt;a href=&quot;#1-Java-IO&quot; class=&quot;headerlink&quot; title=&quot;1. Java IO&quot;&gt;&lt;/a&gt;1. Java IO&lt;/h2&gt;&lt;p&gt;Java输入/输出系统&lt;/p&gt;
&lt;p&gt;区分 Java 的输入和输出：把自己当成程序， 当你从外边读数据到自己这里就用输入（&lt;code&gt;InputStream/Reader&lt;/code&gt;）， 向外边写数据就用输出（&lt;code&gt;OutputStream/Writer&lt;/code&gt;）。&lt;/p&gt;
&lt;p&gt;Stream: Java 中将数据的输入输出抽象为流，流是一组有顺序的，单向的，有起点和终点的数据集合，就像水流。按照流中的最小数据单元又分为字节流和字符流。&lt;/p&gt;
&lt;p&gt;1，字节流：以 8 位（即 1 byte，8 bit）作为一个数据单元，数据流中最小的数据单元是字节。&lt;/p&gt;
&lt;p&gt;2，字符流：以 16 位（即 1 char，2 byte，16 bit）作为一个数据单元，数据流中最小的数据单元是字符， Java 中的字符是 Unicode 编码，一个字符占用两个字节。&lt;/p&gt;
    
    </summary>
    
      <category term="Java基础" scheme="www.number47.cn/categories/Java%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Java基础" scheme="www.number47.cn/tags/Java%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>SQL数据类型</title>
    <link href="www.number47.cn/posts/344462107/"/>
    <id>www.number47.cn/posts/344462107/</id>
    <published>2017-12-10T04:56:35.000Z</published>
    <updated>2019-11-27T19:32:11.072Z</updated>
    
    <content type="html"><![CDATA[<h2 id="SQL数据类型"><a href="#SQL数据类型" class="headerlink" title="SQL数据类型"></a>SQL数据类型</h2><ul><li><p>CHAR(n)：定长数据类型</p></li><li><p>VARCHAR(n)：变长数据类型，n表示字段能够保存的最多字符数量</p></li><li><p>BLOB：大对象类型，二进制大对象，保存很长的二进制字符串</p></li><li><p>TEXT：长字符串类型，可以看作一个大VARCHAR字段<a id="more"></a></p></li></ul><h2 id="数值类型"><a href="#数值类型" class="headerlink" title="数值类型"></a>数值类型</h2><ul><li><p>BIT(n)</p></li><li><p>BIT VARCHAR(n)</p></li><li><p>DECIMAL(p, s)</p></li><li><p>INTEGER</p></li><li><p>SMALLINT</p></li><li><p>BIGINT</p></li><li><p>FLOAT(p, s)</p></li><li><p>DOUBLE PRECISION(p, s)</p></li><li><p>REAL(s)<br>p表示字段的最大长度<br>s表示小数点后面的位数</p></li></ul><h2 id="小数点类型"><a href="#小数点类型" class="headerlink" title="小数点类型"></a>小数点类型</h2><p>DECIMAL(p, s)</p><p>p：有效位数</p><p>s：标度</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">eg:DECIMAL(4,2)  最大值为99.99</span><br><span class="line">//有效位数是4，也就是数值总位数是4，标度是2小数点后面的位数</span><br></pre></td></tr></table></figure><p>如果实际数值的小数位数超出定义的位数，数字就会被四舍五入。</p><p>##浮点数</p><p><strong>REAL：</strong>单精度浮点数，单精度浮点数的有效位1—21（包含）</p><p><strong>DOUBLE PRECISION：</strong>双精度浮点数的有效位22—53（包含）</p><h2 id="日期和时间类型"><a href="#日期和时间类型" class="headerlink" title="日期和时间类型"></a>日期和时间类型</h2><ul><li><p>DATE</p></li><li><p>TIME</p></li><li><p>DATETIME</p></li><li><p>TIMESTAMP</p></li></ul><p>##直义字符串</p><p>  一系列字符，比如姓名或电话号码，这是有用户或程序明确指定的。</p><h2 id="自定义类型"><a href="#自定义类型" class="headerlink" title="自定义类型"></a>自定义类型</h2><p>由用户定义的类型，允许用户根据已有的数据类型来定制自己的数据类型。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">MYSQL</span><br><span class="line">//创建自定义类型</span><br><span class="line">CRATE TYPE PERSON AS OBJECT</span><br><span class="line">(NAME VARCHAR(30),</span><br><span class="line">SSN VARCHAR(9));</span><br><span class="line">//引用自定义类型</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> EMP_PAY</span><br><span class="line">(EMPLOYEE PERSON,</span><br><span class="line">SALARY <span class="built_in">DECIMAL</span>(<span class="number">10</span>,<span class="number">2</span>),</span><br><span class="line">HIRE_DATE <span class="built_in">DATE</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><h2 id="域"><a href="#域" class="headerlink" title="域"></a>域</h2><p>域是能够被使用的有效数据类型的集合。域与数据相关联，从而只接受待定的数据，在域创建之后，我们可以向域添加约束，约束与数据类型共同发挥作用，从而限制字段能够接受的数据。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">//创建域</span><br><span class="line">CREATE DOMAIN MONEY_D AS NUMBER(8,2);</span><br><span class="line">//添加约束</span><br><span class="line">ALTER DOMAIN MONEY_D</span><br><span class="line">ADD CONSTRANINT MONEY_CON1</span><br><span class="line">CHECK (VALUE &gt; 5);</span><br><span class="line">//引用域</span><br><span class="line">CREATE TABLE EMP_PAY</span><br><span class="line">(EMP_ID NUMBER(9),</span><br><span class="line">EMP_NAME VARCHAR2(30),</span><br><span class="line">PAY_RATE MONET_D</span><br><span class="line">);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;SQL数据类型&quot;&gt;&lt;a href=&quot;#SQL数据类型&quot; class=&quot;headerlink&quot; title=&quot;SQL数据类型&quot;&gt;&lt;/a&gt;SQL数据类型&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;CHAR(n)：定长数据类型&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;VARCHAR(n)：变长数据类型，n表示字段能够保存的最多字符数量&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;BLOB：大对象类型，二进制大对象，保存很长的二进制字符串&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;TEXT：长字符串类型，可以看作一个大VARCHAR字段
    
    </summary>
    
      <category term="SQL" scheme="www.number47.cn/categories/SQL/"/>
    
    
      <category term="SQL入门经典" scheme="www.number47.cn/tags/SQL%E5%85%A5%E9%97%A8%E7%BB%8F%E5%85%B8/"/>
    
  </entry>
  
  <entry>
    <title>SQL数据库查询</title>
    <link href="www.number47.cn/posts/2950692053/"/>
    <id>www.number47.cn/posts/2950692053/</id>
    <published>2017-12-10T04:56:35.000Z</published>
    <updated>2019-11-27T19:32:11.070Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Select语句"><a href="#Select语句" class="headerlink" title="Select语句"></a>Select语句</h2><p>数据库查询语句(DQL)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">select [* | distinct column1 , column2 ]</span><br><span class="line">from   table [,table2]</span><br><span class="line">where  [condition1 | expression1] [and | orcondition2 | expression2 ]</span><br><span class="line">order by column1 | integer [ASC升序 | DESC降序]</span><br></pre></td></tr></table></figure><p>distinct：在结果中去除重复的记录。<br>order by：输出结果以某种形式排序。默认升序asc<br><strong>order by可以使用整数代表字段</strong><a id="more"></a><br>eg:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">select *</span><br><span class="line">from products_tbl</span><br><span class="line">order by 1;</span><br><span class="line">//上面查询语句输出的会按照products_tbl的第一个字段进行升序排序。</span><br><span class="line">select *</span><br><span class="line">from products_tbl</span><br><span class="line">order by 1，2;</span><br><span class="line">//上面查询语句输出的会先对products_tbl的第一个字段进行升序排序，再对第二个字段进行升序排序。</span><br><span class="line">select *</span><br><span class="line">from products_tbl</span><br><span class="line">order by 1，2 desc;</span><br><span class="line">//上面查询语句输出的会先对products_tbl的第一个字段进行升序排序，再对第二个字段进行降序排序。</span><br></pre></td></tr></table></figure><h2 id="统计表里的记录数量COUNT"><a href="#统计表里的记录数量COUNT" class="headerlink" title="统计表里的记录数量COUNT()"></a>统计表里的记录数量COUNT()</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">select COUNT(*)</span><br><span class="line">from table_name;</span><br><span class="line">//查询table_name的表中有多少行数据</span><br><span class="line">如果统计的字段规定not null，那么统计结果和表里的数量相同</span><br><span class="line">如果统计字段规定可以null，那么就只统计有数据的数据。</span><br></pre></td></tr></table></figure><p>eg：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select COUNT(PROD_ID)</span><br><span class="line">from PRODUCTS_TBL;</span><br><span class="line">//统计PRODUCTS_TBL里字段PROD_ID的值的数量</span><br></pre></td></tr></table></figure><h2 id="使用字段别名"><a href="#使用字段别名" class="headerlink" title="使用字段别名"></a>使用字段别名</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select column_name alias_name(别名)</span><br><span class="line">from table_name</span><br></pre></td></tr></table></figure><p>eg:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select prod_desc, prod_desc product</span><br><span class="line">from products_tbl;</span><br></pre></td></tr></table></figure><p><img src="/images/img-sql%E5%AD%97%E6%AE%B5%E5%88%AB%E5%90%8D%E8%BE%93%E5%87%BA.png" alt="sql字段别名输出"></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Select语句&quot;&gt;&lt;a href=&quot;#Select语句&quot; class=&quot;headerlink&quot; title=&quot;Select语句&quot;&gt;&lt;/a&gt;Select语句&lt;/h2&gt;&lt;p&gt;数据库查询语句(DQL)&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;select [* | distinct column1 , column2 ]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;from   table [,table2]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;where  [condition1 | expression1] [and | orcondition2 | expression2 ]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;order by column1 | integer [ASC升序 | DESC降序]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;distinct：在结果中去除重复的记录。&lt;br&gt;order by：输出结果以某种形式排序。默认升序asc&lt;br&gt;&lt;strong&gt;order by可以使用整数代表字段&lt;/strong&gt;
    
    </summary>
    
      <category term="SQL" scheme="www.number47.cn/categories/SQL/"/>
    
    
      <category term="SQL入门经典" scheme="www.number47.cn/tags/SQL%E5%85%A5%E9%97%A8%E7%BB%8F%E5%85%B8/"/>
    
  </entry>
  
  <entry>
    <title>SQL基本概念</title>
    <link href="www.number47.cn/posts/1750339182/"/>
    <id>www.number47.cn/posts/1750339182/</id>
    <published>2017-12-10T04:56:35.000Z</published>
    <updated>2019-11-27T19:32:11.069Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><h2 id="DBMS（数据库管理系统）"><a href="#DBMS（数据库管理系统）" class="headerlink" title="DBMS（数据库管理系统）"></a>DBMS（数据库管理系统）</h2><p><strong>数据库管理系统</strong>，数据被保存在数据库中，这种机制叫做数据库管理系统。</p><p><strong>RDBMS:</strong>关系型数据库管理系统。</p><h2 id="DBA（数据库管理员）"><a href="#DBA（数据库管理员）" class="headerlink" title="DBA（数据库管理员）"></a>DBA（数据库管理员）</h2><p><strong>数据库管理员</strong></p><h2 id="DBS-数据库系统"><a href="#DBS-数据库系统" class="headerlink" title="DBS(数据库系统)"></a>DBS(数据库系统)</h2><p>由数据库、数据库管理系统（及其应用的开发工具）、应用数据和DBA组成的存储、管理、处理和维护数据的系统。</p><h2 id="SQL"><a href="#SQL" class="headerlink" title="SQL"></a>SQL</h2><p><strong>结构化查询语句</strong>是与关系型数据库进行通信的标准语言。<a id="more"></a></p><h2 id="SQL会话"><a href="#SQL会话" class="headerlink" title="SQL会话"></a>SQL会话</h2><p>用户利用SQL命令与关系型数据库进行交互时发生的事情。当用户与数据库建立连接时，会话就被建立了。会话可以通过直接与数据库建立链接来申请，也可以通过前端程序来申请。无论何种情况，会话通常是由通过网络访问数据库的用户在终端或工作站建立的。</p><h2 id="CONNECT"><a href="#CONNECT" class="headerlink" title="CONNECT"></a>CONNECT</h2><p>命令<strong>CONNECT</strong>用于建立与数据库的连接，它可以申请连接,也可以修改连接。当用户连接到数据库时，SQL会话就被初始化了。</p><p>命令如下</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CONNECT user@database</span><br></pre></td></tr></table></figure><h2 id="DISCONNECT-NEXT"><a href="#DISCONNECT-NEXT" class="headerlink" title="DISCONNECT/NEXT"></a>DISCONNECT/NEXT</h2><p>命令<strong>DISCONNECT</strong>用于断开用户与数据库的连接。当用户连接到数据库时，SQL会话就被结束了。</p><p>当使用<strong>EXIT</strong>命令离开数据库时，SQL会话就结束了，而且用于访问数据库的软件通常会关闭。</p><h2 id="SQL命令的类型"><a href="#SQL命令的类型" class="headerlink" title="SQL命令的类型"></a>SQL命令的类型</h2><h3 id="DDL—数据库定义语言"><a href="#DDL—数据库定义语言" class="headerlink" title="DDL—数据库定义语言"></a>DDL—数据库定义语言</h3><p><strong>DDL</strong>用于创建和重构数据库对象。</p><p>基本的DDL命令：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">INDEX</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">INDEX</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">INDEX</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">VIEW</span></span><br></pre></td></tr></table></figure><h3 id="DML—数据库操作语言"><a href="#DML—数据库操作语言" class="headerlink" title="DML—数据库操作语言"></a>DML—数据库操作语言</h3><p><strong>DML</strong>用于操作关系型数据库对象内部的数据。</p><p>基本命令：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span></span><br><span class="line"><span class="keyword">UPDATE</span></span><br><span class="line"><span class="keyword">DELETE</span></span><br></pre></td></tr></table></figure><h3 id="DQL—数据查询语句"><a href="#DQL—数据查询语句" class="headerlink" title="DQL—数据查询语句"></a>DQL—数据查询语句</h3><p>基本命令<code>SELECT</code></p><h3 id="DCL—数据控制语言"><a href="#DCL—数据控制语言" class="headerlink" title="DCL—数据控制语言"></a>DCL—数据控制语言</h3><p><strong>DCL</strong>用于控制对数据库里数据的访问，通常用于创建与用户访问相关的对象，以及控制用户权限。</p><p>基本命令：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">PASSWORD</span></span><br><span class="line"><span class="keyword">GRANT</span></span><br><span class="line"><span class="keyword">REVOKE</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">SYNONYM</span></span><br></pre></td></tr></table></figure><h3 id="数据管理命令"><a href="#数据管理命令" class="headerlink" title="数据管理命令"></a>数据管理命令</h3><p>用于对数据库里的操作进行审计和分析，还有助于分析系统性能。</p><p>基本命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">START AUDIT</span><br><span class="line">STOP AUDIT</span><br></pre></td></tr></table></figure><h3 id="事务控制命令"><a href="#事务控制命令" class="headerlink" title="事务控制命令"></a>事务控制命令</h3><p>用于管理数据库事务</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">COMMIT</span> //保存数据库事务</span><br><span class="line"><span class="keyword">ROLLBACK</span> //撤销数据库事务</span><br><span class="line">SAVEPIONT //在一组事务里创建标记点以用于回退（<span class="keyword">ROLLBACK</span>）</span><br><span class="line"><span class="keyword">SET</span> <span class="keyword">TRANSACTION</span> //设置实物名称</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h2&gt;&lt;h2 id=&quot;DBMS（数据库管理系统）&quot;&gt;&lt;a href=&quot;#DBMS（数据库管理系统）&quot; class=&quot;headerlink&quot; title=&quot;DBMS（数据库管理系统）&quot;&gt;&lt;/a&gt;DBMS（数据库管理系统）&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;数据库管理系统&lt;/strong&gt;，数据被保存在数据库中，这种机制叫做数据库管理系统。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;RDBMS:&lt;/strong&gt;关系型数据库管理系统。&lt;/p&gt;
&lt;h2 id=&quot;DBA（数据库管理员）&quot;&gt;&lt;a href=&quot;#DBA（数据库管理员）&quot; class=&quot;headerlink&quot; title=&quot;DBA（数据库管理员）&quot;&gt;&lt;/a&gt;DBA（数据库管理员）&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;数据库管理员&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;DBS-数据库系统&quot;&gt;&lt;a href=&quot;#DBS-数据库系统&quot; class=&quot;headerlink&quot; title=&quot;DBS(数据库系统)&quot;&gt;&lt;/a&gt;DBS(数据库系统)&lt;/h2&gt;&lt;p&gt;由数据库、数据库管理系统（及其应用的开发工具）、应用数据和DBA组成的存储、管理、处理和维护数据的系统。&lt;/p&gt;
&lt;h2 id=&quot;SQL&quot;&gt;&lt;a href=&quot;#SQL&quot; class=&quot;headerlink&quot; title=&quot;SQL&quot;&gt;&lt;/a&gt;SQL&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;结构化查询语句&lt;/strong&gt;是与关系型数据库进行通信的标准语言。
    
    </summary>
    
      <category term="SQL" scheme="www.number47.cn/categories/SQL/"/>
    
    
      <category term="SQL入门经典" scheme="www.number47.cn/tags/SQL%E5%85%A5%E9%97%A8%E7%BB%8F%E5%85%B8/"/>
    
  </entry>
  
  <entry>
    <title>SQL管理数据库对象</title>
    <link href="www.number47.cn/posts/2709286209/"/>
    <id>www.number47.cn/posts/2709286209/</id>
    <published>2017-12-10T04:56:35.000Z</published>
    <updated>2019-11-27T19:32:11.071Z</updated>
    
    <content type="html"><![CDATA[<h2 id="数据库对象"><a href="#数据库对象" class="headerlink" title="数据库对象"></a>数据库对象</h2><p>数据库里定义的、用于存储或是引用数据的对象，比如表、视图、簇、序列、索引和异名。</p><h2 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a>创建表</h2><p><strong>CREATE TABLE 命令</strong></p><p>使用方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE &lt;表名&gt;(</span><br><span class="line">&lt;列名&gt;  &lt;数据类型&gt;  [列级完整新约束],  //列级完整新约束 eg：primary key</span><br><span class="line">&lt;列名&gt;  &lt;数据类型&gt;  [列级完整新约束],  </span><br><span class="line">...</span><br><span class="line">[,&lt;表级完整性约束&gt;]</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>Eg:<a id="more"></a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE EMPLOYEE_TBL(</span><br><span class="line">EMP_ID       CHAR(9)       NOT NULL,</span><br><span class="line">EMP_NAME     VARCHAR(40)   NOT NULL,</span><br><span class="line">EMP_ST_ADDR  VARCHAR(20)   NOT NULL,</span><br><span class="line">EMP_CITY     VARCHAR(15)   NOT NULL,</span><br><span class="line">EMP_ST       CHAR(2)       NOT NULL,</span><br><span class="line">EMP_ZIP      INTEGER       NOT NULL,</span><br><span class="line">EMP_PHONE    INTEGER       NULL,</span><br><span class="line">EMP_PAGER    INTEGER       NULL</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h2 id="修改表"><a href="#修改表" class="headerlink" title="修改表"></a>修改表</h2><p><strong>ALTER TABLE 命令</strong></p><h3 id="修改表的列的属性"><a href="#修改表的列的属性" class="headerlink" title="修改表的列的属性"></a>修改表的列的属性</h3><p><strong>列的属性：</strong>数据类型、长度、有效位或标度、是否为空</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE &lt;表名&gt;</span><br><span class="line">ADD [COLUMN] &lt;新列名&gt;&lt;数据类型&gt;[完整新约束]</span><br><span class="line">ADD &lt;表级完整新约束&gt;</span><br><span class="line">DROP [COLUMN] &lt;列名&gt; [CASCADE|RESTRICT]</span><br><span class="line">DROP CONSTRAINT&lt;完整性约束名&gt; [RESTRICT|CASCADE]</span><br><span class="line">ALTER COLUMN &lt;列名&gt; &lt;数据类型&gt;</span><br></pre></td></tr></table></figure><p><strong>CASCADE：</strong>自动删除引用了该类的其他对象，如视图</p><p><strong>RESTRICT：</strong>如果该列被其他对象引用，RDBMS拒绝删除该列</p><p>Eg：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">//把EMP_ID的数据类型长度从9改为10.</span><br><span class="line">ALTER TABLE EMPLOYEE_TBL </span><br><span class="line">ALTER COLUMN EMP_ID VARCHAR(10);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//新增EMP_ENGLISH_NAME列</span><br><span class="line">ALTER TABLE EMPLOYEE_TBL</span><br><span class="line">ADD EMP_ENGLISH_NAME VARCHAR(20);</span><br><span class="line"></span><br><span class="line">//删除EMP_ENGLISH_NAME列</span><br><span class="line">ALTER TABLE EMPLOYEE_TBL</span><br><span class="line">DROP COLUMN EMP_ENGLISH_NAME;</span><br></pre></td></tr></table></figure><h4 id="添加自动增加的列"><a href="#添加自动增加的列" class="headerlink" title="添加自动增加的列"></a>添加自动增加的列</h4><p>使用IDENTITY类型</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE TEST_INCREMENT(</span><br><span class="line">  ID   INT  IDENTITY(1,1) NOT NULL, //(seed = 1,increment = 1) 從1開始,每次遞增1  </span><br><span class="line">  TEST_NAME VARCHAR(20)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>##删除表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DROP TABLE &lt;表名&gt; [CASCADE|RESTRICT];</span><br></pre></td></tr></table></figure><h2 id="完整性约束"><a href="#完整性约束" class="headerlink" title="完整性约束"></a>完整性约束</h2><h3 id="主键约束"><a href="#主键约束" class="headerlink" title="主键约束"></a>主键约束</h3><h3 id="唯一性约束"><a href="#唯一性约束" class="headerlink" title="唯一性约束"></a>唯一性约束</h3><p>###外键约束</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;数据库对象&quot;&gt;&lt;a href=&quot;#数据库对象&quot; class=&quot;headerlink&quot; title=&quot;数据库对象&quot;&gt;&lt;/a&gt;数据库对象&lt;/h2&gt;&lt;p&gt;数据库里定义的、用于存储或是引用数据的对象，比如表、视图、簇、序列、索引和异名。&lt;/p&gt;
&lt;h2 id=&quot;创建表&quot;&gt;&lt;a href=&quot;#创建表&quot; class=&quot;headerlink&quot; title=&quot;创建表&quot;&gt;&lt;/a&gt;创建表&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;CREATE TABLE 命令&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;使用方法：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;CREATE TABLE &amp;lt;表名&amp;gt;(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;lt;列名&amp;gt;  &amp;lt;数据类型&amp;gt;  [列级完整新约束],  //列级完整新约束 eg：primary key&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;lt;列名&amp;gt;  &amp;lt;数据类型&amp;gt;  [列级完整新约束],  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	[,&amp;lt;表级完整性约束&amp;gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Eg:
    
    </summary>
    
      <category term="SQL" scheme="www.number47.cn/categories/SQL/"/>
    
    
      <category term="SQL入门经典" scheme="www.number47.cn/tags/SQL%E5%85%A5%E9%97%A8%E7%BB%8F%E5%85%B8/"/>
    
  </entry>
  
  <entry>
    <title>SQL事务</title>
    <link href="www.number47.cn/posts/2510228647/"/>
    <id>www.number47.cn/posts/2510228647/</id>
    <published>2017-12-10T04:56:35.000Z</published>
    <updated>2019-11-27T19:32:11.069Z</updated>
    
    <content type="html"><![CDATA[<h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h2><p>事务(Transaction)是用户定义的一个数据库操作序列，这些操作要么全做，要么全不做，是一个不可分割的工作单位。</p><h2 id="控制事务"><a href="#控制事务" class="headerlink" title="控制事务"></a>控制事务</h2><p>###COMMIT命令</p><p>用于把事务所做的修改保存到数据库，把上一个COMMIT或ROLLBACK命令之后的全部事务都保存到数据库。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">begin transaction</span><br><span class="line">sql语句</span><br><span class="line">commit;</span><br></pre></td></tr></table></figure><a id="more"></a><p>###ROLLBACK命令</p><p>用于撤销还没有被保存到数据库的命令，它只能用于撤销上一个COMMIT或ROLLBACK命令之后的实物。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">begin transaction</span><br><span class="line">sql语句</span><br><span class="line">rollback;</span><br></pre></td></tr></table></figure><p>eg:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">begin transaction  </span><br><span class="line">update products_tbl</span><br><span class="line">set cost = 8</span><br><span class="line">where prod_id = &apos;11235&apos;;</span><br><span class="line">rollback;</span><br><span class="line"></span><br><span class="line">//上面语句会撤销更新的sql，不会让&apos;11235&apos;的prod_id更新为8，而是原来的值</span><br></pre></td></tr></table></figure><p>###SAVEPOINT</p><p>保存点是事务过程中的一个逻辑点，我们可以把事务回退到这个点，而步兵回退到整个实物。</p><h4 id="创建savepoint"><a href="#创建savepoint" class="headerlink" title="创建savepoint"></a>创建savepoint</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">save transaction savepoint_name</span><br></pre></td></tr></table></figure><h4 id="回退到savepoint"><a href="#回退到savepoint" class="headerlink" title="回退到savepoint"></a>回退到savepoint</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rollback transaction savepoint_name</span><br></pre></td></tr></table></figure><p>eg:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">BEGIN TRANSACTION</span><br><span class="line"></span><br><span class="line">save transaction sp1   //保存点1  更新&apos;11235&apos;的cost为80</span><br><span class="line">update products_tbl</span><br><span class="line">set cost = 80</span><br><span class="line">where prod_id = &apos;11235&apos;;</span><br><span class="line"></span><br><span class="line">save transaction sp2   //保存点2  更新&apos;11235&apos;的cost为99</span><br><span class="line">update products_tbl</span><br><span class="line">set cost = 99</span><br><span class="line">where prod_id = &apos;11235&apos;</span><br><span class="line"></span><br><span class="line">select *//查询  得到&apos;11235&apos;的cost为99</span><br><span class="line">from products_tbl;</span><br><span class="line">  </span><br><span class="line">rollback transaction sp2;  //回退到保存点2 得到&apos;11235&apos;的cost为80</span><br><span class="line"></span><br><span class="line">select *//查询  得到&apos;11235&apos;的cost为80</span><br><span class="line"></span><br><span class="line">from products_tbl;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;事务&quot;&gt;&lt;a href=&quot;#事务&quot; class=&quot;headerlink&quot; title=&quot;事务&quot;&gt;&lt;/a&gt;事务&lt;/h2&gt;&lt;p&gt;事务(Transaction)是用户定义的一个数据库操作序列，这些操作要么全做，要么全不做，是一个不可分割的工作单位。&lt;/p&gt;
&lt;h2 id=&quot;控制事务&quot;&gt;&lt;a href=&quot;#控制事务&quot; class=&quot;headerlink&quot; title=&quot;控制事务&quot;&gt;&lt;/a&gt;控制事务&lt;/h2&gt;&lt;p&gt;###COMMIT命令&lt;/p&gt;
&lt;p&gt;用于把事务所做的修改保存到数据库，把上一个COMMIT或ROLLBACK命令之后的全部事务都保存到数据库。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;begin transaction&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sql语句&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;commit;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="SQL" scheme="www.number47.cn/categories/SQL/"/>
    
    
      <category term="SQL入门经典" scheme="www.number47.cn/tags/SQL%E5%85%A5%E9%97%A8%E7%BB%8F%E5%85%B8/"/>
    
  </entry>
  
</feed>
