{"meta":{"title":"Number 47","subtitle":null,"description":null,"author":"Number 47","url":"http://yoursite.com"},"pages":[{"title":"categories","date":"2017-09-17T01:53:41.000Z","updated":"2017-09-17T01:54:23.504Z","comments":false,"path":"categories/index.html","permalink":"http://yoursite.com/categories/index.html","excerpt":"","text":""},{"title":"tags","date":"2017-09-17T01:52:14.000Z","updated":"2017-09-17T01:54:38.571Z","comments":false,"path":"tags/index.html","permalink":"http://yoursite.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"Java面试题","slug":"Java面试题","date":"2017-11-26T16:00:00.000Z","updated":"2017-11-27T08:36:50.000Z","comments":true,"path":"2017/11/27/Java面试题/","link":"","permalink":"http://yoursite.com/2017/11/27/Java面试题/","excerpt":"","text":"Java面试题原文链接1.面向对象的理解面向对象的本质就是将现实世界描绘成一系列完全自治、封闭的对象。我们在类中编写的方法就是对实现细节的一种封装；我们编写一个类就是对数据和数据操作的封装。可以说，封装就是隐藏一切可隐藏的东西，只向外界提供最简单的编程接口（可以想想普通洗衣机和全自动洗衣机的差别，明显全自动洗衣机封装更好因此操作起来更简单；我们现在使用的智能手机也是封装得足够好的，因为几个按键就搞定了所有的事情）。2. 自动装箱/拆箱机制如果整型字面量的值在-128到127之间，那么不会new新的Integer对象，而是直接引用常量池中的Integer对象，所以下面的面试题中f1== f2的结果是true，而f3== f4的结果是false。1234567public class test &#123; public static void main(String[] args) &#123; Integer f1 = 100, f2 = 100, f3 = 150, f4 = 150; System.out.println(f1 == f2); //true System.out.println(f3 == f4); //false &#125;&#125; 3.栈(stack)、堆(heap)和静态区(static area)栈：定义一个基本数据类型的变量，一个对象的引用，函数调用的现场保存；堆：通过new关键字和构造器创建的对象；堆是垃圾收集器管理的主要区域，由于现在的垃圾收集器都采用分代收集算法，所以堆空间还可以细分为新生代和老生代，再具体一点可以分为Eden、Survivor（又可分为From Survivor和To Survivor）、Tenured；静态区：程序中的字面量（literal）如直接书写的100、”hello”和常量；都是放在常量池中，常量池是方法区的一部分 栈空间操作起来最快但是栈很小。通常大量的对象都是放在堆空间，理论上整个内存没有被其他进程使用的空间甚至硬盘上的虚拟内存都可以被当成堆空间来使用。 1String str = new String(\"Hello\"); 栈：str堆：用new创建出来的字符串对象静态区：&quot;hello&quot;这个字面量4. Math.round(11.5) 等于多少？Math.round(-11.5)等于多少？答：Math.round(11.5)的返回值是12，Math.round(-11.5)的返回值是-11。四舍五入的原理是在参数上加0.5然后进行下取整。5.抽象类（abstract class）和接口（interface）有什么异同？ 答：抽象类和接口都不能够实例化，但可以定义抽象类和接口类型的引用。一个类如果继承了某个抽象类或者实现了某个接口都需要对其中的抽象方法全部进行实现，否则该类仍然需要被声明为抽象类。接口比抽象类更加抽象，因为抽象类中可以定义构造器，可以有抽象方法和具体方法，而接口中不能定义构造器而且其中的方法全部都是抽象方法。抽象类中的成员可以是private、默认、protected、public的，而接口中的成员全都是public的。抽象类中可以定义成员变量，而接口中定义的成员变量实际上都是常量。有抽象方法的类必须被声明为抽象类，而抽象类未必要有抽象方法。6.String s = new String(“xyz”);创建了几个字符串对象？ 答：两个对象，一个是静态区的”xyz”，一个是用new创建在堆上的对象。7.接口是否可继承（extends）接口？抽象类是否可实现（implements）接口？抽象类是否可继承具体类（concrete class）？ 答：接口可以继承接口，而且支持多重继承。抽象类可以实现(implements)接口，抽象类可继承具体类也可以继承抽象类。8.Java 中的final关键字有哪些用法？ 答： 修饰类：表示该类不能被继承； 修饰方法：表示方法不能被重写； 修饰变量：表示变量只能一次赋值以后值不能被修改（常量）。 Alt text","categories":[{"name":"Java","slug":"Java","permalink":"http://yoursite.com/categories/Java/"}],"tags":[{"name":"Java面试","slug":"Java面试","permalink":"http://yoursite.com/tags/Java面试/"}]},{"title":"Java运行机制和JVM","slug":"Java运行机制和JVM","date":"2017-11-25T04:56:35.000Z","updated":"2017-11-27T08:38:39.011Z","comments":true,"path":"2017/11/25/Java运行机制和JVM/","link":"","permalink":"http://yoursite.com/2017/11/25/Java运行机制和JVM/","excerpt":"","text":"JAVA运行机制Java语言编写的程序需要经过编译步骤，这个编译步骤并不会生成特定平台的机器骂，而是生成一种与平台无关的字节码（也就是*.class文件），这种字节码不是可执行性的，必须使用Java解释器来解释执行。","categories":[{"name":"Java","slug":"Java","permalink":"http://yoursite.com/categories/Java/"}],"tags":[{"name":"JAVA基础","slug":"JAVA基础","permalink":"http://yoursite.com/tags/JAVA基础/"}]},{"title":"Activity的四种启动模式","slug":"Andeoid疯狂讲义","date":"2017-09-17T04:56:35.000Z","updated":"2017-11-08T16:02:06.605Z","comments":true,"path":"2017/09/17/Andeoid疯狂讲义/","link":"","permalink":"http://yoursite.com/2017/09/17/Andeoid疯狂讲义/","excerpt":"1.Android是如何管理Activity?Android采用Task管理多个Activity,当我们启动一个应用时，Android会为之创建一个Task，然后启动这个应用的入口（即） 1.2方2222222222222222 1.2 GGGG","text":"1.Android是如何管理Activity?Android采用Task管理多个Activity,当我们启动一个应用时，Android会为之创建一个Task，然后启动这个应用的入口（即） 1.2方2222222222222222 1.2 GGGG ```bash![]","categories":[{"name":"Android","slug":"Android","permalink":"http://yoursite.com/categories/Android/"}],"tags":[{"name":"Android四大组件之Activity","slug":"Android四大组件之Activity","permalink":"http://yoursite.com/tags/Android四大组件之Activity/"}]},{"title":"Hello World","slug":"hello-world","date":"2017-09-17T01:15:34.489Z","updated":"2017-09-17T01:15:34.497Z","comments":true,"path":"2017/09/17/hello-world/","link":"","permalink":"http://yoursite.com/2017/09/17/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}]}