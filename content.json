{"meta":{"title":"Number 47","subtitle":null,"description":"Keep calm and carry on","author":"Number 47","url":"http://yoursite.com"},"pages":[{"title":"categories","date":"2017-12-10T16:21:02.000Z","updated":"2017-12-10T16:25:21.781Z","comments":true,"path":"categories/index.html","permalink":"http://yoursite.com/categories/index.html","excerpt":"","text":""},{"title":"tags","date":"2017-12-10T16:20:43.000Z","updated":"2017-12-10T16:23:14.852Z","comments":true,"path":"tags/index.html","permalink":"http://yoursite.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"SQL基本概念","slug":"SQL基本概念","date":"2017-12-10T04:56:35.000Z","updated":"2017-12-10T16:10:01.553Z","comments":true,"path":"2017/12/10/SQL基本概念/","link":"","permalink":"http://yoursite.com/2017/12/10/SQL基本概念/","excerpt":"","text":"概念DBMS数据库管理系统，数据被保存在数据库中，这种机制叫做数据库管理系统。 RDBMS:关系型数据库管理系统。 DBA数据库管理员 SQL结构化查询语句是与关系型数据库进行通信的标准语言 SQL会话用户利用SQL命令与关系型数据库进行交互时发生的事情。当用户与数据库建立连接时，会话就被建立了。会话可以通过直接与数据库建立链接来申请，也可以通过前端程序来申请。无论何种情况，会话通常是由通过网络访问数据库的用户在终端或工作站建立的。 CONNECT命令CONNECT用于建立与数据库的连接，它可以申请连接,也可以修改连接。当用户连接到数据库时，SQL会话就被初始化了。 命令如下 1CONNECT user@database DISCONNECT/NEXT命令DISCONNECT用于断开用户与数据库的连接。当用户连接到数据库时，SQL会话就被结束了。 当使用EXIT命令离开数据库时，SQL会话就结束了，而且用于访问数据库的软件通常会关闭。 SQL命令的类型DDL—数据库定义语言DDL用于创建和重构数据库对象。 基本的DDL命令： 12345678CREATE TABLEALTER TABLEDROP TABLECREATE INDEXALTER INDEXDROP INDEXCREATE VIEWDROP VIEW DML—数据库操作语言DML用于操作关系型数据库对象内部的数据。 基本命令： 123INSERTUPDATEDELETE DQL—数据查询语句基本命令SELECT DCL—数据控制语言DCL用于控制对数据库里数据的访问，通常用于创建与用户访问相关的对象，以及控制用户权限。 基本命令： 1234ALTER PASSWORDGRANTREVOKECREATE SYNONYM 数据管理命令用于对数据库里的操作进行审计和分析，还有助于分析系统性能。 基本命令： 12START AUDITSTOP AUDIT 事务控制命令用于管理数据库事务 1234COMMIT //保存数据库事务ROLLBACK //撤销数据库事务SAVEPIONT //在一组事务里创建标记点以用于回退（ROLLBACK）SET TRANSACTION //设置实物名称","categories":[{"name":"SQL","slug":"SQL","permalink":"http://yoursite.com/categories/SQL/"}],"tags":[{"name":"SQL","slug":"SQL","permalink":"http://yoursite.com/tags/SQL/"}]},{"title":"SQL数据类型","slug":"SQL数据类型","date":"2017-12-10T04:56:35.000Z","updated":"2017-12-10T15:51:21.828Z","comments":true,"path":"2017/12/10/SQL数据类型/","link":"","permalink":"http://yoursite.com/2017/12/10/SQL数据类型/","excerpt":"","text":"SQL数据类型 CHAR(n)：定长数据类型 VARCHAR(n)：变长数据类型，n表示字段能够保存的最多字符数量 BLOB：大对象类型，二进制大对象，保存很长的二进制字符串 TEXT：长字符串类型，可以看作一个大VARCHAR字段 数值类型 BIT(n) BIT VARCHAR(n) DECIMAL(p, s) INTEGER SMALLINT BIGINT FLOAT(p, s) DOUBLE PRECISION(p, s) REAL(s)p表示字段的最大长度s表示小数点后面的位数 小数点类型DECIMAL(p, s) p：有效位数 s：标度 12eg:DECIMAL(4,2) 最大值为99.99//有效位数是4，也就是数值总位数是4，标度是2小数点后面的位数 如果实际数值的小数位数超出定义的位数，数字就会被四舍五入。 ##浮点数 REAL：单精度浮点数，单精度浮点数的有效位1—21（包含） DOUBLE PRECISION：双精度浮点数的有效位22—53（包含） 日期和时间类型 DATE TIME DATETIME TIMESTAMP ##直义字符串 一系列字符，比如姓名或电话号码，这是有用户或程序明确指定的。 自定义类型由用户定义的类型，允许用户根据已有的数据类型来定制自己的数据类型。 1234567891011MYSQL//创建自定义类型CRATE TYPE PERSON AS OBJECT(NAME VARCHAR(30),SSN VARCHAR(9));//引用自定义类型CREATE TABLE EMP_PAY(EMPLOYEE PERSON,SALARY DECIMAL(10,2),HIRE_DATE DATE); 域域是能够被使用的有效数据类型的集合。域与数据相关联，从而只接受待定的数据，在域创建之后，我们可以向域添加约束，约束与数据类型共同发挥作用，从而限制字段能够接受的数据。 123456789101112//创建域CREATE DOMAIN MONEY_D AS NUMBER(8,2);//添加约束ALTER DOMAIN MONEY_DADD CONSTRANINT MONEY_CON1CHECK (VALUE &gt; 5);//引用域CREATE TABLE EMP_PAY(EMP_ID NUMBER(9),EMP_NAME VARCHAR2(30),PAY_RATE MONET_D);","categories":[{"name":"SQL","slug":"SQL","permalink":"http://yoursite.com/categories/SQL/"}],"tags":[{"name":"SQL","slug":"SQL","permalink":"http://yoursite.com/tags/SQL/"}]},{"title":"异常机制","slug":"异常机制","date":"2017-12-07T04:56:35.000Z","updated":"2017-12-07T15:38:30.266Z","comments":true,"path":"2017/12/07/异常机制/","link":"","permalink":"http://yoursite.com/2017/12/07/异常机制/","excerpt":"","text":"概述异常：程序在运行时出现不正常情况。 Java将异常分为Checked异常、Runtime异常 Runtime异常(运行时异常)定义：所有RuntimeException类及其子类的实例都称为Runtime异常 Checked异常定义：不是RuntimeException类及其子类的实例都称为Checked异常 Java认为Checked异常是可以修复的异常，所以Java程序必须显式处理Checked异常，如果程序没有处理Checked异常，该程序在编译时就会发生错误，无法通过编译。 异常处理机制当程序运行出现意外情形时，系统会自动生成一个Exception对象来通知程序，从而实现将”业务功能实现代码“和“错误处理代码”分离，提供更好的可读性。 下面为异常的处理 方式一：try…catch捕获异常12345678910111213try&#123; //有可能产生异常的业务实现代码&#125;catch(Exception e)//异常对象&#123; System.out.println(e.toString());//异常名称：异常信息 e.printStackTrace();//异常名称：异常信息,异常出现的位置&#125;finally&#123; //一定会执行的语句&#125; 方式二：使用throws声明抛出异常使用场景：当前方法不知道如何处理这种类型的异常，该异常应该由上一级调用者处理；如果main方法也不知道如何处理这种类型的异常，就使用throws声明抛出异常。该异常交给JVM处理，JVM对异常的处理方法是，打印异常的跟踪栈信息，并终止程序运行。 12345public class ThrowsTest&#123; public static void main(String[] args) throws IOException&#123; FileInputStream fis = new FileInputStream(\"a.txt\"); &#125;//该方法希望它的调用者来处理异常,也就是说，调用该方法时要么放在try块中显示捕获该异常，要么放在另一个带throws声明抛出的方法中。&#125; 注意：throws声明抛出异常时有限制：子类方法声明抛出的异常类型应该是父类方法声明抛出类型的子类或相同，子类方法声明抛出异常不允许比父类方法声明抛出的异常多。如下 123456789101112131415public class OverrideThrows&#123; public void test()throws IOException &#123; FileInputStream fis = new FileInputStream(\"a.txt\"); &#125;&#125;class Sub extends OverrideThrows&#123; // 子类方法声明抛出了比父类方法更大的异常 // 所以下面方法出错 public void test()throws Exception &#123; &#125;&#125; 抛出异常：代码出现异常时，系统自动生成一个异常对象，该异常对象被提交给Java环境。 捕获异常：Java运行时环境收到异常对象，会寻找能处理该异常对象的catch块，如果找到合适的catch块，则把该异常对象交给catch块处理。 程序自行抛出异常（throw）throw语句抛出的不是异常类，而是一个异常实例；语法如下： throw ExceptionInstance; 1234567try&#123; if(业务实现代码出现异常的条件)&#123; throw new Exception(\"出现异常\")；&#125;&#125;catch(Exception e)&#123; System.out.println(\"异常\");&#125; 访问异常信息1234getMessage():返回该异常的详细描述字符串printStackTrace():将该异常的跟踪栈信息输出到标准错误输出printStackTrace(PrintStream s):将该异常的跟踪栈信息输出到指定输出流。getStackTrace():返回该异常的跟踪栈信息。","categories":[{"name":"Java","slug":"Java","permalink":"http://yoursite.com/categories/Java/"}],"tags":[{"name":"JAVA基础","slug":"JAVA基础","permalink":"http://yoursite.com/tags/JAVA基础/"}]},{"title":"理解面向对象","slug":"理解面向对象","date":"2017-12-07T04:56:35.000Z","updated":"2017-12-10T16:27:35.645Z","comments":true,"path":"2017/12/07/理解面向对象/","link":"","permalink":"http://yoursite.com/2017/12/07/理解面向对象/","excerpt":"#理解面向对象 ##理解面向对象—概述 JAVA面向对象的三大特性：封装、继承、多态 面向对象和面向过程都是一种思考方式。 面向过程：打开冰箱/放东西进冰箱/关闭冰箱，强调动作过程。 面向对象：冰箱.打开/冰箱.放东西/冰箱.关闭，强调冰箱这一对象。 举例：面向过程到面向对象是从执行者到指挥者 餐厅点菜：我找服务员，服务员就是对象，服务员具有点菜功能。 HR面试我：我就是对象，我就是对象，具备有HR需要的人的技能。","text":"#理解面向对象 ##理解面向对象—概述 JAVA面向对象的三大特性：封装、继承、多态 面向对象和面向过程都是一种思考方式。 面向过程：打开冰箱/放东西进冰箱/关闭冰箱，强调动作过程。 面向对象：冰箱.打开/冰箱.放东西/冰箱.关闭，强调冰箱这一对象。 举例：面向过程到面向对象是从执行者到指挥者 餐厅点菜：我找服务员，服务员就是对象，服务员具有点菜功能。 HR面试我：我就是对象，我就是对象，具备有HR需要的人的技能。","categories":[{"name":"Java","slug":"Java","permalink":"http://yoursite.com/categories/Java/"}],"tags":[{"name":"JAVA基础","slug":"JAVA基础","permalink":"http://yoursite.com/tags/JAVA基础/"}]},{"title":"Java面试题","slug":"Java面试题","date":"2017-11-26T16:00:00.000Z","updated":"2017-12-10T16:27:20.263Z","comments":true,"path":"2017/11/27/Java面试题/","link":"","permalink":"http://yoursite.com/2017/11/27/Java面试题/","excerpt":"","text":"Java面试题原文链接1.面向对象的理解面向对象的本质就是将现实世界描绘成一系列完全自治、封闭的对象。我们在类中编写的方法就是对实现细节的一种封装；我们编写一个类就是对数据和数据操作的封装。可以说，封装就是隐藏一切可隐藏的东西，只向外界提供最简单的编程接口（可以想想普通洗衣机和全自动洗衣机的差别，明显全自动洗衣机封装更好因此操作起来更简单；我们现在使用的智能手机也是封装得足够好的，因为几个按键就搞定了所有的事情）。2. 自动装箱/拆箱机制如果整型字面量的值在-128到127之间，那么不会new新的Integer对象，而是直接引用常量池中的Integer对象，所以下面的面试题中f1== f2的结果是true，而f3== f4的结果是false。1234567public class test &#123; public static void main(String[] args) &#123; Integer f1 = 100, f2 = 100, f3 = 150, f4 = 150; System.out.println(f1 == f2); //true System.out.println(f3 == f4); //false &#125;&#125; 3.栈(stack)、堆(heap)和静态区(static area)栈：定义一个基本数据类型的变量，一个对象的引用，函数调用的现场保存；堆：通过new关键字和构造器创建的对象；堆是垃圾收集器管理的主要区域，由于现在的垃圾收集器都采用分代收集算法，所以堆空间还可以细分为新生代和老生代，再具体一点可以分为Eden、Survivor（又可分为From Survivor和To Survivor）、Tenured；静态区：程序中的字面量（literal）如直接书写的100、”hello”和常量；都是放在常量池中，常量池是方法区的一部分 栈空间操作起来最快但是栈很小。通常大量的对象都是放在堆空间，理论上整个内存没有被其他进程使用的空间甚至硬盘上的虚拟内存都可以被当成堆空间来使用。 1String str = new String(\"Hello\"); 栈：str堆：用new创建出来的字符串对象静态区：&quot;hello&quot;这个字面量4. Math.round(11.5) 等于多少？Math.round(-11.5)等于多少？答：Math.round(11.5)的返回值是12，Math.round(-11.5)的返回值是-11。四舍五入的原理是在参数上加0.5然后进行下取整。5.抽象类（abstract class）和接口（interface）有什么异同？ 答：抽象类和接口都不能够实例化，但可以定义抽象类和接口类型的引用。一个类如果继承了某个抽象类或者实现了某个接口都需要对其中的抽象方法全部进行实现，否则该类仍然需要被声明为抽象类。接口比抽象类更加抽象，因为抽象类中可以定义构造器，可以有抽象方法和具体方法，而接口中不能定义构造器而且其中的方法全部都是抽象方法。抽象类中的成员可以是private、默认、protected、public的，而接口中的成员全都是public的。抽象类中可以定义成员变量，而接口中定义的成员变量实际上都是常量。有抽象方法的类必须被声明为抽象类，而抽象类未必要有抽象方法。6.String s = new String(“xyz”);创建了几个字符串对象？ 答：两个对象，一个是静态区的”xyz”，一个是用new创建在堆上的对象。7.接口是否可继承（extends）接口？抽象类是否可实现（implements）接口？抽象类是否可继承具体类（concrete class）？ 答：接口可以继承接口，而且支持多重继承。抽象类可以实现(implements)接口，抽象类可继承具体类也可以继承抽象类。8.Java 中的final关键字有哪些用法？ 答： 修饰类：表示该类不能被继承； 修饰方法：表示方法不能被重写； 修饰变量：表示变量只能一次赋值以后值不能被修改（常量）。","categories":[{"name":"Java","slug":"Java","permalink":"http://yoursite.com/categories/Java/"}],"tags":[{"name":"Java面试","slug":"Java面试","permalink":"http://yoursite.com/tags/Java面试/"}]},{"title":"Java运行机制/JVM/JRE/JDK","slug":"Java运行机制和JVM","date":"2017-11-25T04:56:35.000Z","updated":"2017-12-10T16:27:09.284Z","comments":true,"path":"2017/11/25/Java运行机制和JVM/","link":"","permalink":"http://yoursite.com/2017/11/25/Java运行机制和JVM/","excerpt":"","text":"JAVA运行机制Java语言编写的程序需要经过编译步骤，这个编译步骤并不会生成特定平台的机器骂，而是生成一种与平台无关的字节码（也就是*.class文件），这种字节码不是可执行性的，必须使用Java解释器来解释执行。Java程序的执行过程需要想编译、后解释，如下： java源文件*.java—使用javac编译—&gt;编译生成*.class文件（字节码文件）—使用java解释执行—&gt;特定平台的机器码。 JVMJava语言里负责解释执行字节码文件的Java虚拟机，即JVM(Java Virtual Machine)。 问：为什么Java可以跨平台？ 答：当使用Java编译器编译Java程序时，生成的是与平台无关的字节码，这些字节码不面向任何具体平台，只面向JVM。不同平台上的JVM都是不同的，但是它们提供了相同的接口。只要不同平台实现了相应的虚拟机，编译后的Java字节码就可以在该平台上运行。 JREJRE（Java Runtime Environment，Java运行环境），包括Java虚拟机JVM和Java程序所需要的核心库等，如果要运行一个开发好的Java程序，计算机中只需要安装JRE。 JDKJDK（Java Development Kit，Java开发工具包），提供给Java开发人员使用的，其中包含了Java的开发工具（javac.exe 编译工具/jar.exe 打包工具），也包含了JRE。所以，安装了JDK后，不需要再单独安装JRE。","categories":[{"name":"Java","slug":"Java","permalink":"http://yoursite.com/categories/Java/"}],"tags":[{"name":"Java基础","slug":"Java基础","permalink":"http://yoursite.com/tags/Java基础/"}]},{"title":"Activity的四种启动模式","slug":"Andeoid疯狂讲义","date":"2017-09-17T04:56:35.000Z","updated":"2017-11-08T16:02:06.605Z","comments":true,"path":"2017/09/17/Andeoid疯狂讲义/","link":"","permalink":"http://yoursite.com/2017/09/17/Andeoid疯狂讲义/","excerpt":"1.Android是如何管理Activity?Android采用Task管理多个Activity,当我们启动一个应用时，Android会为之创建一个Task，然后启动这个应用的入口（即） 1.2方2222222222222222 1.2 GGGG","text":"1.Android是如何管理Activity?Android采用Task管理多个Activity,当我们启动一个应用时，Android会为之创建一个Task，然后启动这个应用的入口（即） 1.2方2222222222222222 1.2 GGGG ```bash![]","categories":[{"name":"Android","slug":"Android","permalink":"http://yoursite.com/categories/Android/"}],"tags":[{"name":"Android四大组件之Activity","slug":"Android四大组件之Activity","permalink":"http://yoursite.com/tags/Android四大组件之Activity/"}]}]}